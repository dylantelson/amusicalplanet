{"ast":null,"code":"/**\n * @module ol/render/canvas/ExecutorGroup\n */\nimport BuilderType from './BuilderType.js';\nimport Executor from './Executor.js';\nimport { buffer, createEmpty, extendCoordinate } from '../../extent.js';\nimport { compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { isEmpty } from '../../obj.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nimport { transform2D } from '../../geom/flat/transform.js';\n/**\n * @const\n * @type {Array<import(\"./BuilderType.js\").default>}\n */\n\nvar ORDER = [BuilderType.POLYGON, BuilderType.CIRCLE, BuilderType.LINE_STRING, BuilderType.IMAGE, BuilderType.TEXT, BuilderType.DEFAULT];\n\nvar ExecutorGroup = function () {\n  /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [opt_renderBuffer] Optional rendering buffer.\n   */\n  function ExecutorGroup(maxExtent, resolution, pixelRatio, overlaps, allInstructions, opt_renderBuffer) {\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overlaps_ = overlaps;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelRatio_ = pixelRatio;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.resolution_ = resolution;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.renderBuffer_ = opt_renderBuffer;\n    /**\n     * @private\n     * @type {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"./Executor\").default>>}\n     */\n\n    this.executorsByZIndex_ = {};\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    this.hitDetectionContext_ = null;\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    this.hitDetectionTransform_ = createTransform();\n    this.createExecutors_(allInstructions);\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n\n\n  ExecutorGroup.prototype.clip = function (context, transform) {\n    var flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  };\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   */\n\n\n  ExecutorGroup.prototype.createExecutors_ = function (allInstructions) {\n    for (var zIndex in allInstructions) {\n      var executors = this.executorsByZIndex_[zIndex];\n\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n\n      var instructionByZindex = allInstructions[zIndex];\n\n      for (var builderType in instructionByZindex) {\n        var instructions = instructionByZindex[builderType];\n        executors[builderType] = new Executor(this.resolution_, this.pixelRatio_, this.overlaps_, instructions);\n      }\n    }\n  };\n  /**\n   * @param {Array<import(\"./BuilderType.js\").default>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n\n\n  ExecutorGroup.prototype.hasExecutors = function (executors) {\n    for (var zIndex in this.executorsByZIndex_) {\n      var candidates = this.executorsByZIndex_[zIndex];\n\n      for (var i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n\n\n  ExecutorGroup.prototype.forEachFeatureAtCoordinate = function (coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {\n    hitTolerance = Math.round(hitTolerance);\n    var contextSize = hitTolerance * 2 + 1;\n    var transform = composeTransform(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);\n    var newContext = !this.hitDetectionContext_;\n\n    if (newContext) {\n      this.hitDetectionContext_ = createCanvasContext2D(contextSize, contextSize);\n    }\n\n    var context = this.hitDetectionContext_;\n\n    if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else if (!newContext) {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n\n    var hitExtent;\n\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = createEmpty();\n      extendCoordinate(hitExtent, coordinate);\n      buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);\n    }\n\n    var indexes = getPixelIndexArray(hitTolerance);\n    var builderType;\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */\n\n    function featureCallback(feature, geometry) {\n      var imageData = context.getImageData(0, 0, contextSize, contextSize).data;\n\n      for (var i_1 = 0, ii = indexes.length; i_1 < ii; i_1++) {\n        if (imageData[indexes[i_1]] > 0) {\n          if (!declutteredFeatures || builderType !== BuilderType.IMAGE && builderType !== BuilderType.TEXT || declutteredFeatures.indexOf(feature) !== -1) {\n            var idx = (indexes[i_1] - 3) / 4;\n            var x = hitTolerance - idx % contextSize;\n            var y = hitTolerance - (idx / contextSize | 0);\n            var result_1 = callback(feature, geometry, x * x + y * y);\n\n            if (result_1) {\n              return result_1;\n            }\n          }\n\n          context.clearRect(0, 0, contextSize, contextSize);\n          break;\n        }\n      }\n\n      return undefined;\n    }\n    /** @type {Array<number>} */\n\n\n    var zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction);\n    var i, j, executors, executor, result;\n\n    for (i = zs.length - 1; i >= 0; --i) {\n      var zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n\n      for (j = ORDER.length - 1; j >= 0; --j) {\n        builderType = ORDER[j];\n        executor = executors[builderType];\n\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);\n\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n\n    return undefined;\n  };\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>} Clip coordinates.\n   */\n\n\n  ExecutorGroup.prototype.getClipCoords = function (transform) {\n    var maxExtent = this.maxExtent_;\n\n    if (!maxExtent) {\n      return null;\n    }\n\n    var minX = maxExtent[0];\n    var minY = maxExtent[1];\n    var maxX = maxExtent[2];\n    var maxY = maxExtent[3];\n    var flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  ExecutorGroup.prototype.isEmpty = function () {\n    return isEmpty(this.executorsByZIndex_);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import(\"./BuilderType.js\").default>} [opt_builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ORDER}\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n\n\n  ExecutorGroup.prototype.execute = function (context, contextScale, transform, viewRotation, snapToPixel, opt_builderTypes, opt_declutterTree) {\n    /** @type {Array<number>} */\n    var zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction); // setup clipping so that the parts of over-simplified geometries are not\n    // visible outside the current extent when panning\n\n    if (this.maxExtent_) {\n      context.save();\n      this.clip(context, transform);\n    }\n\n    var builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;\n    var i, ii, j, jj, replays, replay;\n\n    if (opt_declutterTree) {\n      zs.reverse();\n    }\n\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      var zIndexKey = zs[i].toString();\n      replays = this.executorsByZIndex_[zIndexKey];\n\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n        var builderType = builderTypes[j];\n        replay = replays[builderType];\n\n        if (replay !== undefined) {\n          replay.execute(context, contextScale, transform, viewRotation, snapToPixel, opt_declutterTree);\n        }\n      }\n    }\n\n    if (this.maxExtent_) {\n      context.restore();\n    }\n  };\n\n  return ExecutorGroup;\n}();\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\n\n\nvar circlePixelIndexArrayCache = {};\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\n\nexport function getPixelIndexArray(radius) {\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\n    return circlePixelIndexArrayCache[radius];\n  }\n\n  var size = radius * 2 + 1;\n  var maxDistanceSq = radius * radius;\n  var distances = new Array(maxDistanceSq + 1);\n\n  for (var i = 0; i <= radius; ++i) {\n    for (var j = 0; j <= radius; ++j) {\n      var distanceSq = i * i + j * j;\n\n      if (distanceSq > maxDistanceSq) {\n        break;\n      }\n\n      var distance = distances[distanceSq];\n\n      if (!distance) {\n        distance = [];\n        distances[distanceSq] = distance;\n      }\n\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n\n      if (i > 0) {\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n      }\n\n      if (j > 0) {\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n\n        if (i > 0) {\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n      }\n    }\n  }\n\n  var pixelIndex = [];\n\n  for (var i = 0, ii = distances.length; i < ii; ++i) {\n    if (distances[i]) {\n      pixelIndex.push.apply(pixelIndex, distances[i]);\n    }\n  }\n\n  circlePixelIndexArrayCache[radius] = pixelIndex;\n  return pixelIndex;\n}\nexport default ExecutorGroup;","map":{"version":3,"sources":["../../src/render/canvas/ExecutorGroup.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/render/canvas/ExecutorGroup\n */\nimport BuilderType from './BuilderType.js';\nimport Executor from './Executor.js';\nimport { buffer, createEmpty, extendCoordinate } from '../../extent.js';\nimport { compose as composeTransform, create as createTransform, } from '../../transform.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { isEmpty } from '../../obj.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nimport { transform2D } from '../../geom/flat/transform.js';\n/**\n * @const\n * @type {Array<import(\"./BuilderType.js\").default>}\n */\nvar ORDER = [\n    BuilderType.POLYGON,\n    BuilderType.CIRCLE,\n    BuilderType.LINE_STRING,\n    BuilderType.IMAGE,\n    BuilderType.TEXT,\n    BuilderType.DEFAULT,\n];\nvar ExecutorGroup = /** @class */ (function () {\n    /**\n     * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n     * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n     * should be set here, unless the target context does not exceed that extent (which\n     * can be the case when rendering to tiles).\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {boolean} overlaps The executor group can have overlapping geometries.\n     * @param {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n     * The serializable instructions.\n     * @param {number} [opt_renderBuffer] Optional rendering buffer.\n     */\n    function ExecutorGroup(maxExtent, resolution, pixelRatio, overlaps, allInstructions, opt_renderBuffer) {\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        this.maxExtent_ = maxExtent;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.overlaps_ = overlaps;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.pixelRatio_ = pixelRatio;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.resolution_ = resolution;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.renderBuffer_ = opt_renderBuffer;\n        /**\n         * @private\n         * @type {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"./Executor\").default>>}\n         */\n        this.executorsByZIndex_ = {};\n        /**\n         * @private\n         * @type {CanvasRenderingContext2D}\n         */\n        this.hitDetectionContext_ = null;\n        /**\n         * @private\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        this.hitDetectionTransform_ = createTransform();\n        this.createExecutors_(allInstructions);\n    }\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../transform.js\").Transform} transform Transform.\n     */\n    ExecutorGroup.prototype.clip = function (context, transform) {\n        var flatClipCoords = this.getClipCoords(transform);\n        context.beginPath();\n        context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n        context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n        context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n        context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n        context.clip();\n    };\n    /**\n     * Create executors and populate them using the provided instructions.\n     * @private\n     * @param {!Object<string, !Object<import(\"./BuilderType.js\").default, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n     */\n    ExecutorGroup.prototype.createExecutors_ = function (allInstructions) {\n        for (var zIndex in allInstructions) {\n            var executors = this.executorsByZIndex_[zIndex];\n            if (executors === undefined) {\n                executors = {};\n                this.executorsByZIndex_[zIndex] = executors;\n            }\n            var instructionByZindex = allInstructions[zIndex];\n            for (var builderType in instructionByZindex) {\n                var instructions = instructionByZindex[builderType];\n                executors[builderType] = new Executor(this.resolution_, this.pixelRatio_, this.overlaps_, instructions);\n            }\n        }\n    };\n    /**\n     * @param {Array<import(\"./BuilderType.js\").default>} executors Executors.\n     * @return {boolean} Has executors of the provided types.\n     */\n    ExecutorGroup.prototype.hasExecutors = function (executors) {\n        for (var zIndex in this.executorsByZIndex_) {\n            var candidates = this.executorsByZIndex_[zIndex];\n            for (var i = 0, ii = executors.length; i < ii; ++i) {\n                if (executors[i] in candidates) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n     * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    ExecutorGroup.prototype.forEachFeatureAtCoordinate = function (coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {\n        hitTolerance = Math.round(hitTolerance);\n        var contextSize = hitTolerance * 2 + 1;\n        var transform = composeTransform(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);\n        var newContext = !this.hitDetectionContext_;\n        if (newContext) {\n            this.hitDetectionContext_ = createCanvasContext2D(contextSize, contextSize);\n        }\n        var context = this.hitDetectionContext_;\n        if (context.canvas.width !== contextSize ||\n            context.canvas.height !== contextSize) {\n            context.canvas.width = contextSize;\n            context.canvas.height = contextSize;\n        }\n        else if (!newContext) {\n            context.clearRect(0, 0, contextSize, contextSize);\n        }\n        /**\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        var hitExtent;\n        if (this.renderBuffer_ !== undefined) {\n            hitExtent = createEmpty();\n            extendCoordinate(hitExtent, coordinate);\n            buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);\n        }\n        var indexes = getPixelIndexArray(hitTolerance);\n        var builderType;\n        /**\n         * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n         * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n         * @return {T|undefined} Callback result.\n         */\n        function featureCallback(feature, geometry) {\n            var imageData = context.getImageData(0, 0, contextSize, contextSize).data;\n            for (var i_1 = 0, ii = indexes.length; i_1 < ii; i_1++) {\n                if (imageData[indexes[i_1]] > 0) {\n                    if (!declutteredFeatures ||\n                        (builderType !== BuilderType.IMAGE &&\n                            builderType !== BuilderType.TEXT) ||\n                        declutteredFeatures.indexOf(feature) !== -1) {\n                        var idx = (indexes[i_1] - 3) / 4;\n                        var x = hitTolerance - (idx % contextSize);\n                        var y = hitTolerance - ((idx / contextSize) | 0);\n                        var result_1 = callback(feature, geometry, x * x + y * y);\n                        if (result_1) {\n                            return result_1;\n                        }\n                    }\n                    context.clearRect(0, 0, contextSize, contextSize);\n                    break;\n                }\n            }\n            return undefined;\n        }\n        /** @type {Array<number>} */\n        var zs = Object.keys(this.executorsByZIndex_).map(Number);\n        zs.sort(numberSafeCompareFunction);\n        var i, j, executors, executor, result;\n        for (i = zs.length - 1; i >= 0; --i) {\n            var zIndexKey = zs[i].toString();\n            executors = this.executorsByZIndex_[zIndexKey];\n            for (j = ORDER.length - 1; j >= 0; --j) {\n                builderType = ORDER[j];\n                executor = executors[builderType];\n                if (executor !== undefined) {\n                    result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);\n                    if (result) {\n                        return result;\n                    }\n                }\n            }\n        }\n        return undefined;\n    };\n    /**\n     * @param {import(\"../../transform.js\").Transform} transform Transform.\n     * @return {Array<number>} Clip coordinates.\n     */\n    ExecutorGroup.prototype.getClipCoords = function (transform) {\n        var maxExtent = this.maxExtent_;\n        if (!maxExtent) {\n            return null;\n        }\n        var minX = maxExtent[0];\n        var minY = maxExtent[1];\n        var maxX = maxExtent[2];\n        var maxY = maxExtent[3];\n        var flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n        transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n        return flatClipCoords;\n    };\n    /**\n     * @return {boolean} Is empty.\n     */\n    ExecutorGroup.prototype.isEmpty = function () {\n        return isEmpty(this.executorsByZIndex_);\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {number} contextScale Scale of the context.\n     * @param {import(\"../../transform.js\").Transform} transform Transform.\n     * @param {number} viewRotation View rotation.\n     * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n     * @param {Array<import(\"./BuilderType.js\").default>} [opt_builderTypes] Ordered replay types to replay.\n     *     Default is {@link module:ol/render/replay~ORDER}\n     * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n     */\n    ExecutorGroup.prototype.execute = function (context, contextScale, transform, viewRotation, snapToPixel, opt_builderTypes, opt_declutterTree) {\n        /** @type {Array<number>} */\n        var zs = Object.keys(this.executorsByZIndex_).map(Number);\n        zs.sort(numberSafeCompareFunction);\n        // setup clipping so that the parts of over-simplified geometries are not\n        // visible outside the current extent when panning\n        if (this.maxExtent_) {\n            context.save();\n            this.clip(context, transform);\n        }\n        var builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;\n        var i, ii, j, jj, replays, replay;\n        if (opt_declutterTree) {\n            zs.reverse();\n        }\n        for (i = 0, ii = zs.length; i < ii; ++i) {\n            var zIndexKey = zs[i].toString();\n            replays = this.executorsByZIndex_[zIndexKey];\n            for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n                var builderType = builderTypes[j];\n                replay = replays[builderType];\n                if (replay !== undefined) {\n                    replay.execute(context, contextScale, transform, viewRotation, snapToPixel, opt_declutterTree);\n                }\n            }\n        }\n        if (this.maxExtent_) {\n            context.restore();\n        }\n    };\n    return ExecutorGroup;\n}());\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\nvar circlePixelIndexArrayCache = {};\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\nexport function getPixelIndexArray(radius) {\n    if (circlePixelIndexArrayCache[radius] !== undefined) {\n        return circlePixelIndexArrayCache[radius];\n    }\n    var size = radius * 2 + 1;\n    var maxDistanceSq = radius * radius;\n    var distances = new Array(maxDistanceSq + 1);\n    for (var i = 0; i <= radius; ++i) {\n        for (var j = 0; j <= radius; ++j) {\n            var distanceSq = i * i + j * j;\n            if (distanceSq > maxDistanceSq) {\n                break;\n            }\n            var distance = distances[distanceSq];\n            if (!distance) {\n                distance = [];\n                distances[distanceSq] = distance;\n            }\n            distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n            if (i > 0) {\n                distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n            }\n            if (j > 0) {\n                distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n                if (i > 0) {\n                    distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n                }\n            }\n        }\n    }\n    var pixelIndex = [];\n    for (var i = 0, ii = distances.length; i < ii; ++i) {\n        if (distances[i]) {\n            pixelIndex.push.apply(pixelIndex, distances[i]);\n        }\n    }\n    circlePixelIndexArrayCache[radius] = pixelIndex;\n    return pixelIndex;\n}\nexport default ExecutorGroup;\n//# sourceMappingURL=ExecutorGroup.js.map"]},"metadata":{},"sourceType":"module"}