{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/AudioPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./Play.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AudioPlayer = ({\n  audioRef,\n  trackURL\n}) => {\n  _s();\n\n  const [paused, setPaused] = useState(true);\n  const [currTime, setCurrTime] = useState(true);\n\n  const togglePause = () => {\n    if (paused === true) audioRef.current.play();else audioRef.current.pause();\n    setPaused(!paused);\n  };\n\n  const formatTime = timeInSeconds => {\n    // const totalSeconds = Math.floor(time);\n    const minutes = Math.floor(timeInSeconds / 60);\n    const seconds = Math.floor(timeInSeconds % 60);\n    if (seconds < 10) return `${minutes}:0${seconds}`;\n    return `${minutes}:${seconds}`;\n  };\n\n  const onSeek = newTime => {\n    audioRef.current.currentTime = newTime;\n    setCurrTime(newTime);\n  }; //uncomment this if you want audio to autoplay\n  //after the user finishes seeking a paused track\n  // const onSeekEnd = () => {\n  //   if (paused) {\n  //     audioRef.current.play();\n  //     setPaused(false);\n  //   }\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      id: \"audioPlayer\",\n      controls: true,\n      ref: audioRef,\n      onTimeUpdate: () => setCurrTime(audioRef.current.currentTime),\n      onPlay: () => paused ? setPaused(false) : null,\n      onPause: () => !paused ? setPaused(true) : null,\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        volume: \"2\",\n        allow: \"autoplay\",\n        src: trackURL,\n        type: \"audio/mpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playButtonContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: paused ? \"audioButton\" : \"audioButton paused\",\n        onClick: () => togglePause()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timeControls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: paused ? \"0:00\" : formatTime(currTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          value: currTime,\n          min: \"0\",\n          max: audioRef.current && audioRef.current.duration ? audioRef.current.duration : 30,\n          className: \"audioSeeker\",\n          onChange: e => onSeek(e.target.value) // onMouseUp={onSeekEnd}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: !audioRef.current || !audioRef.current.duration ? \"0:30\" : formatTime(audioRef.current.duration)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AudioPlayer, \"mXtFEO8msLKqjKKtlXixeLNP1sk=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/AudioPlayer.js"],"names":["React","useState","AudioPlayer","audioRef","trackURL","paused","setPaused","currTime","setCurrTime","togglePause","current","play","pause","formatTime","timeInSeconds","minutes","Math","floor","seconds","onSeek","newTime","currentTime","duration","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Play.css\";\n\nconst AudioPlayer = ({ audioRef, trackURL }) => {\n  const [paused, setPaused] = useState(true);\n  const [currTime, setCurrTime] = useState(true);\n  const togglePause = () => {\n    if (paused === true) audioRef.current.play();\n    else audioRef.current.pause();\n    setPaused(!paused);\n  };\n  const formatTime = (timeInSeconds) => {\n    // const totalSeconds = Math.floor(time);\n    const minutes = Math.floor(timeInSeconds / 60);\n    const seconds = Math.floor(timeInSeconds % 60);\n    if (seconds < 10) return `${minutes}:0${seconds}`;\n    return `${minutes}:${seconds}`;\n  };\n\n  const onSeek = (newTime) => {\n    audioRef.current.currentTime = newTime;\n    setCurrTime(newTime);\n  };\n\n  //uncomment this if you want audio to autoplay\n  //after the user finishes seeking a paused track\n  // const onSeekEnd = () => {\n  //   if (paused) {\n  //     audioRef.current.play();\n  //     setPaused(false);\n  //   }\n  // };\n\n  return (\n    <>\n      <audio\n        id=\"audioPlayer\"\n        controls\n        ref={audioRef}\n        onTimeUpdate={() => setCurrTime(audioRef.current.currentTime)}\n        onPlay={() => (paused ? setPaused(false) : null)}\n        onPause={() => (!paused ? setPaused(true) : null)}\n      >\n        <source\n          volume=\"2\"\n          allow=\"autoplay\"\n          src={trackURL}\n          type=\"audio/mpeg\"\n        ></source>\n      </audio>\n      <div className=\"playButtonContainer\">\n        <div\n          className={paused ? \"audioButton\" : \"audioButton paused\"}\n          onClick={() => togglePause()}\n        ></div>\n        <div className=\"timeControls\">\n          <p>{paused ? \"0:00\" : formatTime(currTime)}</p>\n          <input\n            type=\"range\"\n            value={currTime}\n            min=\"0\"\n            max={\n              audioRef.current && audioRef.current.duration\n                ? audioRef.current.duration\n                : 30\n            }\n            className=\"audioSeeker\"\n            onChange={(e) => onSeek(e.target.value)}\n            // onMouseUp={onSeekEnd}\n          />\n          <p>\n            {!audioRef.current || !audioRef.current.duration\n              ? \"0:30\"\n              : formatTime(audioRef.current.duration)}\n          </p>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}