{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/render/canvas/TextBuilder\n */\n\n\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport TextPlacement from '../../style/TextPlacement.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { defaultFillStyle, defaultFont, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultPadding, defaultStrokeStyle, defaultTextAlign, defaultTextBaseline, registerFont } from '../canvas.js';\nimport { getUid } from '../../util.js';\nimport { intersects } from '../../extent.js';\nimport { matchingChunk } from '../../geom/flat/straightchunk.js';\n/**\n * @const\n * @enum {number}\n */\n\nexport var TEXT_ALIGN = {\n  'left': 0,\n  'end': 0,\n  'center': 0.5,\n  'right': 1,\n  'start': 1,\n  'top': 0,\n  'middle': 0.5,\n  'hanging': 0.2,\n  'alphabetic': 0.8,\n  'ideographic': 0.8,\n  'bottom': 1\n};\n\nvar CanvasTextBuilder = function (_super) {\n  __extends(CanvasTextBuilder, _super);\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n\n\n  function CanvasTextBuilder(tolerance, maxExtent, resolution, pixelRatio) {\n    var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;\n    /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */\n\n\n    _this.labels_ = null;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.text_ = '';\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.textOffsetX_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.textOffsetY_ = 0;\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n\n    _this.textRotateWithView_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.textRotation_ = 0;\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n\n    _this.textFillState_ = null;\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n\n    _this.fillStates = {};\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n\n    _this.textStrokeState_ = null;\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n\n    _this.strokeStates = {};\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */\n\n    _this.textState_ = {};\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n\n    _this.textStates = {};\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.textKey_ = '';\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.fillKey_ = '';\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.strokeKey_ = '';\n    /**\n     * Data shared with an image builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n\n    _this.declutterImageWithText_ = undefined;\n    return _this;\n  }\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n\n\n  CanvasTextBuilder.prototype.finish = function () {\n    var instructions = _super.prototype.finish.call(this);\n\n    instructions.textStates = this.textStates;\n    instructions.fillStates = this.fillStates;\n    instructions.strokeStates = this.strokeStates;\n    return instructions;\n  };\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n\n\n  CanvasTextBuilder.prototype.drawText = function (geometry, feature) {\n    var fillState = this.textFillState_;\n    var strokeState = this.textStrokeState_;\n    var textState = this.textState_;\n\n    if (this.text_ === '' || !textState || !fillState && !strokeState) {\n      return;\n    }\n\n    var coordinates = this.coordinates;\n    var begin = coordinates.length;\n    var geometryType = geometry.getType();\n    var flatCoordinates = null;\n    var stride = geometry.getStride();\n\n    if (textState.placement === TextPlacement.LINE && (geometryType == GeometryType.LINE_STRING || geometryType == GeometryType.MULTI_LINE_STRING || geometryType == GeometryType.POLYGON || geometryType == GeometryType.MULTI_POLYGON)) {\n      if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n        return;\n      }\n\n      var ends = void 0;\n      flatCoordinates = geometry.getFlatCoordinates();\n\n      if (geometryType == GeometryType.LINE_STRING) {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == GeometryType.MULTI_LINE_STRING) {\n        ends =\n        /** @type {import(\"../../geom/MultiLineString.js\").default} */\n        geometry.getEnds();\n      } else if (geometryType == GeometryType.POLYGON) {\n        ends =\n        /** @type {import(\"../../geom/Polygon.js\").default} */\n        geometry.getEnds().slice(0, 1);\n      } else if (geometryType == GeometryType.MULTI_POLYGON) {\n        var endss =\n        /** @type {import(\"../../geom/MultiPolygon.js\").default} */\n        geometry.getEndss();\n        ends = [];\n\n        for (var i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n\n      this.beginGeometry(geometry, feature);\n      var textAlign = textState.textAlign;\n      var flatOffset = 0;\n      var flatEnd = void 0;\n\n      for (var o = 0, oo = ends.length; o < oo; ++o) {\n        if (textAlign == undefined) {\n          var range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);\n          flatOffset = range[0];\n          flatEnd = range[1];\n        } else {\n          flatEnd = ends[o];\n        }\n\n        for (var i = flatOffset; i < flatEnd; i += stride) {\n          coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);\n        }\n\n        var end = coordinates.length;\n        flatOffset = ends[o];\n        this.drawChars_(begin, end);\n        begin = end;\n      }\n\n      this.endGeometry(feature);\n    } else {\n      var geometryWidths = textState.overflow ? null : [];\n\n      switch (geometryType) {\n        case GeometryType.POINT:\n        case GeometryType.MULTI_POINT:\n          flatCoordinates =\n          /** @type {import(\"../../geom/MultiPoint.js\").default} */\n          geometry.getFlatCoordinates();\n          break;\n\n        case GeometryType.LINE_STRING:\n          flatCoordinates =\n          /** @type {import(\"../../geom/LineString.js\").default} */\n          geometry.getFlatMidpoint();\n          break;\n\n        case GeometryType.CIRCLE:\n          flatCoordinates =\n          /** @type {import(\"../../geom/Circle.js\").default} */\n          geometry.getCenter();\n          break;\n\n        case GeometryType.MULTI_LINE_STRING:\n          flatCoordinates =\n          /** @type {import(\"../../geom/MultiLineString.js\").default} */\n          geometry.getFlatMidpoints();\n          stride = 2;\n          break;\n\n        case GeometryType.POLYGON:\n          flatCoordinates =\n          /** @type {import(\"../../geom/Polygon.js\").default} */\n          geometry.getFlatInteriorPoint();\n\n          if (!textState.overflow) {\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\n          }\n\n          stride = 3;\n          break;\n\n        case GeometryType.MULTI_POLYGON:\n          var interiorPoints =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */\n          geometry.getFlatInteriorPoints();\n          flatCoordinates = [];\n\n          for (var i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (!textState.overflow) {\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n            }\n\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n\n          if (flatCoordinates.length === 0) {\n            return;\n          }\n\n          stride = 2;\n          break;\n\n        default:\n      }\n\n      var end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n\n      if (end === begin) {\n        return;\n      }\n\n      if (geometryWidths && (end - begin) / 2 !== flatCoordinates.length / stride) {\n        var beg_1 = begin / 2;\n        geometryWidths = geometryWidths.filter(function (w, i) {\n          var keep = coordinates[(beg_1 + i) * 2] === flatCoordinates[i * stride] && coordinates[(beg_1 + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n\n          if (!keep) {\n            --beg_1;\n          }\n\n          return keep;\n        });\n      }\n\n      this.saveTextStates_();\n\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);\n\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill);\n          this.hitDetectionInstructions.push(this.createFill(this.state));\n        }\n\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n\n      this.beginGeometry(geometry, feature); // adjust padding for negative scale\n\n      var padding = textState.padding;\n\n      if (padding != defaultPadding && (textState.scale[0] < 0 || textState.scale[1] < 0)) {\n        var p0 = textState.padding[0];\n        var p1 = textState.padding[1];\n        var p2 = textState.padding[2];\n        var p3 = textState.padding[3];\n\n        if (textState.scale[0] < 0) {\n          p1 = -p1;\n          p3 = -p3;\n        }\n\n        if (textState.scale[1] < 0) {\n          p0 = -p0;\n          p2 = -p2;\n        }\n\n        padding = [p0, p1, p2, p3];\n      } // The image is unknown at this stage so we pass null; it will be computed at render time.\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n      // render time.\n\n\n      var pixelRatio_1 = this.pixelRatio;\n      this.instructions.push([CanvasInstruction.DRAW_IMAGE, begin, end, null, NaN, NaN, NaN, 1, 0, 0, this.textRotateWithView_, this.textRotation_, [1, 1], NaN, this.declutterImageWithText_, padding == defaultPadding ? defaultPadding : padding.map(function (p) {\n        return p * pixelRatio_1;\n      }), !!textState.backgroundFill, !!textState.backgroundStroke, this.text_, this.textKey_, this.strokeKey_, this.fillKey_, this.textOffsetX_, this.textOffsetY_, geometryWidths]);\n      var scale = 1 / pixelRatio_1;\n      this.hitDetectionInstructions.push([CanvasInstruction.DRAW_IMAGE, begin, end, null, NaN, NaN, NaN, 1, 0, 0, this.textRotateWithView_, this.textRotation_, [scale, scale], NaN, this.declutterImageWithText_, padding, !!textState.backgroundFill, !!textState.backgroundStroke, this.text_, this.textKey_, this.strokeKey_, this.fillKey_, this.textOffsetX_, this.textOffsetY_, geometryWidths]);\n      this.endGeometry(feature);\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  CanvasTextBuilder.prototype.saveTextStates_ = function () {\n    var strokeState = this.textStrokeState_;\n    var textState = this.textState_;\n    var fillState = this.textFillState_;\n    var strokeKey = this.strokeKey_;\n\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash\n        };\n      }\n    }\n\n    var textKey = this.textKey_;\n\n    if (!(textKey in this.textStates)) {\n      this.textStates[textKey] = {\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        textBaseline: textState.textBaseline || defaultTextBaseline,\n        scale: textState.scale\n      };\n    }\n\n    var fillKey = this.fillKey_;\n\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = {\n          fillStyle: fillState.fillStyle\n        };\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */\n\n\n  CanvasTextBuilder.prototype.drawChars_ = function (begin, end) {\n    var strokeState = this.textStrokeState_;\n    var textState = this.textState_;\n    var strokeKey = this.strokeKey_;\n    var textKey = this.textKey_;\n    var fillKey = this.fillKey_;\n    this.saveTextStates_();\n    var pixelRatio = this.pixelRatio;\n    var baseline = TEXT_ALIGN[textState.textBaseline];\n    var offsetY = this.textOffsetY_ * pixelRatio;\n    var text = this.text_;\n    var strokeWidth = strokeState ? strokeState.lineWidth * Math.abs(textState.scale[0]) / 2 : 0;\n    this.instructions.push([CanvasInstruction.DRAW_CHARS, begin, end, baseline, textState.overflow, fillKey, textState.maxAngle, pixelRatio, offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1]);\n    this.hitDetectionInstructions.push([CanvasInstruction.DRAW_CHARS, begin, end, baseline, textState.overflow, fillKey, textState.maxAngle, 1, offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio]);\n  };\n  /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {Object} [opt_sharedData] Shared data.\n   */\n\n\n  CanvasTextBuilder.prototype.setTextStyle = function (textStyle, opt_sharedData) {\n    var textState, fillState, strokeState;\n\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      var textFillStyle = textStyle.getFill();\n\n      if (!textFillStyle) {\n        fillState = null;\n        this.textFillState_ = fillState;\n      } else {\n        fillState = this.textFillState_;\n\n        if (!fillState) {\n          fillState = {};\n          this.textFillState_ = fillState;\n        }\n\n        fillState.fillStyle = asColorLike(textFillStyle.getColor() || defaultFillStyle);\n      }\n\n      var textStrokeStyle = textStyle.getStroke();\n\n      if (!textStrokeStyle) {\n        strokeState = null;\n        this.textStrokeState_ = strokeState;\n      } else {\n        strokeState = this.textStrokeState_;\n\n        if (!strokeState) {\n          strokeState = {};\n          this.textStrokeState_ = strokeState;\n        }\n\n        var lineDash = textStrokeStyle.getLineDash();\n        var lineDashOffset = textStrokeStyle.getLineDashOffset();\n        var lineWidth = textStrokeStyle.getWidth();\n        var miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset = lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth = lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit = miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(textStrokeStyle.getColor() || defaultStrokeStyle);\n      }\n\n      textState = this.textState_;\n      var font = textStyle.getFont() || defaultFont;\n      registerFont(font);\n      var textScale = textStyle.getScaleArray();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.textBaseline = textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\n      var textOffsetX = textStyle.getOffsetX();\n      var textOffsetY = textStyle.getOffsetY();\n      var textRotateWithView = textStyle.getRotateWithView();\n      var textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n      this.strokeKey_ = strokeState ? (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : getUid(strokeState.strokeStyle)) + strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth + strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' : '';\n      this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?') + (textState.textBaseline || '?');\n      this.fillKey_ = fillState ? typeof fillState.fillStyle == 'string' ? fillState.fillStyle : '|' + getUid(fillState.fillStyle) : '';\n    }\n\n    this.declutterImageWithText_ = opt_sharedData;\n  };\n\n  return CanvasTextBuilder;\n}(CanvasBuilder);\n\nexport default CanvasTextBuilder;","map":{"version":3,"sources":["../../src/render/canvas/TextBuilder.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/render/canvas/TextBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport TextPlacement from '../../style/TextPlacement.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { defaultFillStyle, defaultFont, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultPadding, defaultStrokeStyle, defaultTextAlign, defaultTextBaseline, registerFont, } from '../canvas.js';\nimport { getUid } from '../../util.js';\nimport { intersects } from '../../extent.js';\nimport { matchingChunk } from '../../geom/flat/straightchunk.js';\n/**\n * @const\n * @enum {number}\n */\nexport var TEXT_ALIGN = {\n    'left': 0,\n    'end': 0,\n    'center': 0.5,\n    'right': 1,\n    'start': 1,\n    'top': 0,\n    'middle': 0.5,\n    'hanging': 0.2,\n    'alphabetic': 0.8,\n    'ideographic': 0.8,\n    'bottom': 1,\n};\nvar CanvasTextBuilder = /** @class */ (function (_super) {\n    __extends(CanvasTextBuilder, _super);\n    /**\n     * @param {number} tolerance Tolerance.\n     * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     */\n    function CanvasTextBuilder(tolerance, maxExtent, resolution, pixelRatio) {\n        var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;\n        /**\n         * @private\n         * @type {Array<HTMLCanvasElement>}\n         */\n        _this.labels_ = null;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.text_ = '';\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.textOffsetX_ = 0;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.textOffsetY_ = 0;\n        /**\n         * @private\n         * @type {boolean|undefined}\n         */\n        _this.textRotateWithView_ = undefined;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.textRotation_ = 0;\n        /**\n         * @private\n         * @type {?import(\"../canvas.js\").FillState}\n         */\n        _this.textFillState_ = null;\n        /**\n         * @type {!Object<string, import(\"../canvas.js\").FillState>}\n         */\n        _this.fillStates = {};\n        /**\n         * @private\n         * @type {?import(\"../canvas.js\").StrokeState}\n         */\n        _this.textStrokeState_ = null;\n        /**\n         * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n         */\n        _this.strokeStates = {};\n        /**\n         * @private\n         * @type {import(\"../canvas.js\").TextState}\n         */\n        _this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\n        /**\n         * @type {!Object<string, import(\"../canvas.js\").TextState>}\n         */\n        _this.textStates = {};\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.textKey_ = '';\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.fillKey_ = '';\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.strokeKey_ = '';\n        /**\n         * Data shared with an image builder for combined decluttering.\n         * @private\n         * @type {import(\"../canvas.js\").DeclutterImageWithText}\n         */\n        _this.declutterImageWithText_ = undefined;\n        return _this;\n    }\n    /**\n     * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n     */\n    CanvasTextBuilder.prototype.finish = function () {\n        var instructions = _super.prototype.finish.call(this);\n        instructions.textStates = this.textStates;\n        instructions.fillStates = this.fillStates;\n        instructions.strokeStates = this.strokeStates;\n        return instructions;\n    };\n    /**\n     * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     */\n    CanvasTextBuilder.prototype.drawText = function (geometry, feature) {\n        var fillState = this.textFillState_;\n        var strokeState = this.textStrokeState_;\n        var textState = this.textState_;\n        if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\n            return;\n        }\n        var coordinates = this.coordinates;\n        var begin = coordinates.length;\n        var geometryType = geometry.getType();\n        var flatCoordinates = null;\n        var stride = geometry.getStride();\n        if (textState.placement === TextPlacement.LINE &&\n            (geometryType == GeometryType.LINE_STRING ||\n                geometryType == GeometryType.MULTI_LINE_STRING ||\n                geometryType == GeometryType.POLYGON ||\n                geometryType == GeometryType.MULTI_POLYGON)) {\n            if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n                return;\n            }\n            var ends = void 0;\n            flatCoordinates = geometry.getFlatCoordinates();\n            if (geometryType == GeometryType.LINE_STRING) {\n                ends = [flatCoordinates.length];\n            }\n            else if (geometryType == GeometryType.MULTI_LINE_STRING) {\n                ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (geometry).getEnds();\n            }\n            else if (geometryType == GeometryType.POLYGON) {\n                ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\n                    .getEnds()\n                    .slice(0, 1);\n            }\n            else if (geometryType == GeometryType.MULTI_POLYGON) {\n                var endss = \n                /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (geometry).getEndss();\n                ends = [];\n                for (var i = 0, ii = endss.length; i < ii; ++i) {\n                    ends.push(endss[i][0]);\n                }\n            }\n            this.beginGeometry(geometry, feature);\n            var textAlign = textState.textAlign;\n            var flatOffset = 0;\n            var flatEnd = void 0;\n            for (var o = 0, oo = ends.length; o < oo; ++o) {\n                if (textAlign == undefined) {\n                    var range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);\n                    flatOffset = range[0];\n                    flatEnd = range[1];\n                }\n                else {\n                    flatEnd = ends[o];\n                }\n                for (var i = flatOffset; i < flatEnd; i += stride) {\n                    coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);\n                }\n                var end = coordinates.length;\n                flatOffset = ends[o];\n                this.drawChars_(begin, end);\n                begin = end;\n            }\n            this.endGeometry(feature);\n        }\n        else {\n            var geometryWidths = textState.overflow ? null : [];\n            switch (geometryType) {\n                case GeometryType.POINT:\n                case GeometryType.MULTI_POINT:\n                    flatCoordinates =\n                        /** @type {import(\"../../geom/MultiPoint.js\").default} */ (geometry).getFlatCoordinates();\n                    break;\n                case GeometryType.LINE_STRING:\n                    flatCoordinates =\n                        /** @type {import(\"../../geom/LineString.js\").default} */ (geometry).getFlatMidpoint();\n                    break;\n                case GeometryType.CIRCLE:\n                    flatCoordinates =\n                        /** @type {import(\"../../geom/Circle.js\").default} */ (geometry).getCenter();\n                    break;\n                case GeometryType.MULTI_LINE_STRING:\n                    flatCoordinates =\n                        /** @type {import(\"../../geom/MultiLineString.js\").default} */ (geometry).getFlatMidpoints();\n                    stride = 2;\n                    break;\n                case GeometryType.POLYGON:\n                    flatCoordinates =\n                        /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry).getFlatInteriorPoint();\n                    if (!textState.overflow) {\n                        geometryWidths.push(flatCoordinates[2] / this.resolution);\n                    }\n                    stride = 3;\n                    break;\n                case GeometryType.MULTI_POLYGON:\n                    var interiorPoints = \n                    /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (geometry).getFlatInteriorPoints();\n                    flatCoordinates = [];\n                    for (var i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n                        if (!textState.overflow) {\n                            geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n                        }\n                        flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n                    }\n                    if (flatCoordinates.length === 0) {\n                        return;\n                    }\n                    stride = 2;\n                    break;\n                default:\n            }\n            var end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n            if (end === begin) {\n                return;\n            }\n            if (geometryWidths &&\n                (end - begin) / 2 !== flatCoordinates.length / stride) {\n                var beg_1 = begin / 2;\n                geometryWidths = geometryWidths.filter(function (w, i) {\n                    var keep = coordinates[(beg_1 + i) * 2] === flatCoordinates[i * stride] &&\n                        coordinates[(beg_1 + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n                    if (!keep) {\n                        --beg_1;\n                    }\n                    return keep;\n                });\n            }\n            this.saveTextStates_();\n            if (textState.backgroundFill || textState.backgroundStroke) {\n                this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);\n                if (textState.backgroundFill) {\n                    this.updateFillStyle(this.state, this.createFill);\n                    this.hitDetectionInstructions.push(this.createFill(this.state));\n                }\n                if (textState.backgroundStroke) {\n                    this.updateStrokeStyle(this.state, this.applyStroke);\n                    this.hitDetectionInstructions.push(this.createStroke(this.state));\n                }\n            }\n            this.beginGeometry(geometry, feature);\n            // adjust padding for negative scale\n            var padding = textState.padding;\n            if (padding != defaultPadding &&\n                (textState.scale[0] < 0 || textState.scale[1] < 0)) {\n                var p0 = textState.padding[0];\n                var p1 = textState.padding[1];\n                var p2 = textState.padding[2];\n                var p3 = textState.padding[3];\n                if (textState.scale[0] < 0) {\n                    p1 = -p1;\n                    p3 = -p3;\n                }\n                if (textState.scale[1] < 0) {\n                    p0 = -p0;\n                    p2 = -p2;\n                }\n                padding = [p0, p1, p2, p3];\n            }\n            // The image is unknown at this stage so we pass null; it will be computed at render time.\n            // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n            // render time.\n            var pixelRatio_1 = this.pixelRatio;\n            this.instructions.push([\n                CanvasInstruction.DRAW_IMAGE,\n                begin,\n                end,\n                null,\n                NaN,\n                NaN,\n                NaN,\n                1,\n                0,\n                0,\n                this.textRotateWithView_,\n                this.textRotation_,\n                [1, 1],\n                NaN,\n                this.declutterImageWithText_,\n                padding == defaultPadding\n                    ? defaultPadding\n                    : padding.map(function (p) {\n                        return p * pixelRatio_1;\n                    }),\n                !!textState.backgroundFill,\n                !!textState.backgroundStroke,\n                this.text_,\n                this.textKey_,\n                this.strokeKey_,\n                this.fillKey_,\n                this.textOffsetX_,\n                this.textOffsetY_,\n                geometryWidths,\n            ]);\n            var scale = 1 / pixelRatio_1;\n            this.hitDetectionInstructions.push([\n                CanvasInstruction.DRAW_IMAGE,\n                begin,\n                end,\n                null,\n                NaN,\n                NaN,\n                NaN,\n                1,\n                0,\n                0,\n                this.textRotateWithView_,\n                this.textRotation_,\n                [scale, scale],\n                NaN,\n                this.declutterImageWithText_,\n                padding,\n                !!textState.backgroundFill,\n                !!textState.backgroundStroke,\n                this.text_,\n                this.textKey_,\n                this.strokeKey_,\n                this.fillKey_,\n                this.textOffsetX_,\n                this.textOffsetY_,\n                geometryWidths,\n            ]);\n            this.endGeometry(feature);\n        }\n    };\n    /**\n     * @private\n     */\n    CanvasTextBuilder.prototype.saveTextStates_ = function () {\n        var strokeState = this.textStrokeState_;\n        var textState = this.textState_;\n        var fillState = this.textFillState_;\n        var strokeKey = this.strokeKey_;\n        if (strokeState) {\n            if (!(strokeKey in this.strokeStates)) {\n                this.strokeStates[strokeKey] = {\n                    strokeStyle: strokeState.strokeStyle,\n                    lineCap: strokeState.lineCap,\n                    lineDashOffset: strokeState.lineDashOffset,\n                    lineWidth: strokeState.lineWidth,\n                    lineJoin: strokeState.lineJoin,\n                    miterLimit: strokeState.miterLimit,\n                    lineDash: strokeState.lineDash,\n                };\n            }\n        }\n        var textKey = this.textKey_;\n        if (!(textKey in this.textStates)) {\n            this.textStates[textKey] = {\n                font: textState.font,\n                textAlign: textState.textAlign || defaultTextAlign,\n                textBaseline: textState.textBaseline || defaultTextBaseline,\n                scale: textState.scale,\n            };\n        }\n        var fillKey = this.fillKey_;\n        if (fillState) {\n            if (!(fillKey in this.fillStates)) {\n                this.fillStates[fillKey] = {\n                    fillStyle: fillState.fillStyle,\n                };\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {number} begin Begin.\n     * @param {number} end End.\n     */\n    CanvasTextBuilder.prototype.drawChars_ = function (begin, end) {\n        var strokeState = this.textStrokeState_;\n        var textState = this.textState_;\n        var strokeKey = this.strokeKey_;\n        var textKey = this.textKey_;\n        var fillKey = this.fillKey_;\n        this.saveTextStates_();\n        var pixelRatio = this.pixelRatio;\n        var baseline = TEXT_ALIGN[textState.textBaseline];\n        var offsetY = this.textOffsetY_ * pixelRatio;\n        var text = this.text_;\n        var strokeWidth = strokeState\n            ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\n            : 0;\n        this.instructions.push([\n            CanvasInstruction.DRAW_CHARS,\n            begin,\n            end,\n            baseline,\n            textState.overflow,\n            fillKey,\n            textState.maxAngle,\n            pixelRatio,\n            offsetY,\n            strokeKey,\n            strokeWidth * pixelRatio,\n            text,\n            textKey,\n            1,\n        ]);\n        this.hitDetectionInstructions.push([\n            CanvasInstruction.DRAW_CHARS,\n            begin,\n            end,\n            baseline,\n            textState.overflow,\n            fillKey,\n            textState.maxAngle,\n            1,\n            offsetY,\n            strokeKey,\n            strokeWidth,\n            text,\n            textKey,\n            1 / pixelRatio,\n        ]);\n    };\n    /**\n     * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n     * @param {Object} [opt_sharedData] Shared data.\n     */\n    CanvasTextBuilder.prototype.setTextStyle = function (textStyle, opt_sharedData) {\n        var textState, fillState, strokeState;\n        if (!textStyle) {\n            this.text_ = '';\n        }\n        else {\n            var textFillStyle = textStyle.getFill();\n            if (!textFillStyle) {\n                fillState = null;\n                this.textFillState_ = fillState;\n            }\n            else {\n                fillState = this.textFillState_;\n                if (!fillState) {\n                    fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\n                    this.textFillState_ = fillState;\n                }\n                fillState.fillStyle = asColorLike(textFillStyle.getColor() || defaultFillStyle);\n            }\n            var textStrokeStyle = textStyle.getStroke();\n            if (!textStrokeStyle) {\n                strokeState = null;\n                this.textStrokeState_ = strokeState;\n            }\n            else {\n                strokeState = this.textStrokeState_;\n                if (!strokeState) {\n                    strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\n                    this.textStrokeState_ = strokeState;\n                }\n                var lineDash = textStrokeStyle.getLineDash();\n                var lineDashOffset = textStrokeStyle.getLineDashOffset();\n                var lineWidth = textStrokeStyle.getWidth();\n                var miterLimit = textStrokeStyle.getMiterLimit();\n                strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n                strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n                strokeState.lineDashOffset =\n                    lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n                strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n                strokeState.lineWidth =\n                    lineWidth === undefined ? defaultLineWidth : lineWidth;\n                strokeState.miterLimit =\n                    miterLimit === undefined ? defaultMiterLimit : miterLimit;\n                strokeState.strokeStyle = asColorLike(textStrokeStyle.getColor() || defaultStrokeStyle);\n            }\n            textState = this.textState_;\n            var font = textStyle.getFont() || defaultFont;\n            registerFont(font);\n            var textScale = textStyle.getScaleArray();\n            textState.overflow = textStyle.getOverflow();\n            textState.font = font;\n            textState.maxAngle = textStyle.getMaxAngle();\n            textState.placement = textStyle.getPlacement();\n            textState.textAlign = textStyle.getTextAlign();\n            textState.textBaseline =\n                textStyle.getTextBaseline() || defaultTextBaseline;\n            textState.backgroundFill = textStyle.getBackgroundFill();\n            textState.backgroundStroke = textStyle.getBackgroundStroke();\n            textState.padding = textStyle.getPadding() || defaultPadding;\n            textState.scale = textScale === undefined ? [1, 1] : textScale;\n            var textOffsetX = textStyle.getOffsetX();\n            var textOffsetY = textStyle.getOffsetY();\n            var textRotateWithView = textStyle.getRotateWithView();\n            var textRotation = textStyle.getRotation();\n            this.text_ = textStyle.getText() || '';\n            this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n            this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n            this.textRotateWithView_ =\n                textRotateWithView === undefined ? false : textRotateWithView;\n            this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n            this.strokeKey_ = strokeState\n                ? (typeof strokeState.strokeStyle == 'string'\n                    ? strokeState.strokeStyle\n                    : getUid(strokeState.strokeStyle)) +\n                    strokeState.lineCap +\n                    strokeState.lineDashOffset +\n                    '|' +\n                    strokeState.lineWidth +\n                    strokeState.lineJoin +\n                    strokeState.miterLimit +\n                    '[' +\n                    strokeState.lineDash.join() +\n                    ']'\n                : '';\n            this.textKey_ =\n                textState.font +\n                    textState.scale +\n                    (textState.textAlign || '?') +\n                    (textState.textBaseline || '?');\n            this.fillKey_ = fillState\n                ? typeof fillState.fillStyle == 'string'\n                    ? fillState.fillStyle\n                    : '|' + getUid(fillState.fillStyle)\n                : '';\n        }\n        this.declutterImageWithText_ = opt_sharedData;\n    };\n    return CanvasTextBuilder;\n}(CanvasBuilder));\nexport default CanvasTextBuilder;\n//# sourceMappingURL=TextBuilder.js.map"]},"metadata":{},"sourceType":"module"}