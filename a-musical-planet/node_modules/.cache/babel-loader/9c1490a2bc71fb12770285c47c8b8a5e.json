{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/Play.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport MapPage from \"./MapPage\";\nimport GuessPopup from \"./GuessPopup\";\nimport CountryGuessInfo from \"./CountryGuessInfo.js\";\nimport \"./Play.css\";\nimport haversine from \"haversine-distance\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\n\nconst countries = require(\"./countriesInfo.json\");\n\nconst Play = props => {\n  _s();\n\n  const [currTrack, setCurrTrack] = useState({\n    round: 0\n  });\n  const [redirect, setRedirect] = useState(\"\");\n  const [currChosen, setCurrChosen] = useState(\"\"); //first value is a bool on whether to show popup,\n  //second is the score to show\n\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0\n  });\n  const audioRef = useRef(null);\n\n  const newGame = () => {\n    nextTrack();\n  };\n\n  const nextTrack = () => {\n    setPopup({ ...popup,\n      show: false,\n      roundScore: 0\n    });\n    setCurrChosen(\"\");\n\n    if (props.accessToken === null || props.accessToken === \"\") {\n      setRedirect(\"login\");\n      return;\n    }\n\n    let currPlaylistIndex = Math.floor(Math.random() * Playlists.length);\n\n    if (Playlists[currPlaylistIndex].country === currTrack.country) {\n      if (currPlaylistIndex > 0) currPlaylistIndex--;else currPlaylistIndex++;\n    }\n\n    fetch(`https://api.spotify.com/v1/playlists/${Playlists[currPlaylistIndex].playlistId}`, {\n      headers: {\n        Authorization: \"Bearer \" + props.accessToken\n      }\n    }).then(response => {\n      if (response.status > 400) throw \"INVALID_ACCESS_TOKEN\";\n      return response.json();\n    }).then(data => {\n      let track = \"\";\n      let trackIndex = 0;\n\n      while (track === \"\") {\n        trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n        track = data.tracks.items[trackIndex].track;\n      }\n\n      console.log(track);\n      setCurrTrack({\n        url: track.preview_url,\n        artist: data.tracks.items[trackIndex].track.artists[0].name,\n        album: data.tracks.items[trackIndex].track.album.name,\n        image: data.tracks.items[trackIndex].track.album.images[0].url,\n        country: data.name,\n        name: data.tracks.items[trackIndex].track.name,\n        round: currTrack.round < 5 ? currTrack.round + 1 : 1\n      });\n      audioRef.current.load();\n      audioRef.current.play();\n    }).catch(err => {\n      console.log(\"ERROR LOADING TRACK FROM COUNTRY\", Playlists[currPlaylistIndex].country);\n      console.log(err);\n      if (err === \"INVALID_ACCESS_TOKEN\") window.location.replace(\"http://localhost:8888/getNewToken\");else nextTrack();\n    });\n  };\n\n  const guessGiven = () => {\n    if (currChosen === currTrack.country) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore\n      });\n      return;\n    }\n\n    const chosenCountryCoords = countries.filter(function (country) {\n      return country.name === currChosen;\n    })[0].latlng;\n    const currTrackCountryCoords = countries.filter(function (country) {\n      return country.name === currTrack.country;\n    })[0].latlng;\n    let score = maxScore - Math.ceil(haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2);\n    if (score < 0) score = 0;\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score\n    }); // if (currTrack.country === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.country}!`);\n    // }\n    // getNewArtist();\n  };\n\n  useEffect(() => {\n    nextTrack();\n  }, []);\n\n  if (redirect === \"login\") {\n    setRedirect(\"\");\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\",\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          className: \"music\",\n          controls: true,\n          ref: audioRef,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            volume: \"2\",\n            allow: \"autoplay\",\n            src: currTrack.url,\n            type: \"audio/mpeg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CountryGuessInfo, {\n          currChosen: currChosen,\n          guessGiven: guessGiven\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-div\",\n        children: /*#__PURE__*/_jsxDEV(MapPage, {\n          currCountry: currTrack.country,\n          setCurrChosen: setCurrChosen,\n          currChosen: currChosen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), popup.show && /*#__PURE__*/_jsxDEV(GuessPopup, {\n        currTrack: currTrack,\n        currChosen: currChosen,\n        nextTrack: nextTrack,\n        roundScore: popup.roundScore,\n        sessionScore: popup.sessionScore,\n        newGame: newGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Play, \"o17WT0mXvK0zqWxu/O83CNXB6jg=\");\n\n_c = Play;\nexport default Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/Play.js"],"names":["React","useState","useEffect","useRef","Redirect","MapPage","GuessPopup","CountryGuessInfo","haversine","maxScore","Playlists","require","countries","Play","props","currTrack","setCurrTrack","round","redirect","setRedirect","currChosen","setCurrChosen","popup","setPopup","show","roundScore","sessionScore","audioRef","newGame","nextTrack","accessToken","currPlaylistIndex","Math","floor","random","length","country","fetch","playlistId","headers","Authorization","then","response","status","json","data","track","trackIndex","tracks","items","console","log","url","preview_url","artist","artists","name","album","image","images","current","load","play","catch","err","window","location","replace","guessGiven","chosenCountryCoords","filter","latlng","currTrackCountryCoords","score","ceil"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport MapPage from \"./MapPage\";\nimport GuessPopup from \"./GuessPopup\";\nimport CountryGuessInfo from \"./CountryGuessInfo.js\";\nimport \"./Play.css\";\nimport haversine from \"haversine-distance\";\n\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\nconst countries = require(\"./countriesInfo.json\");\n\nconst Play = (props) => {\n  const [currTrack, setCurrTrack] = useState({ round: 0 });\n  const [redirect, setRedirect] = useState(\"\");\n\n  const [currChosen, setCurrChosen] = useState(\"\");\n  //first value is a bool on whether to show popup,\n  //second is the score to show\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0,\n  });\n\n  const audioRef = useRef(null);\n\n  const newGame = () => {\n    nextTrack();\n  };\n\n  const nextTrack = () => {\n    setPopup({ ...popup, show: false, roundScore: 0 });\n    setCurrChosen(\"\");\n    if (props.accessToken === null || props.accessToken === \"\") {\n      setRedirect(\"login\");\n      return;\n    }\n\n    let currPlaylistIndex = Math.floor(Math.random() * Playlists.length);\n    if (Playlists[currPlaylistIndex].country === currTrack.country) {\n      if (currPlaylistIndex > 0) currPlaylistIndex--;\n      else currPlaylistIndex++;\n    }\n    fetch(\n      `https://api.spotify.com/v1/playlists/${Playlists[currPlaylistIndex].playlistId}`,\n      {\n        headers: { Authorization: \"Bearer \" + props.accessToken },\n      }\n    )\n      .then((response) => {\n        if (response.status > 400) throw \"INVALID_ACCESS_TOKEN\";\n        return response.json();\n      })\n      .then((data) => {\n        let track = \"\";\n        let trackIndex = 0;\n        while (track === \"\") {\n          trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n          track = data.tracks.items[trackIndex].track;\n        }\n        console.log(track);\n        setCurrTrack({\n          url: track.preview_url,\n          artist: data.tracks.items[trackIndex].track.artists[0].name,\n          album: data.tracks.items[trackIndex].track.album.name,\n          image: data.tracks.items[trackIndex].track.album.images[0].url,\n          country: data.name,\n          name: data.tracks.items[trackIndex].track.name,\n          round: currTrack.round < 5 ? currTrack.round + 1 : 1,\n        });\n        audioRef.current.load();\n        audioRef.current.play();\n      })\n      .catch((err) => {\n        console.log(\n          \"ERROR LOADING TRACK FROM COUNTRY\",\n          Playlists[currPlaylistIndex].country\n        );\n        console.log(err);\n        if (err === \"INVALID_ACCESS_TOKEN\")\n          window.location.replace(\"http://localhost:8888/getNewToken\");\n        else nextTrack();\n      });\n  };\n\n  const guessGiven = () => {\n    if (currChosen === currTrack.country) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore,\n      });\n      return;\n    }\n    const chosenCountryCoords = countries.filter(function (country) {\n      return country.name === currChosen;\n    })[0].latlng;\n\n    const currTrackCountryCoords = countries.filter(function (country) {\n      return country.name === currTrack.country;\n    })[0].latlng;\n\n    let score =\n      maxScore -\n      Math.ceil(\n        haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2\n      );\n\n    if (score < 0) score = 0;\n\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score,\n    });\n    // if (currTrack.country === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.country}!`);\n    // }\n    // getNewArtist();\n  };\n\n  useEffect(() => {\n    nextTrack();\n  }, []);\n\n  if (redirect === \"login\") {\n    setRedirect(\"\");\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <>\n      <div className=\"play-section\">\n        <div className=\"overlay\">\n          <audio className=\"music\" controls ref={audioRef}>\n            <source\n              volume=\"2\"\n              allow=\"autoplay\"\n              src={currTrack.url}\n              type=\"audio/mpeg\"\n            ></source>\n          </audio>\n          <CountryGuessInfo currChosen={currChosen} guessGiven={guessGiven} />\n        </div>\n        <div className=\"map-div\">\n          <MapPage\n            currCountry={currTrack.country}\n            setCurrChosen={setCurrChosen}\n            currChosen={currChosen}\n          />\n        </div>\n        {popup.show && (\n          <GuessPopup\n            currTrack={currTrack}\n            currChosen={currChosen}\n            nextTrack={nextTrack}\n            roundScore={popup.roundScore}\n            sessionScore={popup.sessionScore}\n            newGame={newGame}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}