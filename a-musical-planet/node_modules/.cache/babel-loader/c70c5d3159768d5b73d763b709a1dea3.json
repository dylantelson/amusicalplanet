{"ast":null,"code":"'use strict';\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n/**\n * Expose `ResponseBase`.\n */\n\n\nmodule.exports = ResponseBase;\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    obj[key] = ResponseBase.prototype[key];\n  }\n\n  return obj;\n}\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n  // content-type\n  var ct = header['content-type'] || '';\n  this.type = utils.type(ct); // params\n\n  var params = utils.params(ct);\n\n  for (var key in params) this[key] = params[key];\n\n  this.links = {}; // links\n\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch (err) {// ignore\n  }\n};\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  var type = status / 100 | 0; // status / class\n\n  this.status = this.statusCode = status;\n  this.statusType = type; // basics\n\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.redirect = 3 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = 4 == type || 5 == type ? this.toError() : false; // sugar\n\n  this.created = 201 == status;\n  this.accepted = 202 == status;\n  this.noContent = 204 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.forbidden = 403 == status;\n  this.notFound = 404 == status;\n  this.unprocessableEntity = 422 == status;\n};","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/node_modules/superagent/lib/response-base.js"],"names":["utils","require","module","exports","ResponseBase","obj","mixin","key","prototype","get","field","header","toLowerCase","_setHeaderProperties","ct","type","params","links","link","parseLinks","err","_setStatusProperties","status","statusCode","statusType","info","ok","redirect","clientError","serverError","error","toError","created","accepted","noContent","badRequest","unauthorized","notAcceptable","forbidden","notFound","unprocessableEntity"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,MAAIA,GAAJ,EAAS,OAAOC,KAAK,CAACD,GAAD,CAAZ;AACV;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,KAAT,CAAeD,GAAf,EAAoB;AAClB,OAAK,IAAIE,GAAT,IAAgBH,YAAY,CAACI,SAA7B,EAAwC;AACtCH,IAAAA,GAAG,CAACE,GAAD,CAAH,GAAWH,YAAY,CAACI,SAAb,CAAuBD,GAAvB,CAAX;AACD;;AACD,SAAOF,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAD,YAAY,CAACI,SAAb,CAAuBC,GAAvB,GAA6B,UAASC,KAAT,EAAgB;AAC3C,SAAO,KAAKC,MAAL,CAAYD,KAAK,CAACE,WAAN,EAAZ,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAR,YAAY,CAACI,SAAb,CAAuBK,oBAAvB,GAA8C,UAASF,MAAT,EAAgB;AAC1D;AACA;AAEA;AACA,MAAIG,EAAE,GAAGH,MAAM,CAAC,cAAD,CAAN,IAA0B,EAAnC;AACA,OAAKI,IAAL,GAAYf,KAAK,CAACe,IAAN,CAAWD,EAAX,CAAZ,CAN0D,CAQ1D;;AACA,MAAIE,MAAM,GAAGhB,KAAK,CAACgB,MAAN,CAAaF,EAAb,CAAb;;AACA,OAAK,IAAIP,GAAT,IAAgBS,MAAhB,EAAwB,KAAKT,GAAL,IAAYS,MAAM,CAACT,GAAD,CAAlB;;AAExB,OAAKU,KAAL,GAAa,EAAb,CAZ0D,CAc1D;;AACA,MAAI;AACA,QAAIN,MAAM,CAACO,IAAX,EAAiB;AACb,WAAKD,KAAL,GAAajB,KAAK,CAACmB,UAAN,CAAiBR,MAAM,CAACO,IAAxB,CAAb;AACH;AACJ,GAJD,CAIE,OAAOE,GAAP,EAAY,CACV;AACH;AACJ,CAtBD;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhB,YAAY,CAACI,SAAb,CAAuBa,oBAAvB,GAA8C,UAASC,MAAT,EAAgB;AAC1D,MAAIP,IAAI,GAAGO,MAAM,GAAG,GAAT,GAAe,CAA1B,CAD0D,CAG1D;;AACA,OAAKA,MAAL,GAAc,KAAKC,UAAL,GAAkBD,MAAhC;AACA,OAAKE,UAAL,GAAkBT,IAAlB,CAL0D,CAO1D;;AACA,OAAKU,IAAL,GAAY,KAAKV,IAAjB;AACA,OAAKW,EAAL,GAAU,KAAKX,IAAf;AACA,OAAKY,QAAL,GAAgB,KAAKZ,IAArB;AACA,OAAKa,WAAL,GAAmB,KAAKb,IAAxB;AACA,OAAKc,WAAL,GAAmB,KAAKd,IAAxB;AACA,OAAKe,KAAL,GAAc,KAAKf,IAAL,IAAa,KAAKA,IAAnB,GACP,KAAKgB,OAAL,EADO,GAEP,KAFN,CAb0D,CAiB1D;;AACA,OAAKC,OAAL,GAAe,OAAOV,MAAtB;AACA,OAAKW,QAAL,GAAgB,OAAOX,MAAvB;AACA,OAAKY,SAAL,GAAiB,OAAOZ,MAAxB;AACA,OAAKa,UAAL,GAAkB,OAAOb,MAAzB;AACA,OAAKc,YAAL,GAAoB,OAAOd,MAA3B;AACA,OAAKe,aAAL,GAAqB,OAAOf,MAA5B;AACA,OAAKgB,SAAL,GAAiB,OAAOhB,MAAxB;AACA,OAAKiB,QAAL,GAAgB,OAAOjB,MAAvB;AACA,OAAKkB,mBAAL,GAA2B,OAAOlB,MAAlC;AACH,CA3BD","sourcesContent":["'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    obj[key] = ResponseBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function(field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function(header){\n    // TODO: moar!\n    // TODO: make this a util\n\n    // content-type\n    var ct = header['content-type'] || '';\n    this.type = utils.type(ct);\n\n    // params\n    var params = utils.params(ct);\n    for (var key in params) this[key] = params[key];\n\n    this.links = {};\n\n    // links\n    try {\n        if (header.link) {\n            this.links = utils.parseLinks(header.link);\n        }\n    } catch (err) {\n        // ignore\n    }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function(status){\n    var type = status / 100 | 0;\n\n    // status / class\n    this.status = this.statusCode = status;\n    this.statusType = type;\n\n    // basics\n    this.info = 1 == type;\n    this.ok = 2 == type;\n    this.redirect = 3 == type;\n    this.clientError = 4 == type;\n    this.serverError = 5 == type;\n    this.error = (4 == type || 5 == type)\n        ? this.toError()\n        : false;\n\n    // sugar\n    this.created = 201 == status;\n    this.accepted = 202 == status;\n    this.noContent = 204 == status;\n    this.badRequest = 400 == status;\n    this.unauthorized = 401 == status;\n    this.notAcceptable = 406 == status;\n    this.forbidden = 403 == status;\n    this.notFound = 404 == status;\n    this.unprocessableEntity = 422 == status;\n};\n"]},"metadata":{},"sourceType":"script"}