{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState, useEffect } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\nimport Playlists from \"./Playlists\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst worldCountries = require(\"./WorldInfo.json\"); // const europeCountries = require(\"./EuropeInfo.json\");\n\n\nconst worldGeoSVG = require(\"./WorldSVG50m.json\"); // const europeGeoSVG = require(\"./EuropeInfo.json\");\n// const locationInfo = {\n//   world: worldCountries,\n//   // europe: europeCountries,\n// };\n// const locationGeoSVG = {\n//   world: worldGeoSVG,\n// };\n\n\nconst borderWidth = 0.2;\nconst colors = {\n  asia: \"#E5B961\",\n  europe: \"#D4A29C\",\n  africa: \"#EDCC8B\",\n  southAmerica: \"#E8B298\",\n  northAmerica: \"#C7877F\",\n  oceania: \"#7FC6A4\",\n  water: \"#BDD1C5\",\n  russia: \"#DDAE7F\",\n  Selected: \"#FFAAFA\"\n};\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n  var r = (num >> 16) + amt;\n  if (r > 255) r = 255;else if (r < 0) r = 0;\n  var b = (num >> 8 & 0x00ff) + amt;\n  if (b > 255) b = 255;else if (b < 0) b = 0;\n  var g = (num & 0x0000ff) + amt;\n  if (g > 255) g = 255;else if (g < 0) g = 0;\n  return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n}\n\n_c = LightenDarkenColor;\n\nconst checkDifficulty = (mapDifficulty, countryDifficulty) => {\n  console.log(mapDifficulty);\n  if (mapDifficulty === \"Easy\") return countryDifficulty === \"Easy\";\n  if (mapDifficulty === \"Medium\") return countryDifficulty === \"Easy\" || countryDifficulty === \"Medium\"; //for some reason this necessary, otherwise it returns true even if mapDifficulty is Easy\n\n  if (mapDifficulty === \"Hard\") return true;\n  return false;\n};\n\nlet countriesToShow = [];\nlet currSelectedCountry = null;\n\nconst MapChart = ({\n  handleNewChosen,\n  currChosen,\n  mapProps,\n  currMap,\n  myCurrPos\n}) => {\n  _s();\n\n  useEffect(() => {\n    countriesToShow = [];\n    let currSelectedCountry = null;\n\n    if (currMap.slice(0, 5) === \"world\") {\n      for (const playlist of Playlists.world) {\n        if (checkDifficulty(currMap.slice(5), playlist.difficulty)) countriesToShow.push(playlist.country);\n      }\n    } else {\n      for (const playlist of Playlists[currMap]) {\n        countriesToShow.push(playlist.country);\n      }\n    }\n\n    console.log(countriesToShow);\n  }, [currMap]);\n\n  const setPressedStyle = (country, event) => {\n    if (currSelectedCountry) {\n      console.log(\"Setting old\", currSelectedCountry.id, \"to color \", colors[country.CONTINENT]);\n      document.querySelector(`#${currSelectedCountry.id}`).style.fill = fill = \"#fff\";\n    }\n\n    currSelectedCountry = event.target;\n    console.log(\"Setting\", event.target.id, \"to style \", event.target.style);\n    event.preventDefault();\n    event.target.style.fill = \"#fff\";\n  }; // const renderStyle = (country) => {\n  //   if (!country.area || country.area < 1500) return [{ fontSize: \"0px\" }, 0];\n  //   let adjustedFont =\n  //     country.area > 500000\n  //       ? country.area / 800000 + 4.5\n  //       : country.area / 800000 + 2.3;\n  //   if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n  //   if (country.name.common === \"Russia\" && currMap === \"europe\")\n  //     adjustedFont /= 2.5;\n  //   //const rightOffset = adjustedFont;\n  //   return [\n  //     {\n  //       fontSize: `${adjustedFont}px`,\n  //       // stroke: \"#FFF\",\n  //       // stroke: colors[country.CONTINENT],\n  //       // strokeWidth: `${adjustedFont / 50}px`,\n  //     },\n  //     adjustedFont - 1,\n  //   ];\n  // };\n\n\n  const renderStyle = area => {\n    if (area > 5000000) return {\n      fontSize: \"20px\"\n    };\n    if (area > 2500000) return {\n      fontSize: \"12px\"\n    };\n    if (area > 1000000) return {\n      fontSize: \"9px\"\n    };\n    if (area > 500000) return {\n      fontSize: \"7px\"\n    };\n    if (area > 250000) return {\n      fontSize: \"5px\"\n    };\n    if (area > 100000) return {\n      fontSize: \"3px\"\n    };\n    return {\n      fontSize: \"1px\"\n    };\n  };\n\n  const hoveredStyle = color => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\"\n    };\n  };\n\n  const selectedStyle = color => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\"\n    };\n  }; // const [currPos, setCurrPos] = useState({\n  //   zoom: mapProps.minZoom,\n  //   coordinates: mapProps.coordinates,\n  // });\n\n\n  const projection = geoMercator().scale(mapProps.scale).center(mapProps.center).rotate(mapProps.rotate); //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [currLocation]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      \"data-tip\": \"\",\n      projection: projection,\n      style: {\n        width: \"100%\",\n        height: \"auto\",\n        outline: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        translateExtent: mapProps.translateExtent,\n        onMoveEnd: ({\n          zoom,\n          coordinates\n        }) => {\n          myCurrPos = {\n            zoom: zoom,\n            coordinates: coordinates\n          }; // setCurrPos({\n          //   zoom: zoom,\n          //   coordinates: coordinates,\n          // });\n        },\n        minZoom: mapProps.minZoom,\n        maxZoom: mapProps.maxZoom,\n        zoom: myCurrPos.zoom,\n        center: myCurrPos.coordinates,\n        children: [/*#__PURE__*/_jsxDEV(Geographies, {\n          geography: worldGeoSVG,\n          children: ({\n            geographies\n          }) => geographies.map(geo => {\n            return /*#__PURE__*/_jsxDEV(Geography, {\n              id: geo.properties.NAME.replace(\" \", \"\"),\n              geography: geo,\n              onClick: event => {\n                setPressedStyle(geo.properties, event); // handleNewChosen(geo.properties.NAME, myCurrPos);\n              },\n              visibility: geo.properties.CONTINENT === \"Antarctica\" ? \"hidden\" : \"visible\",\n              style: {\n                default: currChosen === geo.properties.NAME ? selectedStyle(colors[geo.properties.CONTINENT]) : countriesToShow.indexOf(geo.properties.NAME) >= 0 ? {\n                  fill: colors[geo.properties.CONTINENT],\n                  pointerEvents: \"all\",\n                  stroke: \"#000000\",\n                  strokeWidth: borderWidth,\n                  outline: \"none\"\n                } : {\n                  fill: \"#ccc\",\n                  pointerEvents: \"none\",\n                  stroke: \"#000000\",\n                  strokeWidth: borderWidth,\n                  outline: \"none\"\n                },\n                hover: currChosen === geo.properties.NAME ? selectedStyle(colors[geo.properties.CONTINENT]) : hoveredStyle(colors[geo.properties.CONTINENT]) // pressed: {\n                //   fill: \"#fff\",\n                //   pointerEvents: \"all\",\n                //   stroke: \"#000000\",\n                //   strokeWidth: borderWidth,\n                //   outline: \"none\",\n                // },\n\n              }\n            }, geo.rsmKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), worldCountries.map(country => {\n          if (countriesToShow.indexOf(country.name.common) < 0) return null; // const currStyle = renderStyle(country);\n\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            coordinates: country.name.common === \"Russia\" && currMap === \"europe\" ? [country.latlng[1] - 60, country.latlng[0] - 6] : [country.latlng[1], country.latlng[0]],\n            fill: \"#000\",\n            children: /*#__PURE__*/_jsxDEV(\"text\", {\n              textAnchor: \"middle\",\n              pointerEvents: \"none\",\n              style: renderStyle(country.area),\n              children: country.name.common\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 17\n            }, this)\n          }, country.name.common, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MapChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = MapChart;\nexport default _c3 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LightenDarkenColor\");\n$RefreshReg$(_c2, \"MapChart\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js"],"names":["React","memo","useState","useEffect","ZoomableGroup","ComposableMap","Geographies","Geography","Marker","geoMercator","Playlists","worldCountries","require","worldGeoSVG","borderWidth","colors","asia","europe","africa","southAmerica","northAmerica","oceania","water","russia","Selected","LightenDarkenColor","col","amt","usePound","slice","num","parseInt","r","b","g","toString","checkDifficulty","mapDifficulty","countryDifficulty","console","log","countriesToShow","currSelectedCountry","MapChart","handleNewChosen","currChosen","mapProps","currMap","myCurrPos","playlist","world","difficulty","push","country","setPressedStyle","event","id","CONTINENT","document","querySelector","style","fill","target","preventDefault","renderStyle","area","fontSize","hoveredStyle","color","stroke","strokeWidth","outline","selectedStyle","projection","scale","center","rotate","width","height","translateExtent","zoom","coordinates","minZoom","maxZoom","geographies","map","geo","properties","NAME","replace","default","indexOf","pointerEvents","hover","rsmKey","name","common","latlng"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\n\nimport Playlists from \"./Playlists\";\nimport \"./Map.css\";\n\nconst worldCountries = require(\"./WorldInfo.json\");\n// const europeCountries = require(\"./EuropeInfo.json\");\n\nconst worldGeoSVG = require(\"./WorldSVG50m.json\");\n// const europeGeoSVG = require(\"./EuropeInfo.json\");\n\n// const locationInfo = {\n//   world: worldCountries,\n//   // europe: europeCountries,\n// };\n\n// const locationGeoSVG = {\n//   world: worldGeoSVG,\n// };\n\nconst borderWidth = 0.2;\n\nconst colors = {\n  asia: \"#E5B961\",\n  europe: \"#D4A29C\",\n  africa: \"#EDCC8B\",\n  southAmerica: \"#E8B298\",\n  northAmerica: \"#C7877F\",\n  oceania: \"#7FC6A4\",\n  water: \"#BDD1C5\",\n  russia: \"#DDAE7F\",\n  Selected: \"#FFAAFA\",\n};\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nconst checkDifficulty = (mapDifficulty, countryDifficulty) => {\n  console.log(mapDifficulty);\n  if (mapDifficulty === \"Easy\") return countryDifficulty === \"Easy\";\n  if (mapDifficulty === \"Medium\")\n    return countryDifficulty === \"Easy\" || countryDifficulty === \"Medium\";\n  //for some reason this necessary, otherwise it returns true even if mapDifficulty is Easy\n  if (mapDifficulty === \"Hard\") return true;\n  return false;\n};\n\nlet countriesToShow = [];\nlet currSelectedCountry = null;\nconst MapChart = ({\n  handleNewChosen,\n  currChosen,\n  mapProps,\n  currMap,\n  myCurrPos,\n}) => {\n  useEffect(() => {\n    countriesToShow = [];\n    let currSelectedCountry = null;\n    if (currMap.slice(0, 5) === \"world\") {\n      for (const playlist of Playlists.world) {\n        if (checkDifficulty(currMap.slice(5), playlist.difficulty))\n          countriesToShow.push(playlist.country);\n      }\n    } else {\n      for (const playlist of Playlists[currMap]) {\n        countriesToShow.push(playlist.country);\n      }\n    }\n    console.log(countriesToShow);\n  }, [currMap]);\n\n  const setPressedStyle = (country, event) => {\n    if (currSelectedCountry) {\n      console.log(\n        \"Setting old\",\n        currSelectedCountry.id,\n        \"to color \",\n        colors[country.CONTINENT]\n      );\n      document.querySelector(`#${currSelectedCountry.id}`).style.fill = fill =\n        \"#fff\";\n    }\n    currSelectedCountry = event.target;\n    console.log(\"Setting\", event.target.id, \"to style \", event.target.style);\n    event.preventDefault();\n    event.target.style.fill = \"#fff\";\n  };\n  // const renderStyle = (country) => {\n  //   if (!country.area || country.area < 1500) return [{ fontSize: \"0px\" }, 0];\n  //   let adjustedFont =\n  //     country.area > 500000\n  //       ? country.area / 800000 + 4.5\n  //       : country.area / 800000 + 2.3;\n  //   if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n\n  //   if (country.name.common === \"Russia\" && currMap === \"europe\")\n  //     adjustedFont /= 2.5;\n  //   //const rightOffset = adjustedFont;\n  //   return [\n  //     {\n  //       fontSize: `${adjustedFont}px`,\n  //       // stroke: \"#FFF\",\n  //       // stroke: colors[country.CONTINENT],\n  //       // strokeWidth: `${adjustedFont / 50}px`,\n  //     },\n  //     adjustedFont - 1,\n  //   ];\n  // };\n\n  const renderStyle = (area) => {\n    if (area > 5000000) return { fontSize: \"20px\" };\n    if (area > 2500000) return { fontSize: \"12px\" };\n    if (area > 1000000) return { fontSize: \"9px\" };\n    if (area > 500000) return { fontSize: \"7px\" };\n    if (area > 250000) return { fontSize: \"5px\" };\n    if (area > 100000) return { fontSize: \"3px\" };\n    return { fontSize: \"1px\" };\n  };\n\n  const hoveredStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n  const selectedStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n\n  // const [currPos, setCurrPos] = useState({\n  //   zoom: mapProps.minZoom,\n  //   coordinates: mapProps.coordinates,\n  // });\n  const projection = geoMercator()\n    .scale(mapProps.scale)\n    .center(mapProps.center)\n    .rotate(mapProps.rotate);\n\n  //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [currLocation]);\n\n  return (\n    <>\n      <ComposableMap\n        data-tip=\"\"\n        projection={projection}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n          outline: \"none\",\n        }}\n      >\n        <ZoomableGroup\n          translateExtent={mapProps.translateExtent}\n          onMoveEnd={({ zoom, coordinates }) => {\n            myCurrPos = { zoom: zoom, coordinates: coordinates };\n            // setCurrPos({\n            //   zoom: zoom,\n            //   coordinates: coordinates,\n            // });\n          }}\n          minZoom={mapProps.minZoom}\n          maxZoom={mapProps.maxZoom}\n          zoom={myCurrPos.zoom}\n          center={myCurrPos.coordinates}\n        >\n          <Geographies geography={worldGeoSVG}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                return (\n                  <Geography\n                    id={geo.properties.NAME.replace(\" \", \"\")}\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onClick={(event) => {\n                      setPressedStyle(geo.properties, event);\n                      // handleNewChosen(geo.properties.NAME, myCurrPos);\n                    }}\n                    visibility={\n                      geo.properties.CONTINENT === \"Antarctica\"\n                        ? \"hidden\"\n                        : \"visible\"\n                    }\n                    style={{\n                      default:\n                        currChosen === geo.properties.NAME\n                          ? selectedStyle(colors[geo.properties.CONTINENT])\n                          : countriesToShow.indexOf(geo.properties.NAME) >= 0\n                          ? {\n                              fill: colors[geo.properties.CONTINENT],\n                              pointerEvents: \"all\",\n                              stroke: \"#000000\",\n                              strokeWidth: borderWidth,\n                              outline: \"none\",\n                            }\n                          : {\n                              fill: \"#ccc\",\n                              pointerEvents: \"none\",\n                              stroke: \"#000000\",\n                              strokeWidth: borderWidth,\n                              outline: \"none\",\n                            },\n                      hover:\n                        currChosen === geo.properties.NAME\n                          ? selectedStyle(colors[geo.properties.CONTINENT])\n                          : hoveredStyle(colors[geo.properties.CONTINENT]),\n                      // pressed: {\n                      //   fill: \"#fff\",\n                      //   pointerEvents: \"all\",\n                      //   stroke: \"#000000\",\n                      //   strokeWidth: borderWidth,\n                      //   outline: \"none\",\n                      // },\n                    }}\n                  />\n                );\n              })\n            }\n          </Geographies>\n          {worldCountries.map((country) => {\n            if (countriesToShow.indexOf(country.name.common) < 0) return null;\n            // const currStyle = renderStyle(country);\n            return (\n              <Marker\n                key={country.name.common}\n                coordinates={\n                  country.name.common === \"Russia\" && currMap === \"europe\"\n                    ? [country.latlng[1] - 60, country.latlng[0] - 6]\n                    : [country.latlng[1], country.latlng[0]]\n                }\n                fill=\"#000\"\n              >\n                <text\n                  textAnchor=\"middle\"\n                  pointerEvents=\"none\"\n                  style={renderStyle(country.area)}\n                >\n                  {country.name.common}\n                </text>\n                {/* {currPos.zoom * 2 + currStyle[1] > 9 ? (\n                  currStyle[1] > country.name.common.length ? (\n                    <text\n                      textAnchor=\"middle\"\n                      pointerEvents=\"none\"\n                      style={currStyle[0]}\n                    >\n                      {country.name.common}\n                    </text>\n                  ) : (\n                    country.name.common.split(\" \").map((word, index) => {\n                      return (\n                        <text\n                          key={word + index}\n                          textRendering=\"optimizeSpeed\"\n                          textAnchor=\"middle\"\n                          pointerEvents=\"none\"\n                          y={(currStyle[1] / 1.3 + 1.3) * index}\n                          style={currStyle[0]}\n                        >\n                          {word}\n                        </text>\n                      );\n                    })\n                  )\n                ) : (\n                  <></>\n                )} */}\n              </Marker>\n            );\n          })}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}