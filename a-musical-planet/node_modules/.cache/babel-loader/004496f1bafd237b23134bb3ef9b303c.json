{"ast":null,"code":"'use strict';\n\nvar superagent = require('superagent'),\n    WebApiError = require('./webapi-error');\n\nvar HttpManager = {};\n/* Create superagent options from the base request */\n\nvar _getParametersFromRequest = function (request) {\n  var options = {};\n\n  if (request.getQueryParameters()) {\n    options.query = request.getQueryParameters();\n  }\n\n  if (request.getHeaders() && request.getHeaders()['Content-Type'] === 'application/json') {\n    options.data = JSON.stringify(request.getBodyParameters());\n  } else if (request.getBodyParameters()) {\n    options.data = request.getBodyParameters();\n  }\n\n  if (request.getHeaders()) {\n    options.headers = request.getHeaders();\n  }\n\n  return options;\n};\n/* Create an error object from an error returned from the Web API */\n\n\nvar _getErrorObject = function (defaultMessage, err) {\n  var errorObject;\n\n  if (typeof err.error === 'object' && typeof err.error.message === 'string') {\n    // Web API Error format\n    errorObject = new WebApiError(err.error.message, err.error.status);\n  } else if (typeof err.error === 'string') {\n    // Authorization Error format\n\n    /* jshint ignore:start */\n    errorObject = new WebApiError(err.error + ': ' + err['error_description']);\n    /* jshint ignore:end */\n  } else if (typeof err === 'string') {\n    // Serialized JSON error\n    try {\n      var parsedError = JSON.parse(err);\n      errorObject = new WebApiError(parsedError.error.message, parsedError.error.status);\n    } catch (err) {// Error not JSON formatted\n    }\n  }\n\n  if (!errorObject) {\n    // Unexpected format\n    errorObject = new WebApiError(defaultMessage + ': ' + JSON.stringify(err));\n  }\n\n  return errorObject;\n};\n/* Make the request to the Web API */\n\n\nHttpManager._makeRequest = function (method, options, uri, callback) {\n  var req = method.bind(superagent)(uri);\n\n  if (options.query) {\n    req.query(options.query);\n  }\n\n  if (options.data && (!options.headers || options.headers['Content-Type'] !== 'application/json')) {\n    req.type('form');\n    req.send(options.data);\n  } else if (options.data) {\n    req.send(options.data);\n  }\n\n  if (options.headers) {\n    req.set(options.headers);\n  }\n\n  req.end(function (err, response) {\n    if (err) {\n      var errorObject = _getErrorObject('Request error', {\n        error: err\n      });\n\n      return callback(errorObject);\n    }\n\n    return callback(null, {\n      body: response.body,\n      headers: response.headers,\n      statusCode: response.statusCode\n    });\n  });\n};\n/**\n * Make a HTTP GET request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\n\n\nHttpManager.get = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n\n  var method = superagent.get;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP POST request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\n\n\nHttpManager.post = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n\n  var method = superagent.post;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP DELETE request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\n\n\nHttpManager.del = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n\n  var method = superagent.del;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP PUT request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\n\n\nHttpManager.put = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n\n  var method = superagent.put;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\nmodule.exports = HttpManager;","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/node_modules/spotify-web-api-node/src/http-manager.js"],"names":["superagent","require","WebApiError","HttpManager","_getParametersFromRequest","request","options","getQueryParameters","query","getHeaders","data","JSON","stringify","getBodyParameters","headers","_getErrorObject","defaultMessage","err","errorObject","error","message","status","parsedError","parse","_makeRequest","method","uri","callback","req","bind","type","send","set","end","response","body","statusCode","get","getURI","post","del","put","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar superagent = require('superagent'),\n  WebApiError = require('./webapi-error');\n\nvar HttpManager = {};\n\n/* Create superagent options from the base request */\nvar _getParametersFromRequest = function(request) {\n  var options = {};\n\n  if (request.getQueryParameters()) {\n    options.query = request.getQueryParameters();\n  }\n\n  if (\n    request.getHeaders() &&\n    request.getHeaders()['Content-Type'] === 'application/json'\n  ) {\n    options.data = JSON.stringify(request.getBodyParameters());\n  } else if (request.getBodyParameters()) {\n    options.data = request.getBodyParameters();\n  }\n\n  if (request.getHeaders()) {\n    options.headers = request.getHeaders();\n  }\n  return options;\n};\n\n/* Create an error object from an error returned from the Web API */\nvar _getErrorObject = function(defaultMessage, err) {\n  var errorObject;\n  if (typeof err.error === 'object' && typeof err.error.message === 'string') {\n    // Web API Error format\n    errorObject = new WebApiError(err.error.message, err.error.status);\n  } else if (typeof err.error === 'string') {\n    // Authorization Error format\n    /* jshint ignore:start */\n    errorObject = new WebApiError(err.error + ': ' + err['error_description']);\n    /* jshint ignore:end */\n  } else if (typeof err === 'string') {\n    // Serialized JSON error\n    try {\n      var parsedError = JSON.parse(err);\n      errorObject = new WebApiError(\n        parsedError.error.message,\n        parsedError.error.status\n      );\n    } catch (err) {\n      // Error not JSON formatted\n    }\n  }\n\n  if (!errorObject) {\n    // Unexpected format\n    errorObject = new WebApiError(defaultMessage + ': ' + JSON.stringify(err));\n  }\n\n  return errorObject;\n};\n\n/* Make the request to the Web API */\nHttpManager._makeRequest = function(method, options, uri, callback) {\n  var req = method.bind(superagent)(uri);\n\n  if (options.query) {\n    req.query(options.query);\n  }\n\n  if (\n    options.data &&\n    (!options.headers || options.headers['Content-Type'] !== 'application/json')\n  ) {\n    req.type('form');\n    req.send(options.data);\n  } else if (options.data) {\n    req.send(options.data);\n  }\n\n  if (options.headers) {\n    req.set(options.headers);\n  }\n\n  req.end(function(err, response) {\n    if (err) {\n      var errorObject = _getErrorObject('Request error', {\n        error: err\n      });\n      return callback(errorObject);\n    }\n\n    return callback(null, {\n      body: response.body,\n      headers: response.headers,\n      statusCode: response.statusCode\n    });\n  });\n};\n\n/**\n * Make a HTTP GET request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.get = function(request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.get;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP POST request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.post = function(request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.post;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP DELETE request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.del = function(request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.del;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP PUT request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.put = function(request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.put;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\nmodule.exports = HttpManager;\n"]},"metadata":{},"sourceType":"script"}