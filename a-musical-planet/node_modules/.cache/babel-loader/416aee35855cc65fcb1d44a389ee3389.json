{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Object\n */\n\n\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport { assign, isEmpty } from './obj.js';\nimport { getUid } from './util.js';\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\n\nvar ObjectEvent = function (_super) {\n  __extends(ObjectEvent, _super);\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n\n\n  function ObjectEvent(type, key, oldValue) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n\n\n    _this.key = key;\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n\n    _this.oldValue = oldValue;\n    return _this;\n  }\n\n  return ObjectEvent;\n}(Event);\n\nexport { ObjectEvent };\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\n\nvar BaseObject = function (_super) {\n  __extends(BaseObject, _super);\n  /**\n   * @param {Object<string, *>} [opt_values] An object with key-value pairs.\n   */\n\n\n  function BaseObject(opt_values) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {ObjectOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {ObjectOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n\n    _this.once;\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n\n    _this.un; // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n\n    getUid(_this);\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n\n    _this.values_ = null;\n\n    if (opt_values !== undefined) {\n      _this.setProperties(opt_values);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n\n\n  BaseObject.prototype.get = function (key) {\n    var value;\n\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n\n    return value;\n  };\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n\n\n  BaseObject.prototype.getKeys = function () {\n    return this.values_ && Object.keys(this.values_) || [];\n  };\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n\n\n  BaseObject.prototype.getProperties = function () {\n    return this.values_ && assign({}, this.values_) || {};\n  };\n  /**\n   * @return {boolean} The object has properties.\n   */\n\n\n  BaseObject.prototype.hasProperties = function () {\n    return !!this.values_;\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n\n\n  BaseObject.prototype.notify = function (key, oldValue) {\n    var eventType;\n    eventType = \"change:\" + key;\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n\n\n  BaseObject.prototype.addChangeListener = function (key, listener) {\n    this.addEventListener(\"change:\" + key, listener);\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n\n\n  BaseObject.prototype.removeChangeListener = function (key, listener) {\n    this.removeEventListener(\"change:\" + key, listener);\n  };\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.set = function (key, value, opt_silent) {\n    var values = this.values_ || (this.values_ = {});\n\n    if (opt_silent) {\n      values[key] = value;\n    } else {\n      var oldValue = values[key];\n      values[key] = value;\n\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.setProperties = function (values, opt_silent) {\n    for (var key in values) {\n      this.set(key, values[key], opt_silent);\n    }\n  };\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n\n\n  BaseObject.prototype.applyProperties = function (source) {\n    if (!source.values_) {\n      return;\n    }\n\n    assign(this.values_ || (this.values_ = {}), source.values_);\n  };\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [opt_silent] Unset without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.unset = function (key, opt_silent) {\n    if (this.values_ && key in this.values_) {\n      var oldValue = this.values_[key];\n      delete this.values_[key];\n\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n\n  return BaseObject;\n}(Observable);\n\nexport default BaseObject;","map":{"version":3,"sources":["src/Object.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport { assign, isEmpty } from './obj.js';\nimport { getUid } from './util.js';\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nvar ObjectEvent = /** @class */ (function (_super) {\n    __extends(ObjectEvent, _super);\n    /**\n     * @param {string} type The event type.\n     * @param {string} key The property name.\n     * @param {*} oldValue The old value for `key`.\n     */\n    function ObjectEvent(type, key, oldValue) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The name of the property whose value is changing.\n         * @type {string}\n         * @api\n         */\n        _this.key = key;\n        /**\n         * The old value. To get the new value use `e.target.get(e.key)` where\n         * `e` is the event object.\n         * @type {*}\n         * @api\n         */\n        _this.oldValue = oldValue;\n        return _this;\n    }\n    return ObjectEvent;\n}(Event));\nexport { ObjectEvent };\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nvar BaseObject = /** @class */ (function (_super) {\n    __extends(BaseObject, _super);\n    /**\n     * @param {Object<string, *>} [opt_values] An object with key-value pairs.\n     */\n    function BaseObject(opt_values) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {ObjectOnSignature<import(\"./Observable.js\").OnReturn>}\n         */\n        _this.on;\n        /***\n         * @type {ObjectOnSignature<import(\"./Observable.js\").OnReturn>}\n         */\n        _this.once;\n        /***\n         * @type {ObjectOnSignature<void>}\n         */\n        _this.un;\n        // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n        // the same as the order in which they were created.  This also helps to\n        // ensure that object properties are always added in the same order, which\n        // helps many JavaScript engines generate faster code.\n        getUid(_this);\n        /**\n         * @private\n         * @type {Object<string, *>}\n         */\n        _this.values_ = null;\n        if (opt_values !== undefined) {\n            _this.setProperties(opt_values);\n        }\n        return _this;\n    }\n    /**\n     * Gets a value.\n     * @param {string} key Key name.\n     * @return {*} Value.\n     * @api\n     */\n    BaseObject.prototype.get = function (key) {\n        var value;\n        if (this.values_ && this.values_.hasOwnProperty(key)) {\n            value = this.values_[key];\n        }\n        return value;\n    };\n    /**\n     * Get a list of object property names.\n     * @return {Array<string>} List of property names.\n     * @api\n     */\n    BaseObject.prototype.getKeys = function () {\n        return (this.values_ && Object.keys(this.values_)) || [];\n    };\n    /**\n     * Get an object of all property names and values.\n     * @return {Object<string, *>} Object.\n     * @api\n     */\n    BaseObject.prototype.getProperties = function () {\n        return (this.values_ && assign({}, this.values_)) || {};\n    };\n    /**\n     * @return {boolean} The object has properties.\n     */\n    BaseObject.prototype.hasProperties = function () {\n        return !!this.values_;\n    };\n    /**\n     * @param {string} key Key name.\n     * @param {*} oldValue Old value.\n     */\n    BaseObject.prototype.notify = function (key, oldValue) {\n        var eventType;\n        eventType = \"change:\" + key;\n        this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n        eventType = ObjectEventType.PROPERTYCHANGE;\n        this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    };\n    /**\n     * @param {string} key Key name.\n     * @param {import(\"./events.js\").Listener} listener Listener.\n     */\n    BaseObject.prototype.addChangeListener = function (key, listener) {\n        this.addEventListener(\"change:\" + key, listener);\n    };\n    /**\n     * @param {string} key Key name.\n     * @param {import(\"./events.js\").Listener} listener Listener.\n     */\n    BaseObject.prototype.removeChangeListener = function (key, listener) {\n        this.removeEventListener(\"change:\" + key, listener);\n    };\n    /**\n     * Sets a value.\n     * @param {string} key Key name.\n     * @param {*} value Value.\n     * @param {boolean} [opt_silent] Update without triggering an event.\n     * @api\n     */\n    BaseObject.prototype.set = function (key, value, opt_silent) {\n        var values = this.values_ || (this.values_ = {});\n        if (opt_silent) {\n            values[key] = value;\n        }\n        else {\n            var oldValue = values[key];\n            values[key] = value;\n            if (oldValue !== value) {\n                this.notify(key, oldValue);\n            }\n        }\n    };\n    /**\n     * Sets a collection of key-value pairs.  Note that this changes any existing\n     * properties and adds new ones (it does not remove any existing properties).\n     * @param {Object<string, *>} values Values.\n     * @param {boolean} [opt_silent] Update without triggering an event.\n     * @api\n     */\n    BaseObject.prototype.setProperties = function (values, opt_silent) {\n        for (var key in values) {\n            this.set(key, values[key], opt_silent);\n        }\n    };\n    /**\n     * Apply any properties from another object without triggering events.\n     * @param {BaseObject} source The source object.\n     * @protected\n     */\n    BaseObject.prototype.applyProperties = function (source) {\n        if (!source.values_) {\n            return;\n        }\n        assign(this.values_ || (this.values_ = {}), source.values_);\n    };\n    /**\n     * Unsets a property.\n     * @param {string} key Key name.\n     * @param {boolean} [opt_silent] Unset without triggering an event.\n     * @api\n     */\n    BaseObject.prototype.unset = function (key, opt_silent) {\n        if (this.values_ && key in this.values_) {\n            var oldValue = this.values_[key];\n            delete this.values_[key];\n            if (isEmpty(this.values_)) {\n                this.values_ = null;\n            }\n            if (!opt_silent) {\n                this.notify(key, oldValue);\n            }\n        }\n    };\n    return BaseObject;\n}(Observable));\nexport default BaseObject;\n//# sourceMappingURL=Object.js.map"]},"metadata":{},"sourceType":"module"}