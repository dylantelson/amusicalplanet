{"ast":null,"code":"/**\n * @module ol/style/RegularShape\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle } from '../render/canvas.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\n\nvar RegularShape = function (_super) {\n  __extends(RegularShape, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function RegularShape(options) {\n    var _this = this;\n    /**\n     * @type {boolean}\n     */\n\n\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _super.call(this, {\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0]\n    }) || this;\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n\n    _this.canvas_ = undefined;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    _this.hitDetectionCanvas_ = null;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    _this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.origin_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.points_ = options.points;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    _this.radius_ = options.radius !== undefined ? options.radius : options.radius1;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.radius2_ = options.radius2;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.angle_ = options.angle !== undefined ? options.angle : 0;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    _this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.anchor_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.size_ = null;\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n\n    _this.renderOptions_ = null;\n\n    _this.render();\n\n    return _this;\n  }\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n\n\n  RegularShape.prototype.clone = function () {\n    var scale = this.getScale();\n    var style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice()\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  };\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n\n\n  RegularShape.prototype.getAnchor = function () {\n    return this.anchor_;\n  };\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n\n\n  RegularShape.prototype.getAngle = function () {\n    return this.angle_;\n  };\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n\n\n  RegularShape.prototype.getHitDetectionImage = function () {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n\n    return this.hitDetectionCanvas_;\n  };\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n\n\n  RegularShape.prototype.getImage = function (pixelRatio) {\n    var image = this.canvas_[pixelRatio];\n\n    if (!image) {\n      var renderOptions = this.renderOptions_;\n      var context = createCanvasContext2D(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n      this.draw_(renderOptions, context, pixelRatio);\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n\n    return image;\n  };\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n\n\n  RegularShape.prototype.getPixelRatio = function (pixelRatio) {\n    return pixelRatio;\n  };\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n\n\n  RegularShape.prototype.getImageSize = function () {\n    return this.size_;\n  };\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n\n\n  RegularShape.prototype.getImageState = function () {\n    return ImageState.LOADED;\n  };\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n\n\n  RegularShape.prototype.getOrigin = function () {\n    return this.origin_;\n  };\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n\n\n  RegularShape.prototype.getPoints = function () {\n    return this.points_;\n  };\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius = function () {\n    return this.radius_;\n  };\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius2 = function () {\n    return this.radius2_;\n  };\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n\n\n  RegularShape.prototype.getSize = function () {\n    return this.size_;\n  };\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  RegularShape.prototype.listenImageChange = function (listener) {};\n  /**\n   * Load not yet loaded URI.\n   */\n\n\n  RegularShape.prototype.load = function () {};\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  RegularShape.prototype.unlistenImageChange = function (listener) {};\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n\n\n  RegularShape.prototype.calculateLineJoinSize_ = function (lineJoin, strokeWidth, miterLimit) {\n    if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== 'bevel' && lineJoin !== 'miter') {\n      return strokeWidth;\n    } // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n\n\n    var r1 = this.radius_;\n    var r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n\n    if (r1 < r2) {\n      var tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n\n    var points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    var alpha = 2 * Math.PI / points;\n    var a = r2 * Math.sin(alpha);\n    var b = Math.sqrt(r2 * r2 - a * a);\n    var d = r1 - b;\n    var e = Math.sqrt(a * a + d * d);\n    var miterRatio = e / a;\n\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    } // Calculate the distnce from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n\n\n    var k = strokeWidth / 2 / miterRatio;\n    var l = strokeWidth / 2 * (d / e);\n    var maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    var bevelAdd = maxr - r1;\n\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    } // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n\n\n    var aa = r1 * Math.sin(alpha);\n    var bb = Math.sqrt(r1 * r1 - aa * aa);\n    var dd = r2 - bb;\n    var ee = Math.sqrt(aa * aa + dd * dd);\n    var innerMiterRatio = ee / aa;\n\n    if (innerMiterRatio <= miterLimit) {\n      var innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n\n    return bevelAdd * 2;\n  };\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n\n\n  RegularShape.prototype.createRenderOptions = function () {\n    var lineJoin = defaultLineJoin;\n    var miterLimit = 0;\n    var lineDash = null;\n    var lineDashOffset = 0;\n    var strokeStyle;\n    var strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n\n      miterLimit = this.stroke_.getMiterLimit();\n\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    var add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    var maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    var size = Math.ceil(2 * maxRadius + add);\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n  };\n  /**\n   * @protected\n   */\n\n\n  RegularShape.prototype.render = function () {\n    this.renderOptions_ = this.createRenderOptions();\n    var size = this.renderOptions_.size;\n    var displacement = this.getDisplacement();\n    this.canvas_ = {};\n    this.anchor_ = [size / 2 - displacement[0], size / 2 + displacement[1]];\n    this.size_ = [size, size];\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n\n\n  RegularShape.prototype.draw_ = function (renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio); // set origin to canvas center\n\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (context.setLineDash && renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n\n\n  RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {\n    if (this.fill_) {\n      var color = this.fill_.getColor(); // determine if fill is transparent (or pattern or gradient)\n\n      var opacity = 0;\n\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n        this.hitDetectionCanvas_ = context.canvas;\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  };\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n\n\n  RegularShape.prototype.createPath_ = function (context) {\n    var points = this.points_;\n    var radius = this.radius_;\n\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      var radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n\n      var startAngle = this.angle_ - Math.PI / 2;\n      var step = 2 * Math.PI / points;\n\n      for (var i = 0; i < points; i++) {\n        var angle0 = startAngle + i * step;\n        var radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n\n      context.closePath();\n    }\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n\n\n  RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  };\n\n  return RegularShape;\n}(ImageStyle);\n\nexport default RegularShape;","map":{"version":3,"sources":["../src/style/RegularShape.js"],"names":[],"mappings":"AAAA;;AAEG;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,UAAP,MAAuB,kBAAvB;AACA,OAAO,UAAP,MAAuB,YAAvB;AACA,SAAQ,OAAR,QAAsB,aAAtB;AACA,SAAQ,WAAR,QAA0B,iBAA1B;AACA,SAAQ,qBAAR,QAAoC,WAApC;AACA,SACE,gBADF,EAEE,eAFF,EAGE,gBAHF,EAIE,iBAJF,EAKE,kBALF,QAMO,qBANP;AAQA;;;;;;;;;;;;;;;;AAgBG;;AAEH;;;;;;;;;AASG;;AAEH;;;;;;AAMG;;AACH,IAAA,YAAA,GAAA,UAAA,MAAA,EAAA;AAA2B,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;AACzB;;AAEG;;;AACH,WAAA,YAAA,CAAY,OAAZ,EAAmB;AAAnB,QAAA,KAAA,GAAA,IAAA;AACE;;AAEG;;;AACH,QAAM,cAAc,GAClB,OAAO,CAAC,cAAR,KAA2B,SAA3B,GAAuC,OAAO,CAAC,cAA/C,GAAgE,KADlE;AAGA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AACJ,MAAA,OAAO,EAAE,CADL;AAEJ,MAAA,cAAc,EAAE,cAFZ;AAGJ,MAAA,QAAQ,EAAE,OAAO,CAAC,QAAR,KAAqB,SAArB,GAAiC,OAAO,CAAC,QAAzC,GAAoD,CAH1D;AAIJ,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,KAAkB,SAAlB,GAA8B,OAAO,CAAC,KAAtC,GAA8C,CAJjD;AAKJ,MAAA,YAAY,EACV,OAAO,CAAC,YAAR,KAAyB,SAAzB,GAAqC,OAAO,CAAC,YAA7C,GAA4D,CAAC,CAAD,EAAI,CAAJ;AAN1D,KAAN,KAOE,IAPF;AASA;;;AAGG;;AACH,IAAA,KAAI,CAAC,OAAL,GAAe,SAAf;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,mBAAL,GAA2B,IAA3B;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,KAAL,GAAa,OAAO,CAAC,IAAR,KAAiB,SAAjB,GAA6B,OAAO,CAAC,IAArC,GAA4C,IAAzD;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,OAAL,GAAe,CAAC,CAAD,EAAI,CAAJ,CAAf;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,OAAL,GAAe,OAAO,CAAC,MAAvB;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,OAAL,GACE,OAAO,CAAC,MAAR,KAAmB,SAAnB,GAA+B,OAAO,CAAC,MAAvC,GAAgD,OAAO,CAAC,OAD1D;AAGA;;;AAGG;;AACH,IAAA,KAAI,CAAC,QAAL,GAAgB,OAAO,CAAC,OAAxB;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,MAAL,GAAc,OAAO,CAAC,KAAR,KAAkB,SAAlB,GAA8B,OAAO,CAAC,KAAtC,GAA8C,CAA5D;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,OAAL,GAAe,OAAO,CAAC,MAAR,KAAmB,SAAnB,GAA+B,OAAO,CAAC,MAAvC,GAAgD,IAA/D;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,OAAL,GAAe,IAAf;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,KAAL,GAAa,IAAb;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,cAAL,GAAsB,IAAtB;;AAEA,IAAA,KAAI,CAAC,MAAL;;;AACD;AAED;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,QAAM,KAAK,GAAG,KAAK,QAAL,EAAd;AACA,QAAM,KAAK,GAAG,IAAI,YAAJ,CAAiB;AAC7B,MAAA,IAAI,EAAE,KAAK,OAAL,KAAiB,KAAK,OAAL,GAAe,KAAf,EAAjB,GAA0C,SADnB;AAE7B,MAAA,MAAM,EAAE,KAAK,SAAL,EAFqB;AAG7B,MAAA,MAAM,EAAE,KAAK,SAAL,EAHqB;AAI7B,MAAA,OAAO,EAAE,KAAK,UAAL,EAJoB;AAK7B,MAAA,KAAK,EAAE,KAAK,QAAL,EALsB;AAM7B,MAAA,MAAM,EAAE,KAAK,SAAL,KAAmB,KAAK,SAAL,GAAiB,KAAjB,EAAnB,GAA8C,SANzB;AAO7B,MAAA,QAAQ,EAAE,KAAK,WAAL,EAPmB;AAQ7B,MAAA,cAAc,EAAE,KAAK,iBAAL,EARa;AAS7B,MAAA,KAAK,EAAE,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAK,CAAC,KAAN,EAAvB,GAAuC,KATjB;AAU7B,MAAA,YAAY,EAAE,KAAK,eAAL,GAAuB,KAAvB;AAVe,KAAjB,CAAd;AAYA,IAAA,KAAK,CAAC,UAAN,CAAiB,KAAK,UAAL,EAAjB;AACA,WAAO,KAAP;AACD,GAhBD;AAkBA;;;;;AAKG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,KAAK,OAAZ;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,KAAK,MAAZ;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,KAAK,KAAZ;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;AACE,QAAI,CAAC,KAAK,mBAAV,EAA+B;AAC7B,WAAK,yBAAL,CAA+B,KAAK,cAApC;AACD;;AACD,WAAO,KAAK,mBAAZ;AACD,GALD;AAOA;;;;;AAKG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,UAAT,EAAmB;AACjB,QAAI,KAAK,GAAG,KAAK,OAAL,CAAa,UAAb,CAAZ;;AACA,QAAI,CAAC,KAAL,EAAY;AACV,UAAM,aAAa,GAAG,KAAK,cAA3B;AACA,UAAM,OAAO,GAAG,qBAAqB,CACnC,aAAa,CAAC,IAAd,GAAqB,UADc,EAEnC,aAAa,CAAC,IAAd,GAAqB,UAFc,CAArC;AAIA,WAAK,KAAL,CAAW,aAAX,EAA0B,OAA1B,EAAmC,UAAnC;AAEA,MAAA,KAAK,GAAG,OAAO,CAAC,MAAhB;AACA,WAAK,OAAL,CAAa,UAAb,IAA2B,KAA3B;AACD;;AACD,WAAO,KAAP;AACD,GAdD;AAgBA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,UAAd,EAAwB;AACtB,WAAO,UAAP;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,WAAO,KAAK,KAAZ;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,WAAO,UAAU,CAAC,MAAlB;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,KAAK,OAAZ;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,KAAK,OAAZ;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,KAAK,OAAZ;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,WAAO,KAAK,QAAZ;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,KAAK,KAAZ;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,KAAK,OAAZ;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,QAAlB,EAA0B,CAAI,CAA9B;AAEA;;AAEG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA,CAAS,CAAT;AAEA;;AAEG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,QAApB,EAA4B,CAAI,CAAhC;AAEA;;;;;;;AAOG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,sBAAA,GAAA,UAAuB,QAAvB,EAAiC,WAAjC,EAA8C,UAA9C,EAAwD;AACtD,QACE,WAAW,KAAK,CAAhB,IACA,KAAK,OAAL,KAAiB,QADjB,IAEC,QAAQ,KAAK,OAAb,IAAwB,QAAQ,KAAK,OAHxC,EAIE;AACA,aAAO,WAAP;AACD,KAPqD,CAQtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAI,EAAE,GAAG,KAAK,OAAd;AACA,QAAI,EAAE,GAAG,KAAK,QAAL,KAAkB,SAAlB,GAA8B,EAA9B,GAAmC,KAAK,QAAjD;;AACA,QAAI,EAAE,GAAG,EAAT,EAAa;AACX,UAAM,GAAG,GAAG,EAAZ;AACA,MAAA,EAAE,GAAG,EAAL;AACA,MAAA,EAAE,GAAG,GAAL;AACD;;AACD,QAAM,MAAM,GACV,KAAK,QAAL,KAAkB,SAAlB,GAA8B,KAAK,OAAnC,GAA6C,KAAK,OAAL,GAAe,CAD9D;AAEA,QAAM,KAAK,GAAI,IAAI,IAAI,CAAC,EAAV,GAAgB,MAA9B;AACA,QAAM,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,CAAf;AACA,QAAM,CAAC,GAAG,IAAI,CAAC,IAAL,CAAU,EAAE,GAAG,EAAL,GAAU,CAAC,GAAG,CAAxB,CAAV;AACA,QAAM,CAAC,GAAG,EAAE,GAAG,CAAf;AACA,QAAM,CAAC,GAAG,IAAI,CAAC,IAAL,CAAU,CAAC,GAAG,CAAJ,GAAQ,CAAC,GAAG,CAAtB,CAAV;AACA,QAAM,UAAU,GAAG,CAAC,GAAG,CAAvB;;AACA,QAAI,QAAQ,KAAK,OAAb,IAAwB,UAAU,IAAI,UAA1C,EAAsD;AACpD,aAAO,UAAU,GAAG,WAApB;AACD,KA/CqD,CAgDtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAM,CAAC,GAAG,WAAW,GAAG,CAAd,GAAkB,UAA5B;AACA,QAAM,CAAC,GAAI,WAAW,GAAG,CAAf,IAAqB,CAAC,GAAG,CAAzB,CAAV;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,IAAL,CAAU,CAAC,EAAE,GAAG,CAAN,KAAY,EAAE,GAAG,CAAjB,IAAsB,CAAC,GAAG,CAApC,CAAb;AACA,QAAM,QAAQ,GAAG,IAAI,GAAG,EAAxB;;AACA,QAAI,KAAK,QAAL,KAAkB,SAAlB,IAA+B,QAAQ,KAAK,OAAhD,EAAyD;AACvD,aAAO,QAAQ,GAAG,CAAlB;AACD,KAnEqD,CAoEtD;AACA;;;AACA,QAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,CAAhB;AACA,QAAM,EAAE,GAAG,IAAI,CAAC,IAAL,CAAU,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAzB,CAAX;AACA,QAAM,EAAE,GAAG,EAAE,GAAG,EAAhB;AACA,QAAM,EAAE,GAAG,IAAI,CAAC,IAAL,CAAU,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAzB,CAAX;AACA,QAAM,eAAe,GAAG,EAAE,GAAG,EAA7B;;AACA,QAAI,eAAe,IAAI,UAAvB,EAAmC;AACjC,UAAM,WAAW,GAAI,eAAe,GAAG,WAAnB,GAAkC,CAAlC,GAAsC,EAAtC,GAA2C,EAA/D;AACA,aAAO,IAAI,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,WAAnB,CAAX;AACD;;AACD,WAAO,QAAQ,GAAG,CAAlB;AACD,GAhFD;AAkFA;;;AAGG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,YAAA;AACE,QAAI,QAAQ,GAAG,eAAf;AACA,QAAI,UAAU,GAAG,CAAjB;AACA,QAAI,QAAQ,GAAG,IAAf;AACA,QAAI,cAAc,GAAG,CAArB;AACA,QAAI,WAAJ;AACA,QAAI,WAAW,GAAG,CAAlB;;AAEA,QAAI,KAAK,OAAT,EAAkB;AAChB,MAAA,WAAW,GAAG,KAAK,OAAL,CAAa,QAAb,EAAd;;AACA,UAAI,WAAW,KAAK,IAApB,EAA0B;AACxB,QAAA,WAAW,GAAG,kBAAd;AACD;;AACD,MAAA,WAAW,GAAG,WAAW,CAAC,WAAD,CAAzB;AACA,MAAA,WAAW,GAAG,KAAK,OAAL,CAAa,QAAb,EAAd;;AACA,UAAI,WAAW,KAAK,SAApB,EAA+B;AAC7B,QAAA,WAAW,GAAG,gBAAd;AACD;;AACD,MAAA,QAAQ,GAAG,KAAK,OAAL,CAAa,WAAb,EAAX;AACA,MAAA,cAAc,GAAG,KAAK,OAAL,CAAa,iBAAb,EAAjB;AACA,MAAA,QAAQ,GAAG,KAAK,OAAL,CAAa,WAAb,EAAX;;AACA,UAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,QAAA,QAAQ,GAAG,eAAX;AACD;;AACD,MAAA,UAAU,GAAG,KAAK,OAAL,CAAa,aAAb,EAAb;;AACA,UAAI,UAAU,KAAK,SAAnB,EAA8B;AAC5B,QAAA,UAAU,GAAG,iBAAb;AACD;AACF;;AAED,QAAM,GAAG,GAAG,KAAK,sBAAL,CAA4B,QAA5B,EAAsC,WAAtC,EAAmD,UAAnD,CAAZ;AACA,QAAM,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,OAAd,EAAuB,KAAK,QAAL,IAAiB,CAAxC,CAAlB;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,IAAL,CAAU,IAAI,SAAJ,GAAgB,GAA1B,CAAb;AAEA,WAAO;AACL,MAAA,WAAW,EAAE,WADR;AAEL,MAAA,WAAW,EAAE,WAFR;AAGL,MAAA,IAAI,EAAE,IAHD;AAIL,MAAA,QAAQ,EAAE,QAJL;AAKL,MAAA,cAAc,EAAE,cALX;AAML,MAAA,QAAQ,EAAE,QANL;AAOL,MAAA,UAAU,EAAE;AAPP,KAAP;AASD,GA3CD;AA6CA;;AAEG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,SAAK,cAAL,GAAsB,KAAK,mBAAL,EAAtB;AACA,QAAM,IAAI,GAAG,KAAK,cAAL,CAAoB,IAAjC;AACA,QAAM,YAAY,GAAG,KAAK,eAAL,EAArB;AACA,SAAK,OAAL,GAAe,EAAf;AACA,SAAK,OAAL,GAAe,CAAC,IAAI,GAAG,CAAP,GAAW,YAAY,CAAC,CAAD,CAAxB,EAA6B,IAAI,GAAG,CAAP,GAAW,YAAY,CAAC,CAAD,CAApD,CAAf;AACA,SAAK,KAAL,GAAa,CAAC,IAAD,EAAO,IAAP,CAAb;AACD,GAPD;AASA;;;;;AAKG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,aAAN,EAAqB,OAArB,EAA8B,UAA9B,EAAwC;AACtC,IAAA,OAAO,CAAC,KAAR,CAAc,UAAd,EAA0B,UAA1B,EADsC,CAEtC;;AACA,IAAA,OAAO,CAAC,SAAR,CAAkB,aAAa,CAAC,IAAd,GAAqB,CAAvC,EAA0C,aAAa,CAAC,IAAd,GAAqB,CAA/D;AAEA,SAAK,WAAL,CAAiB,OAAjB;;AAEA,QAAI,KAAK,KAAT,EAAgB;AACd,UAAI,KAAK,GAAG,KAAK,KAAL,CAAW,QAAX,EAAZ;;AACA,UAAI,KAAK,KAAK,IAAd,EAAoB;AAClB,QAAA,KAAK,GAAG,gBAAR;AACD;;AACD,MAAA,OAAO,CAAC,SAAR,GAAoB,WAAW,CAAC,KAAD,CAA/B;AACA,MAAA,OAAO,CAAC,IAAR;AACD;;AACD,QAAI,KAAK,OAAT,EAAkB;AAChB,MAAA,OAAO,CAAC,WAAR,GAAsB,aAAa,CAAC,WAApC;AACA,MAAA,OAAO,CAAC,SAAR,GAAoB,aAAa,CAAC,WAAlC;;AACA,UAAI,OAAO,CAAC,WAAR,IAAuB,aAAa,CAAC,QAAzC,EAAmD;AACjD,QAAA,OAAO,CAAC,WAAR,CAAoB,aAAa,CAAC,QAAlC;AACA,QAAA,OAAO,CAAC,cAAR,GAAyB,aAAa,CAAC,cAAvC;AACD;;AACD,MAAA,OAAO,CAAC,QAAR,GAAmB,aAAa,CAAC,QAAjC;AACA,MAAA,OAAO,CAAC,UAAR,GAAqB,aAAa,CAAC,UAAnC;AACA,MAAA,OAAO,CAAC,MAAR;AACD;AACF,GA1BD;AA4BA;;;AAGG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,yBAAA,GAAA,UAA0B,aAA1B,EAAuC;AACrC,QAAI,KAAK,KAAT,EAAgB;AACd,UAAI,KAAK,GAAG,KAAK,KAAL,CAAW,QAAX,EAAZ,CADc,CAGd;;AACA,UAAI,OAAO,GAAG,CAAd;;AACA,UAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAA,KAAK,GAAG,OAAO,CAAC,KAAD,CAAf;AACD;;AACD,UAAI,KAAK,KAAK,IAAd,EAAoB;AAClB,QAAA,OAAO,GAAG,CAAV;AACD,OAFD,MAEO,IAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AAC/B,QAAA,OAAO,GAAG,KAAK,CAAC,MAAN,KAAiB,CAAjB,GAAqB,KAAK,CAAC,CAAD,CAA1B,GAAgC,CAA1C;AACD;;AACD,UAAI,OAAO,KAAK,CAAhB,EAAmB;AACjB;AACA;AACA,YAAM,OAAO,GAAG,qBAAqB,CACnC,aAAa,CAAC,IADqB,EAEnC,aAAa,CAAC,IAFqB,CAArC;AAIA,aAAK,mBAAL,GAA2B,OAAO,CAAC,MAAnC;AAEA,aAAK,uBAAL,CAA6B,aAA7B,EAA4C,OAA5C;AACD;AACF;;AACD,QAAI,CAAC,KAAK,mBAAV,EAA+B;AAC7B,WAAK,mBAAL,GAA2B,KAAK,QAAL,CAAc,CAAd,CAA3B;AACD;AACF,GA7BD;AA+BA;;;AAGG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,OAAZ,EAAmB;AACjB,QAAI,MAAM,GAAG,KAAK,OAAlB;AACA,QAAM,MAAM,GAAG,KAAK,OAApB;;AACA,QAAI,MAAM,KAAK,QAAf,EAAyB;AACvB,MAAA,OAAO,CAAC,GAAR,CAAY,CAAZ,EAAe,CAAf,EAAkB,MAAlB,EAA0B,CAA1B,EAA6B,IAAI,IAAI,CAAC,EAAtC;AACD,KAFD,MAEO;AACL,UAAM,OAAO,GAAG,KAAK,QAAL,KAAkB,SAAlB,GAA8B,MAA9B,GAAuC,KAAK,QAA5D;;AACA,UAAI,KAAK,QAAL,KAAkB,SAAtB,EAAiC;AAC/B,QAAA,MAAM,IAAI,CAAV;AACD;;AACD,UAAM,UAAU,GAAG,KAAK,MAAL,GAAc,IAAI,CAAC,EAAL,GAAU,CAA3C;AACA,UAAM,IAAI,GAAI,IAAI,IAAI,CAAC,EAAV,GAAgB,MAA7B;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC/B,YAAM,MAAM,GAAG,UAAU,GAAG,CAAC,GAAG,IAAhC;AACA,YAAM,OAAO,GAAG,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAc,MAAd,GAAuB,OAAvC;AACA,QAAA,OAAO,CAAC,MAAR,CAAe,OAAO,GAAG,IAAI,CAAC,GAAL,CAAS,MAAT,CAAzB,EAA2C,OAAO,GAAG,IAAI,CAAC,GAAL,CAAS,MAAT,CAArD;AACD;;AACD,MAAA,OAAO,CAAC,SAAR;AACD;AACF,GAnBD;AAqBA;;;;AAIG;;;AACH,EAAA,YAAA,CAAA,SAAA,CAAA,uBAAA,GAAA,UAAwB,aAAxB,EAAuC,OAAvC,EAA8C;AAC5C;AACA,IAAA,OAAO,CAAC,SAAR,CAAkB,aAAa,CAAC,IAAd,GAAqB,CAAvC,EAA0C,aAAa,CAAC,IAAd,GAAqB,CAA/D;AAEA,SAAK,WAAL,CAAiB,OAAjB;AAEA,IAAA,OAAO,CAAC,SAAR,GAAoB,gBAApB;AACA,IAAA,OAAO,CAAC,IAAR;;AACA,QAAI,KAAK,OAAT,EAAkB;AAChB,MAAA,OAAO,CAAC,WAAR,GAAsB,aAAa,CAAC,WAApC;AACA,MAAA,OAAO,CAAC,SAAR,GAAoB,aAAa,CAAC,WAAlC;;AACA,UAAI,aAAa,CAAC,QAAlB,EAA4B;AAC1B,QAAA,OAAO,CAAC,WAAR,CAAoB,aAAa,CAAC,QAAlC;AACA,QAAA,OAAO,CAAC,cAAR,GAAyB,aAAa,CAAC,cAAvC;AACD;;AACD,MAAA,OAAO,CAAC,QAAR,GAAmB,aAAa,CAAC,QAAjC;AACA,MAAA,OAAO,CAAC,UAAR,GAAqB,aAAa,CAAC,UAAnC;AACA,MAAA,OAAO,CAAC,MAAR;AACD;AACF,GAnBD;;AAoBF,SAAA,YAAA;AAAC,CA7hBD,CAA2B,UAA3B,CAAA;;AA+hBA,eAAe,YAAf","sourceRoot":"","sourcesContent":["/**\n * @module ol/style/RegularShape\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle, } from '../render/canvas.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n */\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nvar RegularShape = /** @class */ (function (_super) {\n    __extends(RegularShape, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function RegularShape(options) {\n        var _this = this;\n        /**\n         * @type {boolean}\n         */\n        var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n        _this = _super.call(this, {\n            opacity: 1,\n            rotateWithView: rotateWithView,\n            rotation: options.rotation !== undefined ? options.rotation : 0,\n            scale: options.scale !== undefined ? options.scale : 1,\n            displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n        }) || this;\n        /**\n         * @private\n         * @type {Object<number, HTMLCanvasElement>}\n         */\n        _this.canvas_ = undefined;\n        /**\n         * @private\n         * @type {HTMLCanvasElement}\n         */\n        _this.hitDetectionCanvas_ = null;\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        _this.fill_ = options.fill !== undefined ? options.fill : null;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.origin_ = [0, 0];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.points_ = options.points;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.radius_ =\n            options.radius !== undefined ? options.radius : options.radius1;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.radius2_ = options.radius2;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.angle_ = options.angle !== undefined ? options.angle : 0;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        _this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.anchor_ = null;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        _this.size_ = null;\n        /**\n         * @private\n         * @type {RenderOptions}\n         */\n        _this.renderOptions_ = null;\n        _this.render();\n        return _this;\n    }\n    /**\n     * Clones the style.\n     * @return {RegularShape} The cloned style.\n     * @api\n     */\n    RegularShape.prototype.clone = function () {\n        var scale = this.getScale();\n        var style = new RegularShape({\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            points: this.getPoints(),\n            radius: this.getRadius(),\n            radius2: this.getRadius2(),\n            angle: this.getAngle(),\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            displacement: this.getDisplacement().slice(),\n        });\n        style.setOpacity(this.getOpacity());\n        return style;\n    };\n    /**\n     * Get the anchor point in pixels. The anchor determines the center point for the\n     * symbolizer.\n     * @return {Array<number>} Anchor.\n     * @api\n     */\n    RegularShape.prototype.getAnchor = function () {\n        return this.anchor_;\n    };\n    /**\n     * Get the angle used in generating the shape.\n     * @return {number} Shape's rotation in radians.\n     * @api\n     */\n    RegularShape.prototype.getAngle = function () {\n        return this.angle_;\n    };\n    /**\n     * Get the fill style for the shape.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    RegularShape.prototype.getFill = function () {\n        return this.fill_;\n    };\n    /**\n     * @return {HTMLCanvasElement} Image element.\n     */\n    RegularShape.prototype.getHitDetectionImage = function () {\n        if (!this.hitDetectionCanvas_) {\n            this.createHitDetectionCanvas_(this.renderOptions_);\n        }\n        return this.hitDetectionCanvas_;\n    };\n    /**\n     * Get the image icon.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLCanvasElement} Image or Canvas element.\n     * @api\n     */\n    RegularShape.prototype.getImage = function (pixelRatio) {\n        var image = this.canvas_[pixelRatio];\n        if (!image) {\n            var renderOptions = this.renderOptions_;\n            var context = createCanvasContext2D(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n            this.draw_(renderOptions, context, pixelRatio);\n            image = context.canvas;\n            this.canvas_[pixelRatio] = image;\n        }\n        return image;\n    };\n    /**\n     * Get the image pixel ratio.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Pixel ratio.\n     */\n    RegularShape.prototype.getPixelRatio = function (pixelRatio) {\n        return pixelRatio;\n    };\n    /**\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n    RegularShape.prototype.getImageSize = function () {\n        return this.size_;\n    };\n    /**\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n    RegularShape.prototype.getImageState = function () {\n        return ImageState.LOADED;\n    };\n    /**\n     * Get the origin of the symbolizer.\n     * @return {Array<number>} Origin.\n     * @api\n     */\n    RegularShape.prototype.getOrigin = function () {\n        return this.origin_;\n    };\n    /**\n     * Get the number of points for generating the shape.\n     * @return {number} Number of points for stars and regular polygons.\n     * @api\n     */\n    RegularShape.prototype.getPoints = function () {\n        return this.points_;\n    };\n    /**\n     * Get the (primary) radius for the shape.\n     * @return {number} Radius.\n     * @api\n     */\n    RegularShape.prototype.getRadius = function () {\n        return this.radius_;\n    };\n    /**\n     * Get the secondary radius for the shape.\n     * @return {number|undefined} Radius2.\n     * @api\n     */\n    RegularShape.prototype.getRadius2 = function () {\n        return this.radius2_;\n    };\n    /**\n     * Get the size of the symbolizer (in pixels).\n     * @return {import(\"../size.js\").Size} Size.\n     * @api\n     */\n    RegularShape.prototype.getSize = function () {\n        return this.size_;\n    };\n    /**\n     * Get the stroke style for the shape.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    RegularShape.prototype.getStroke = function () {\n        return this.stroke_;\n    };\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    RegularShape.prototype.listenImageChange = function (listener) { };\n    /**\n     * Load not yet loaded URI.\n     */\n    RegularShape.prototype.load = function () { };\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    RegularShape.prototype.unlistenImageChange = function (listener) { };\n    /**\n     * Calculate additional canvas size needed for the miter.\n     * @param {string} lineJoin Line join\n     * @param {number} strokeWidth Stroke width\n     * @param {number} miterLimit Miter limit\n     * @return {number} Additional canvas size needed\n     * @private\n     */\n    RegularShape.prototype.calculateLineJoinSize_ = function (lineJoin, strokeWidth, miterLimit) {\n        if (strokeWidth === 0 ||\n            this.points_ === Infinity ||\n            (lineJoin !== 'bevel' && lineJoin !== 'miter')) {\n            return strokeWidth;\n        }\n        // m  | ^\n        // i  | |\\                  .\n        // t >|  #\\\n        // e  | |\\ \\              .\n        // r      \\s\\\n        //      |  \\t\\          .                 .\n        //          \\r\\                      .   .\n        //      |    \\o\\      .          .  . . .\n        //          e \\k\\            .  .    . .\n        //      |      \\e\\  .    .  .       . .\n        //       d      \\ \\  .  .          . .\n        //      | _ _a_ _\\#  .            . .\n        //   r1          / `             . .\n        //      |                       . .\n        //       b     /               . .\n        //      |                     . .\n        //           / r2            . .\n        //      |                        .   .\n        //         /                           .   .\n        //      |α                                   .   .\n        //       /                                         .   .\n        //      ° center\n        var r1 = this.radius_;\n        var r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n        if (r1 < r2) {\n            var tmp = r1;\n            r1 = r2;\n            r2 = tmp;\n        }\n        var points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n        var alpha = (2 * Math.PI) / points;\n        var a = r2 * Math.sin(alpha);\n        var b = Math.sqrt(r2 * r2 - a * a);\n        var d = r1 - b;\n        var e = Math.sqrt(a * a + d * d);\n        var miterRatio = e / a;\n        if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n            return miterRatio * strokeWidth;\n        }\n        // Calculate the distnce from center to the stroke corner where\n        // it was cut short because of the miter limit.\n        //              l\n        //        ----+---- <= distance from center to here is maxr\n        //       /####|k ##\\\n        //      /#####^#####\\\n        //     /#### /+\\# s #\\\n        //    /### h/+++\\# t #\\\n        //   /### t/+++++\\# r #\\\n        //  /### a/+++++++\\# o #\\\n        // /### p/++ fill +\\# k #\\\n        ///#### /+++++^+++++\\# e #\\\n        //#####/+++++/+\\+++++\\#####\\\n        var k = strokeWidth / 2 / miterRatio;\n        var l = (strokeWidth / 2) * (d / e);\n        var maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n        var bevelAdd = maxr - r1;\n        if (this.radius2_ === undefined || lineJoin === 'bevel') {\n            return bevelAdd * 2;\n        }\n        // If outer miter is over the miter limit the inner miter may reach through the\n        // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n        var aa = r1 * Math.sin(alpha);\n        var bb = Math.sqrt(r1 * r1 - aa * aa);\n        var dd = r2 - bb;\n        var ee = Math.sqrt(aa * aa + dd * dd);\n        var innerMiterRatio = ee / aa;\n        if (innerMiterRatio <= miterLimit) {\n            var innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\n            return 2 * Math.max(bevelAdd, innerLength);\n        }\n        return bevelAdd * 2;\n    };\n    /**\n     * @return {RenderOptions}  The render options\n     * @protected\n     */\n    RegularShape.prototype.createRenderOptions = function () {\n        var lineJoin = defaultLineJoin;\n        var miterLimit = 0;\n        var lineDash = null;\n        var lineDashOffset = 0;\n        var strokeStyle;\n        var strokeWidth = 0;\n        if (this.stroke_) {\n            strokeStyle = this.stroke_.getColor();\n            if (strokeStyle === null) {\n                strokeStyle = defaultStrokeStyle;\n            }\n            strokeStyle = asColorLike(strokeStyle);\n            strokeWidth = this.stroke_.getWidth();\n            if (strokeWidth === undefined) {\n                strokeWidth = defaultLineWidth;\n            }\n            lineDash = this.stroke_.getLineDash();\n            lineDashOffset = this.stroke_.getLineDashOffset();\n            lineJoin = this.stroke_.getLineJoin();\n            if (lineJoin === undefined) {\n                lineJoin = defaultLineJoin;\n            }\n            miterLimit = this.stroke_.getMiterLimit();\n            if (miterLimit === undefined) {\n                miterLimit = defaultMiterLimit;\n            }\n        }\n        var add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n        var maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n        var size = Math.ceil(2 * maxRadius + add);\n        return {\n            strokeStyle: strokeStyle,\n            strokeWidth: strokeWidth,\n            size: size,\n            lineDash: lineDash,\n            lineDashOffset: lineDashOffset,\n            lineJoin: lineJoin,\n            miterLimit: miterLimit,\n        };\n    };\n    /**\n     * @protected\n     */\n    RegularShape.prototype.render = function () {\n        this.renderOptions_ = this.createRenderOptions();\n        var size = this.renderOptions_.size;\n        var displacement = this.getDisplacement();\n        this.canvas_ = {};\n        this.anchor_ = [size / 2 - displacement[0], size / 2 + displacement[1]];\n        this.size_ = [size, size];\n    };\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     * @param {CanvasRenderingContext2D} context The rendering context.\n     * @param {number} pixelRatio The pixel ratio.\n     */\n    RegularShape.prototype.draw_ = function (renderOptions, context, pixelRatio) {\n        context.scale(pixelRatio, pixelRatio);\n        // set origin to canvas center\n        context.translate(renderOptions.size / 2, renderOptions.size / 2);\n        this.createPath_(context);\n        if (this.fill_) {\n            var color = this.fill_.getColor();\n            if (color === null) {\n                color = defaultFillStyle;\n            }\n            context.fillStyle = asColorLike(color);\n            context.fill();\n        }\n        if (this.stroke_) {\n            context.strokeStyle = renderOptions.strokeStyle;\n            context.lineWidth = renderOptions.strokeWidth;\n            if (context.setLineDash && renderOptions.lineDash) {\n                context.setLineDash(renderOptions.lineDash);\n                context.lineDashOffset = renderOptions.lineDashOffset;\n            }\n            context.lineJoin = renderOptions.lineJoin;\n            context.miterLimit = renderOptions.miterLimit;\n            context.stroke();\n        }\n    };\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     */\n    RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {\n        if (this.fill_) {\n            var color = this.fill_.getColor();\n            // determine if fill is transparent (or pattern or gradient)\n            var opacity = 0;\n            if (typeof color === 'string') {\n                color = asArray(color);\n            }\n            if (color === null) {\n                opacity = 1;\n            }\n            else if (Array.isArray(color)) {\n                opacity = color.length === 4 ? color[3] : 1;\n            }\n            if (opacity === 0) {\n                // if a transparent fill style is set, create an extra hit-detection image\n                // with a default fill style\n                var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n                this.hitDetectionCanvas_ = context.canvas;\n                this.drawHitDetectionCanvas_(renderOptions, context);\n            }\n        }\n        if (!this.hitDetectionCanvas_) {\n            this.hitDetectionCanvas_ = this.getImage(1);\n        }\n    };\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} context The context to draw in.\n     */\n    RegularShape.prototype.createPath_ = function (context) {\n        var points = this.points_;\n        var radius = this.radius_;\n        if (points === Infinity) {\n            context.arc(0, 0, radius, 0, 2 * Math.PI);\n        }\n        else {\n            var radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n            if (this.radius2_ !== undefined) {\n                points *= 2;\n            }\n            var startAngle = this.angle_ - Math.PI / 2;\n            var step = (2 * Math.PI) / points;\n            for (var i = 0; i < points; i++) {\n                var angle0 = startAngle + i * step;\n                var radiusC = i % 2 === 0 ? radius : radius2;\n                context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n            }\n            context.closePath();\n        }\n    };\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     * @param {CanvasRenderingContext2D} context The context.\n     */\n    RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context) {\n        // set origin to canvas center\n        context.translate(renderOptions.size / 2, renderOptions.size / 2);\n        this.createPath_(context);\n        context.fillStyle = defaultFillStyle;\n        context.fill();\n        if (this.stroke_) {\n            context.strokeStyle = renderOptions.strokeStyle;\n            context.lineWidth = renderOptions.strokeWidth;\n            if (renderOptions.lineDash) {\n                context.setLineDash(renderOptions.lineDash);\n                context.lineDashOffset = renderOptions.lineDashOffset;\n            }\n            context.lineJoin = renderOptions.lineJoin;\n            context.miterLimit = renderOptions.miterLimit;\n            context.stroke();\n        }\n    };\n    return RegularShape;\n}(ImageStyle));\nexport default RegularShape;\n//# sourceMappingURL=RegularShape.js.map"]},"metadata":{},"sourceType":"module"}