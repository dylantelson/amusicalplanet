{"ast":null,"code":"/**\n * @module ol/geom/flat/intersectsextent\n */\nimport { containsExtent, createEmpty, extendFlatCoordinates, intersects, intersectsSegment } from '../../extent.js';\nimport { forEach as forEachSegment } from './segments.js';\nimport { linearRingContainsExtent, linearRingContainsXY } from './contains.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\nexport function intersectsLineString(flatCoordinates, offset, end, stride, extent) {\n  var coordinatesExtent = extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);\n\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n\n  return forEachSegment(flatCoordinates, offset, end, stride,\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n   * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n   * @return {boolean} `true` if the segment and the extent intersect,\n   *     `false` otherwise.\n   */\n  function (point1, point2) {\n    return intersectsSegment(extent, point1, point2);\n  });\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\nexport function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {\n      return true;\n    }\n\n    offset = ends[i];\n  }\n\n  return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\nexport function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n    return true;\n  }\n\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n    return true;\n  }\n\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n    return true;\n  }\n\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\nexport function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n\n  if (ends.length === 1) {\n    return true;\n  }\n\n  for (var i = 1, ii = ends.length; i < ii; ++i) {\n    if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n      if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n\nexport function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n\n    if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {\n      return true;\n    }\n\n    offset = ends[ends.length - 1];\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../src/geom/flat/intersectsextent.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/geom/flat/intersectsextent\n */\nimport { containsExtent, createEmpty, extendFlatCoordinates, intersects, intersectsSegment, } from '../../extent.js';\nimport { forEach as forEachSegment } from './segments.js';\nimport { linearRingContainsExtent, linearRingContainsXY } from './contains.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(flatCoordinates, offset, end, stride, extent) {\n    var coordinatesExtent = extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);\n    if (!intersects(extent, coordinatesExtent)) {\n        return false;\n    }\n    if (containsExtent(extent, coordinatesExtent)) {\n        return true;\n    }\n    if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n        return true;\n    }\n    if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n        return true;\n    }\n    return forEachSegment(flatCoordinates, offset, end, stride, \n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function (point1, point2) {\n        return intersectsSegment(extent, point1, point2);\n    });\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {\n            return true;\n        }\n        offset = ends[i];\n    }\n    return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {\n    if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n        return true;\n    }\n    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {\n    if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n        return false;\n    }\n    if (ends.length === 1) {\n        return true;\n    }\n    for (var i = 1, ii = ends.length; i < ii; ++i) {\n        if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n            if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {\n            return true;\n        }\n        offset = ends[ends.length - 1];\n    }\n    return false;\n}\n//# sourceMappingURL=intersectsextent.js.map"]},"metadata":{},"sourceType":"module"}