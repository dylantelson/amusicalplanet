{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragPan\n */\n\n\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { all, focusWithTabindex, noModifierKeys, primaryAction } from '../events/condition.js';\nimport { easeOut } from '../easing.js';\nimport { rotate as rotateCoordinate, scale as scaleCoordinate } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\n\nvar DragPan = function (_super) {\n  __extends(DragPan, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function DragPan(opt_options) {\n    var _this = _super.call(this, {\n      stopDown: FALSE\n    }) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n\n    _this.kinetic_ = options.kinetic;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n\n    _this.lastCentroid = null;\n    /**\n     * @type {number}\n     */\n\n    _this.lastPointersCount_;\n    /**\n     * @type {boolean}\n     */\n\n    _this.panning_ = false;\n    var condition = options.condition ? options.condition : all(noModifierKeys, primaryAction);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.onFocusOnly ? all(focusWithTabindex, condition) : condition;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.noKinetic_ = false;\n    return _this;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  DragPan.prototype.handleDragEvent = function (mapBrowserEvent) {\n    if (!this.panning_) {\n      this.panning_ = true;\n      this.getMap().getView().beginInteraction();\n    }\n\n    var targetPointers = this.targetPointers;\n    var centroid = centroidFromPointers(targetPointers);\n\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n\n      if (this.lastCentroid) {\n        var delta = [this.lastCentroid[0] - centroid[0], centroid[1] - this.lastCentroid[1]];\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        scaleCoordinate(delta, view.getResolution());\n        rotateCoordinate(delta, view.getRotation());\n        view.adjustCenterInternal(delta);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n    mapBrowserEvent.originalEvent.preventDefault();\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragPan.prototype.handleUpEvent = function (mapBrowserEvent) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        var distance = this.kinetic_.getDistance();\n        var angle = this.kinetic_.getAngle();\n        var center = view.getCenterInternal();\n        var centerpx = map.getPixelFromCoordinateInternal(center);\n        var dest = map.getCoordinateFromPixelInternal([centerpx[0] - distance * Math.cos(angle), centerpx[1] - distance * Math.sin(angle)]);\n        view.animateInternal({\n          center: view.getConstrainedCenter(dest),\n          duration: 500,\n          easing: easeOut\n        });\n      }\n\n      if (this.panning_) {\n        this.panning_ = false;\n        view.endInteraction();\n      }\n\n      return false;\n    } else {\n      if (this.kinetic_) {\n        // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n      }\n\n      this.lastCentroid = null;\n      return true;\n    }\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragPan.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      this.lastCentroid = null; // stop any current animation\n\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      } // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n\n\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return DragPan;\n}(PointerInteraction);\n\nexport default DragPan;","map":{"version":3,"sources":["../src/interaction/DragPan.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/DragPan\n */\nimport PointerInteraction, { centroid as centroidFromPointers, } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { all, focusWithTabindex, noModifierKeys, primaryAction, } from '../events/condition.js';\nimport { easeOut } from '../easing.js';\nimport { rotate as rotateCoordinate, scale as scaleCoordinate, } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\nvar DragPan = /** @class */ (function (_super) {\n    __extends(DragPan, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function DragPan(opt_options) {\n        var _this = _super.call(this, {\n            stopDown: FALSE,\n        }) || this;\n        var options = opt_options ? opt_options : {};\n        /**\n         * @private\n         * @type {import(\"../Kinetic.js\").default|undefined}\n         */\n        _this.kinetic_ = options.kinetic;\n        /**\n         * @type {import(\"../pixel.js\").Pixel}\n         */\n        _this.lastCentroid = null;\n        /**\n         * @type {number}\n         */\n        _this.lastPointersCount_;\n        /**\n         * @type {boolean}\n         */\n        _this.panning_ = false;\n        var condition = options.condition\n            ? options.condition\n            : all(noModifierKeys, primaryAction);\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.onFocusOnly\n            ? all(focusWithTabindex, condition)\n            : condition;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.noKinetic_ = false;\n        return _this;\n    }\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     */\n    DragPan.prototype.handleDragEvent = function (mapBrowserEvent) {\n        if (!this.panning_) {\n            this.panning_ = true;\n            this.getMap().getView().beginInteraction();\n        }\n        var targetPointers = this.targetPointers;\n        var centroid = centroidFromPointers(targetPointers);\n        if (targetPointers.length == this.lastPointersCount_) {\n            if (this.kinetic_) {\n                this.kinetic_.update(centroid[0], centroid[1]);\n            }\n            if (this.lastCentroid) {\n                var delta = [\n                    this.lastCentroid[0] - centroid[0],\n                    centroid[1] - this.lastCentroid[1],\n                ];\n                var map = mapBrowserEvent.map;\n                var view = map.getView();\n                scaleCoordinate(delta, view.getResolution());\n                rotateCoordinate(delta, view.getRotation());\n                view.adjustCenterInternal(delta);\n            }\n        }\n        else if (this.kinetic_) {\n            // reset so we don't overestimate the kinetic energy after\n            // after one finger down, tiny drag, second finger down\n            this.kinetic_.begin();\n        }\n        this.lastCentroid = centroid;\n        this.lastPointersCount_ = targetPointers.length;\n        mapBrowserEvent.originalEvent.preventDefault();\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    DragPan.prototype.handleUpEvent = function (mapBrowserEvent) {\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        if (this.targetPointers.length === 0) {\n            if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n                var distance = this.kinetic_.getDistance();\n                var angle = this.kinetic_.getAngle();\n                var center = view.getCenterInternal();\n                var centerpx = map.getPixelFromCoordinateInternal(center);\n                var dest = map.getCoordinateFromPixelInternal([\n                    centerpx[0] - distance * Math.cos(angle),\n                    centerpx[1] - distance * Math.sin(angle),\n                ]);\n                view.animateInternal({\n                    center: view.getConstrainedCenter(dest),\n                    duration: 500,\n                    easing: easeOut,\n                });\n            }\n            if (this.panning_) {\n                this.panning_ = false;\n                view.endInteraction();\n            }\n            return false;\n        }\n        else {\n            if (this.kinetic_) {\n                // reset so we don't overestimate the kinetic energy after\n                // after one finger up, tiny drag, second finger up\n                this.kinetic_.begin();\n            }\n            this.lastCentroid = null;\n            return true;\n        }\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    DragPan.prototype.handleDownEvent = function (mapBrowserEvent) {\n        if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n            var map = mapBrowserEvent.map;\n            var view = map.getView();\n            this.lastCentroid = null;\n            // stop any current animation\n            if (view.getAnimating()) {\n                view.cancelAnimations();\n            }\n            if (this.kinetic_) {\n                this.kinetic_.begin();\n            }\n            // No kinetic as soon as more than one pointer on the screen is\n            // detected. This is to prevent nasty pans after pinch.\n            this.noKinetic_ = this.targetPointers.length > 1;\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    return DragPan;\n}(PointerInteraction));\nexport default DragPan;\n//# sourceMappingURL=DragPan.js.map"]},"metadata":{},"sourceType":"module"}