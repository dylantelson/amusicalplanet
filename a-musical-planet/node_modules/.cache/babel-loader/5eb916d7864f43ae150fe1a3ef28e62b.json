{"ast":null,"code":"/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nvar TileRange = function () {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  function TileRange(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n    /**\n     * @type {number}\n     */\n\n    this.maxX = maxX;\n    /**\n     * @type {number}\n     */\n\n    this.minY = minY;\n    /**\n     * @type {number}\n     */\n\n    this.maxY = maxY;\n  }\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n\n\n  TileRange.prototype.contains = function (tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n\n\n  TileRange.prototype.containsTileRange = function (tileRange) {\n    return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n  };\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n\n\n  TileRange.prototype.containsXY = function (x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n\n\n  TileRange.prototype.equals = function (tileRange) {\n    return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n\n\n  TileRange.prototype.extend = function (tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  };\n  /**\n   * @return {number} Height.\n   */\n\n\n  TileRange.prototype.getHeight = function () {\n    return this.maxY - this.minY + 1;\n  };\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n\n\n  TileRange.prototype.getSize = function () {\n    return [this.getWidth(), this.getHeight()];\n  };\n  /**\n   * @return {number} Width.\n   */\n\n\n  TileRange.prototype.getWidth = function () {\n    return this.maxX - this.minX + 1;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n\n\n  TileRange.prototype.intersects = function (tileRange) {\n    return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n  };\n\n  return TileRange;\n}();\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\n\n\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  } else {\n    return new TileRange(minX, maxX, minY, maxY);\n  }\n}\nexport default TileRange;","map":{"version":3,"sources":["src/TileRange.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/TileRange\n */\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nvar TileRange = /** @class */ (function () {\n    /**\n     * @param {number} minX Minimum X.\n     * @param {number} maxX Maximum X.\n     * @param {number} minY Minimum Y.\n     * @param {number} maxY Maximum Y.\n     */\n    function TileRange(minX, maxX, minY, maxY) {\n        /**\n         * @type {number}\n         */\n        this.minX = minX;\n        /**\n         * @type {number}\n         */\n        this.maxX = maxX;\n        /**\n         * @type {number}\n         */\n        this.minY = minY;\n        /**\n         * @type {number}\n         */\n        this.maxY = maxY;\n    }\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @return {boolean} Contains tile coordinate.\n     */\n    TileRange.prototype.contains = function (tileCoord) {\n        return this.containsXY(tileCoord[1], tileCoord[2]);\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Contains.\n     */\n    TileRange.prototype.containsTileRange = function (tileRange) {\n        return (this.minX <= tileRange.minX &&\n            tileRange.maxX <= this.maxX &&\n            this.minY <= tileRange.minY &&\n            tileRange.maxY <= this.maxY);\n    };\n    /**\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @return {boolean} Contains coordinate.\n     */\n    TileRange.prototype.containsXY = function (x, y) {\n        return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Equals.\n     */\n    TileRange.prototype.equals = function (tileRange) {\n        return (this.minX == tileRange.minX &&\n            this.minY == tileRange.minY &&\n            this.maxX == tileRange.maxX &&\n            this.maxY == tileRange.maxY);\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     */\n    TileRange.prototype.extend = function (tileRange) {\n        if (tileRange.minX < this.minX) {\n            this.minX = tileRange.minX;\n        }\n        if (tileRange.maxX > this.maxX) {\n            this.maxX = tileRange.maxX;\n        }\n        if (tileRange.minY < this.minY) {\n            this.minY = tileRange.minY;\n        }\n        if (tileRange.maxY > this.maxY) {\n            this.maxY = tileRange.maxY;\n        }\n    };\n    /**\n     * @return {number} Height.\n     */\n    TileRange.prototype.getHeight = function () {\n        return this.maxY - this.minY + 1;\n    };\n    /**\n     * @return {import(\"./size.js\").Size} Size.\n     */\n    TileRange.prototype.getSize = function () {\n        return [this.getWidth(), this.getHeight()];\n    };\n    /**\n     * @return {number} Width.\n     */\n    TileRange.prototype.getWidth = function () {\n        return this.maxX - this.minX + 1;\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Intersects.\n     */\n    TileRange.prototype.intersects = function (tileRange) {\n        return (this.minX <= tileRange.maxX &&\n            this.maxX >= tileRange.minX &&\n            this.minY <= tileRange.maxY &&\n            this.maxY >= tileRange.minY);\n    };\n    return TileRange;\n}());\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n    if (tileRange !== undefined) {\n        tileRange.minX = minX;\n        tileRange.maxX = maxX;\n        tileRange.minY = minY;\n        tileRange.maxY = maxY;\n        return tileRange;\n    }\n    else {\n        return new TileRange(minX, maxX, minY, maxY);\n    }\n}\nexport default TileRange;\n//# sourceMappingURL=TileRange.js.map"]},"metadata":{},"sourceType":"module"}