{"ast":null,"code":"/**\n * @module ol/loadingstrategy\n */\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\n\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\n\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution) {\n      var z = tileGrid.getZForResolution(resolution);\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n\n      var extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n\n      var tileCoord = [z, 0, 0];\n\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(tileGrid.getTileCoordExtent(tileCoord));\n        }\n      }\n\n      return extents;\n    }\n  );\n}","map":{"version":3,"sources":["src/loadingstrategy.js"],"names":[],"mappings":"AAAA;;AAEG;;AAEH;;;;;;AAMG;AACH,OAAM,SAAU,GAAV,CAAc,MAAd,EAAsB,UAAtB,EAAgC;AACpC,SAAO,CAAC,CAAC,CAAC,QAAF,EAAY,CAAC,QAAb,EAAuB,QAAvB,EAAiC,QAAjC,CAAD,CAAP;AACD;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,IAAV,CAAe,MAAf,EAAuB,UAAvB,EAAiC;AACrC,SAAO,CAAC,MAAD,CAAP;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,IAAV,CAAe,QAAf,EAAuB;AAC3B;AACE;;;;AAIG;AACH,cAAU,MAAV,EAAkB,UAAlB,EAA4B;AAC1B,UAAM,CAAC,GAAG,QAAQ,CAAC,iBAAT,CAA2B,UAA3B,CAAV;AACA,UAAM,SAAS,GAAG,QAAQ,CAAC,yBAAT,CAAmC,MAAnC,EAA2C,CAA3C,CAAlB;AACA;;AACA,UAAM,OAAO,GAAG,EAAhB;AACA;;AACA,UAAM,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlB;;AACA,WACE,SAAS,CAAC,CAAD,CAAT,GAAe,SAAS,CAAC,IAD3B,EAEE,SAAS,CAAC,CAAD,CAAT,IAAgB,SAAS,CAAC,IAF5B,EAGE,EAAE,SAAS,CAAC,CAAD,CAHb,EAIE;AACA,aACE,SAAS,CAAC,CAAD,CAAT,GAAe,SAAS,CAAC,IAD3B,EAEE,SAAS,CAAC,CAAD,CAAT,IAAgB,SAAS,CAAC,IAF5B,EAGE,EAAE,SAAS,CAAC,CAAD,CAHb,EAIE;AACA,UAAA,OAAO,CAAC,IAAR,CAAa,QAAQ,CAAC,kBAAT,CAA4B,SAA5B,CAAb;AACD;AACF;;AACD,aAAO,OAAP;AACD;AA3BH;AA6BD","sourceRoot":"","sourcesContent":["/**\n * @module ol/loadingstrategy\n */\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n    return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n    return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n    return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution) {\n        var z = tileGrid.getZForResolution(resolution);\n        var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n        /** @type {Array<import(\"./extent.js\").Extent>} */\n        var extents = [];\n        /** @type {import(\"./tilecoord.js\").TileCoord} */\n        var tileCoord = [z, 0, 0];\n        for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n            for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n                extents.push(tileGrid.getTileCoordExtent(tileCoord));\n            }\n        }\n        return extents;\n    });\n}\n//# sourceMappingURL=loadingstrategy.js.map"]},"metadata":{},"sourceType":"module"}