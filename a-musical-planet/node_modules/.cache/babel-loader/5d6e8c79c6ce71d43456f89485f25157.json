{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/Play.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport MapPage from \"./MapPage\";\nimport GuessPopup from \"./GuessPopup\";\nimport CountryGuessInfo from \"./CountryGuessInfo.js\";\nimport \"./Play.scss\";\nimport haversine from \"haversine-distance\";\nimport getCookie from \"./GetCookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\n\nconst countries = require(\"./WorldInfo.json\");\n\nconst mapProps = require(\"./MapProps.json\");\n\nconst Play = ({\n  accessToken,\n  setAccessToken,\n  currMap,\n  sendScoreToServer\n}) => {\n  _s();\n\n  const [currTrack, setCurrTrack] = useState({\n    round: 0\n  });\n  const [redirect, setRedirect] = useState(\"\");\n  const [currChosen, setCurrChosen] = useState(\"\");\n  const [myCurrPos, setMyCurrPos] = useState(currMap.slice(0, 5) === \"world\" ? {\n    zoom: mapProps.world.minZoom,\n    coordinates: mapProps.world.coordinates\n  } : {\n    zoom: mapProps[currMap].minZoom,\n    coordinates: mapProps[currMap].coordinates\n  });\n\n  const handleNewChosen = (newChosen, mapPos) => {\n    setMyCurrPos(mapPos);\n    setCurrChosen(newChosen);\n  }; //first value is a bool on whether to show popup,\n  //second is the score to show\n\n\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0,\n    sessionInfo: []\n  });\n  const audioRef = useRef(null);\n\n  const newGame = () => {\n    nextTrack();\n    setPopup({\n      show: false,\n      roundScore: 0,\n      sessionScore: 0,\n      sessionInfo: []\n    });\n  };\n\n  const nextTrack = () => {\n    setPopup({ ...popup,\n      show: false,\n      roundScore: 0\n    });\n    setCurrChosen(\"\");\n\n    if (accessToken === null || accessToken === \"\") {\n      const accessTokenCookie = getCookie(\"accessToken\"); // const refreshTokenCookie = getCookie(\"refreshToken\");\n\n      if (accessTokenCookie !== \"\") {\n        console.log(\"GOT COOKIE!\", accessTokenCookie);\n        setAccessToken(accessTokenCookie);\n        return setRedirect(\"maps\");\n      } // if (refreshTokenCookie !== \"\") {\n      //   refreshTokens(refreshTokenCookie);\n      // }\n\n\n      console.log(\"Could not find cookie\");\n      return setRedirect(\"login\");\n    }\n\n    let relevantPlaylists = Playlists[currMap];\n\n    if (currMap.slice(0, 5) === \"world\") {\n      if (currMap.slice(5) === \"Easy\") relevantPlaylists = Playlists.world.filter(country => country.difficulty === \"Easy\");else if (currMap.slice(5) === \"Medium\") {\n        relevantPlaylists = Playlists.world.filter(country => country.difficulty === \"Easy\" || country.difficulty === \"Medium\");\n      } else relevantPlaylists = Playlists.world;\n    }\n\n    let currPlaylistIndex = Math.floor(Math.random() * relevantPlaylists.length);\n\n    if (relevantPlaylists[currPlaylistIndex].country === currTrack.location) {\n      nextTrack();\n      return; // if (currPlaylistIndex > 0) currPlaylistIndex--;\n      // else currPlaylistIndex++;\n    }\n\n    fetch(`https://api.spotify.com/v1/playlists/${relevantPlaylists[currPlaylistIndex].playlistId}`, {\n      headers: {\n        Authorization: \"Bearer \" + accessToken\n      }\n    }).then(response => {\n      console.log(response.status);\n      if (response.status >= 400) throw response;\n      return response.json();\n    }).then(data => {\n      let track = \"\";\n      let trackIndex = 0;\n\n      while (track === \"\") {\n        trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n        track = data.tracks.items[trackIndex].track;\n\n        if (track.preview_url === null) {\n          console.log(\"Track\", data.tracks.items[trackIndex].track.name, \"in country\", data.name, \"has no preview url\");\n          track = \"\";\n        }\n      }\n\n      console.log(track);\n      setCurrTrack({\n        url: track.preview_url,\n        artist: data.tracks.items[trackIndex].track.artists[0].name,\n        album: data.tracks.items[trackIndex].track.album.name,\n        image: data.tracks.items[trackIndex].track.album.images[0].url,\n        location: data.name,\n        name: data.tracks.items[trackIndex].track.name,\n        round: currTrack.round < 5 ? currTrack.round + 1 : 1,\n        id: data.tracks.items[trackIndex].track.id\n      });\n      audioRef.current.load();\n      audioRef.current.play();\n    }).catch(err => {\n      console.log(\"ERROR LOADING TRACK FROM COUNTRY\", relevantPlaylists[currPlaylistIndex].country);\n      console.log(\"err\", err);\n      console.log(\"err status\", err.status);\n      if (err.status === 400 || err.status === 401) return window.location.replace(\"http://localhost:8888/getNewToken\");\n      if (err.status === 404) return nextTrack(); //this is only really for error 401, meaning\n\n      return setRedirect(\"maps\");\n    });\n  };\n\n  const guessGiven = () => {\n    audioRef.current.pause();\n    const currTrackCountry = countries.filter(function (country) {\n      return country.name.common === currTrack.location;\n    })[0];\n\n    if (currChosen === currTrack.location) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore,\n        sessionInfo: [...popup.sessionInfo, {\n          country: currTrack.location,\n          songId: currTrack.id,\n          correct: true,\n          score: 5000,\n          code: currTrackCountry.cca2.toLowerCase()\n        }]\n      });\n      return;\n    }\n\n    const currTrackCountryCoords = currTrackCountry.latlng;\n    const chosenCountryCoords = countries.filter(function (country) {\n      return country.name.common === currChosen;\n    })[0].latlng;\n    let scoreDeduction = Math.ceil(haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2);\n    console.log(\"Initial deduction\", scoreDeduction);\n\n    switch (currMap) {\n      case \"Europe\":\n        scoreDeduction *= 4;\n        break;\n\n      case \"SouthAmerica\":\n        scoreDeduction *= 4;\n        break;\n\n      case \"NorthAmerica\":\n        scoreDeduction *= 3;\n        break;\n\n      case \"Asia\":\n        scoreDeduction *= 2;\n        break;\n\n      case \"Oceania\":\n        scoreDeduction *= 2;\n        break;\n\n      case \"Africa\":\n        scoreDeduction *= 2;\n        break;\n\n      default:\n        break;\n    }\n\n    console.log(\"Final deduction\", scoreDeduction);\n    let score = maxScore - scoreDeduction;\n    if (score < 0) score = 0;\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score,\n      sessionInfo: [...popup.sessionInfo, {\n        country: currTrack.location,\n        songId: currTrack.id,\n        correct: false,\n        score: score,\n        code: currTrackCountry.cca2.toLowerCase()\n      }]\n    }); // if (currTrack.location === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.location}!`);\n    // }\n    // getNewArtist();\n  };\n\n  useEffect(() => {\n    nextTrack();\n  }, []);\n\n  if (redirect !== \"\") {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `/${redirect}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 12\n    }, this);\n  } // if (redirect === \"login\") {\n  //   return <Redirect to=\"/login\" />;\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\",\n        children: /*#__PURE__*/_jsxDEV(CountryGuessInfo, {\n          currChosen: currChosen,\n          guessGiven: guessGiven,\n          audioRef: audioRef,\n          trackURL: currTrack.url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-div\",\n        children: /*#__PURE__*/_jsxDEV(MapPage, {\n          myCurrPos: myCurrPos,\n          handleNewChosen: handleNewChosen,\n          currChosen: currChosen,\n          currMap: currMap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GuessPopup, {\n        show: popup.show,\n        currMap: currMap,\n        currTrack: currTrack,\n        currChosen: currChosen,\n        nextTrack: nextTrack,\n        roundScore: popup.roundScore,\n        sessionScore: popup.sessionScore,\n        sessionInfo: popup.sessionInfo,\n        sendScoreToServer: sendScoreToServer,\n        newGame: newGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Play, \"awl/xxGdcdmr+QmWUrkCDJQETpA=\");\n\n_c = Play;\nexport default Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/Play.js"],"names":["React","useState","useEffect","useRef","Redirect","MapPage","GuessPopup","CountryGuessInfo","haversine","getCookie","maxScore","Playlists","require","countries","mapProps","Play","accessToken","setAccessToken","currMap","sendScoreToServer","currTrack","setCurrTrack","round","redirect","setRedirect","currChosen","setCurrChosen","myCurrPos","setMyCurrPos","slice","zoom","world","minZoom","coordinates","handleNewChosen","newChosen","mapPos","popup","setPopup","show","roundScore","sessionScore","sessionInfo","audioRef","newGame","nextTrack","accessTokenCookie","console","log","relevantPlaylists","filter","country","difficulty","currPlaylistIndex","Math","floor","random","length","location","fetch","playlistId","headers","Authorization","then","response","status","json","data","track","trackIndex","tracks","items","preview_url","name","url","artist","artists","album","image","images","id","current","load","play","catch","err","window","replace","guessGiven","pause","currTrackCountry","common","songId","correct","score","code","cca2","toLowerCase","currTrackCountryCoords","latlng","chosenCountryCoords","scoreDeduction","ceil"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport MapPage from \"./MapPage\";\nimport GuessPopup from \"./GuessPopup\";\nimport CountryGuessInfo from \"./CountryGuessInfo.js\";\nimport \"./Play.scss\";\nimport haversine from \"haversine-distance\";\n\nimport getCookie from \"./GetCookie\";\n\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\nconst countries = require(\"./WorldInfo.json\");\nconst mapProps = require(\"./MapProps.json\");\n\nconst Play = ({ accessToken, setAccessToken, currMap, sendScoreToServer }) => {\n  const [currTrack, setCurrTrack] = useState({ round: 0 });\n  const [redirect, setRedirect] = useState(\"\");\n\n  const [currChosen, setCurrChosen] = useState(\"\");\n\n  const [myCurrPos, setMyCurrPos] = useState(currMap.slice(0,5) === \"world\" ? {zoom: mapProps.world.minZoom, coordinates: mapProps.world.coordinates} : {zoom: mapProps[currMap].minZoom, coordinates: mapProps[currMap].coordinates});\n\n  const handleNewChosen = (newChosen, mapPos) => {\n    setMyCurrPos(mapPos);\n    setCurrChosen(newChosen);\n  }\n\n  //first value is a bool on whether to show popup,\n  //second is the score to show\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0,\n    sessionInfo: [],\n  });\n\n  const audioRef = useRef(null);\n\n  const newGame = () => {\n    nextTrack();\n    setPopup({\n      show: false,\n      roundScore: 0,\n      sessionScore: 0,\n      sessionInfo: [],\n    });\n  };\n\n  const nextTrack = () => {\n    setPopup({\n      ...popup,\n      show: false,\n      roundScore: 0,\n    });\n    setCurrChosen(\"\");\n    if (accessToken === null || accessToken === \"\") {\n      const accessTokenCookie = getCookie(\"accessToken\");\n      // const refreshTokenCookie = getCookie(\"refreshToken\");\n      if (accessTokenCookie !== \"\") {\n        console.log(\"GOT COOKIE!\", accessTokenCookie);\n        setAccessToken(accessTokenCookie);\n        return setRedirect(\"maps\");\n      }\n      // if (refreshTokenCookie !== \"\") {\n      //   refreshTokens(refreshTokenCookie);\n      // }\n      console.log(\"Could not find cookie\");\n      return setRedirect(\"login\");\n    }\n\n    let relevantPlaylists = Playlists[currMap];\n    if (currMap.slice(0, 5) === \"world\") {\n      if (currMap.slice(5) === \"Easy\")\n        relevantPlaylists = Playlists.world.filter(\n          (country) => country.difficulty === \"Easy\"\n        );\n      else if (currMap.slice(5) === \"Medium\") {\n        relevantPlaylists = Playlists.world.filter(\n          (country) =>\n            country.difficulty === \"Easy\" || country.difficulty === \"Medium\"\n        );\n      } else relevantPlaylists = Playlists.world;\n    }\n\n    let currPlaylistIndex = Math.floor(\n      Math.random() * relevantPlaylists.length\n    );\n\n    if (relevantPlaylists[currPlaylistIndex].country === currTrack.location) {\n      nextTrack();\n      return;\n      // if (currPlaylistIndex > 0) currPlaylistIndex--;\n      // else currPlaylistIndex++;\n    }\n    fetch(\n      `https://api.spotify.com/v1/playlists/${relevantPlaylists[currPlaylistIndex].playlistId}`,\n      {\n        headers: { Authorization: \"Bearer \" + accessToken },\n      }\n    )\n      .then((response) => {\n        console.log(response.status);\n        if (response.status >= 400) throw response;\n        return response.json();\n      })\n      .then((data) => {\n        let track = \"\";\n        let trackIndex = 0;\n        while (track === \"\") {\n          trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n          track = data.tracks.items[trackIndex].track;\n          if (track.preview_url === null) {\n            console.log(\n              \"Track\",\n              data.tracks.items[trackIndex].track.name,\n              \"in country\",\n              data.name,\n              \"has no preview url\"\n            );\n            track = \"\";\n          }\n        }\n        console.log(track);\n        setCurrTrack({\n          url: track.preview_url,\n          artist: data.tracks.items[trackIndex].track.artists[0].name,\n          album: data.tracks.items[trackIndex].track.album.name,\n          image: data.tracks.items[trackIndex].track.album.images[0].url,\n          location: data.name,\n          name: data.tracks.items[trackIndex].track.name,\n          round: currTrack.round < 5 ? currTrack.round + 1 : 1,\n          id: data.tracks.items[trackIndex].track.id,\n        });\n        audioRef.current.load();\n        audioRef.current.play();\n      })\n      .catch((err) => {\n        console.log(\n          \"ERROR LOADING TRACK FROM COUNTRY\",\n          relevantPlaylists[currPlaylistIndex].country\n        );\n        console.log(\"err\", err);\n        console.log(\"err status\", err.status);\n        if (err.status === 400 || err.status === 401)\n          return window.location.replace(\"http://localhost:8888/getNewToken\");\n        if (err.status === 404) return nextTrack();\n        //this is only really for error 401, meaning\n        return setRedirect(\"maps\");\n      });\n  };\n\n  const guessGiven = () => {\n    audioRef.current.pause();\n    const currTrackCountry = countries.filter(function (country) {\n      return country.name.common === currTrack.location;\n    })[0];\n    if (currChosen === currTrack.location) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore,\n        sessionInfo: [\n          ...popup.sessionInfo,\n          {\n            country: currTrack.location,\n            songId: currTrack.id,\n            correct: true,\n            score: 5000,\n            code: currTrackCountry.cca2.toLowerCase(),\n          },\n        ],\n      });\n      return;\n    }\n\n    const currTrackCountryCoords = currTrackCountry.latlng;\n\n    const chosenCountryCoords = countries.filter(function (country) {\n      return country.name.common === currChosen;\n    })[0].latlng;\n\n    let scoreDeduction = Math.ceil(\n      haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2\n    );\n\n    console.log(\"Initial deduction\", scoreDeduction);\n\n    switch (currMap) {\n      case \"Europe\":\n        scoreDeduction *= 4;\n        break;\n      case \"SouthAmerica\":\n        scoreDeduction *= 4;\n        break;\n      case \"NorthAmerica\":\n        scoreDeduction *= 3;\n        break;\n      case \"Asia\":\n        scoreDeduction *= 2;\n        break;\n      case \"Oceania\":\n        scoreDeduction *= 2;\n        break;\n      case \"Africa\":\n        scoreDeduction *= 2;\n        break;\n      default:\n        break;\n    }\n\n    console.log(\"Final deduction\", scoreDeduction);\n\n    let score = maxScore - scoreDeduction;\n    if (score < 0) score = 0;\n\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score,\n      sessionInfo: [\n        ...popup.sessionInfo,\n        {\n          country: currTrack.location,\n          songId: currTrack.id,\n          correct: false,\n          score: score,\n          code: currTrackCountry.cca2.toLowerCase(),\n        },\n      ],\n    });\n    // if (currTrack.location === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.location}!`);\n    // }\n    // getNewArtist();\n  };\n\n  useEffect(() => {\n    nextTrack();\n  }, []);\n\n  if (redirect !== \"\") {\n    return <Redirect to={`/${redirect}`} />;\n  }\n  // if (redirect === \"login\") {\n  //   return <Redirect to=\"/login\" />;\n  // }\n  return (\n    <>\n      <div className=\"play-section\">\n        <div className=\"overlay\">\n          <CountryGuessInfo\n            currChosen={currChosen}\n            guessGiven={guessGiven}\n            audioRef={audioRef}\n            trackURL={currTrack.url}\n          />\n        </div>\n        <div className=\"map-div\">\n          <MapPage\n            myCurrPos={myCurrPos}\n            handleNewChosen={handleNewChosen}\n            currChosen={currChosen}\n            currMap={currMap}\n          />\n        </div>\n        <GuessPopup\n          show={popup.show}\n          currMap={currMap}\n          currTrack={currTrack}\n          currChosen={currChosen}\n          nextTrack={nextTrack}\n          roundScore={popup.roundScore}\n          sessionScore={popup.sessionScore}\n          sessionInfo={popup.sessionInfo}\n          sendScoreToServer={sendScoreToServer}\n          newGame={newGame}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}