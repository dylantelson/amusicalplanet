{"ast":null,"code":"/**\n * @module ol/style/IconImageCache\n */\nimport { asString } from '../color.js';\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.\n */\n\nvar IconImageCache = function () {\n  function IconImageCache() {\n    /**\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\n     * @private\n     */\n    this.cache_ = {};\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.cacheSize_ = 0;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.maxCacheSize_ = 32;\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  IconImageCache.prototype.clear = function () {\n    this.cache_ = {};\n    this.cacheSize_ = 0;\n  };\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  IconImageCache.prototype.canExpireCache = function () {\n    return this.cacheSize_ > this.maxCacheSize_;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  IconImageCache.prototype.expire = function () {\n    if (this.canExpireCache()) {\n      var i = 0;\n\n      for (var key in this.cache_) {\n        var iconImage = this.cache_[key];\n\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n          delete this.cache_[key];\n          --this.cacheSize_;\n        }\n      }\n    }\n  };\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @return {import(\"./IconImage.js\").default} Icon image.\n   */\n\n\n  IconImageCache.prototype.get = function (src, crossOrigin, color) {\n    var key = getKey(src, crossOrigin, color);\n    return key in this.cache_ ? this.cache_[key] : null;\n  };\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n   */\n\n\n  IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {\n    var key = getKey(src, crossOrigin, color);\n    this.cache_[key] = iconImage;\n    ++this.cacheSize_;\n  };\n  /**\n   * Set the cache size of the icon cache. Default is `32`. Change this value when\n   * your map uses more than 32 different icon images and you are not caching icon\n   * styles on the application level.\n   * @param {number} maxCacheSize Cache max size.\n   * @api\n   */\n\n\n  IconImageCache.prototype.setSize = function (maxCacheSize) {\n    this.maxCacheSize_ = maxCacheSize;\n    this.expire();\n  };\n\n  return IconImageCache;\n}();\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\n\n\nfunction getKey(src, crossOrigin, color) {\n  var colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\n\nexport default IconImageCache;\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\n\nexport var shared = new IconImageCache();","map":{"version":3,"sources":["../src/style/IconImageCache.js"],"names":[],"mappings":"AAAA;;AAEG;AACH,SAAQ,QAAR,QAAuB,aAAvB;AAEA;;;AAGG;;AACH,IAAA,cAAA,GAAA,YAAA;AACE,WAAA,cAAA,GAAA;AACE;;;AAGG;AACH,SAAK,MAAL,GAAc,EAAd;AAEA;;;AAGG;;AACH,SAAK,UAAL,GAAkB,CAAlB;AAEA;;;AAGG;;AACH,SAAK,aAAL,GAAqB,EAArB;AACD;AAED;;AAEG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,SAAK,MAAL,GAAc,EAAd;AACA,SAAK,UAAL,GAAkB,CAAlB;AACD,GAHD;AAKA;;AAEG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,WAAO,KAAK,UAAL,GAAkB,KAAK,aAA9B;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAI,KAAK,cAAL,EAAJ,EAA2B;AACzB,UAAI,CAAC,GAAG,CAAR;;AACA,WAAK,IAAM,GAAX,IAAkB,KAAK,MAAvB,EAA+B;AAC7B,YAAM,SAAS,GAAG,KAAK,MAAL,CAAY,GAAZ,CAAlB;;AACA,YAAI,CAAC,CAAC,KAAK,CAAP,MAAc,CAAd,IAAmB,CAAC,SAAS,CAAC,WAAV,EAAxB,EAAiD;AAC/C,iBAAO,KAAK,MAAL,CAAY,GAAZ,CAAP;AACA,YAAE,KAAK,UAAP;AACD;AACF;AACF;AACF,GAXD;AAaA;;;;;AAKG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,GAAJ,EAAS,WAAT,EAAsB,KAAtB,EAA2B;AACzB,QAAM,GAAG,GAAG,MAAM,CAAC,GAAD,EAAM,WAAN,EAAmB,KAAnB,CAAlB;AACA,WAAO,GAAG,IAAI,KAAK,MAAZ,GAAqB,KAAK,MAAL,CAAY,GAAZ,CAArB,GAAwC,IAA/C;AACD,GAHD;AAKA;;;;;AAKG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,GAAJ,EAAS,WAAT,EAAsB,KAAtB,EAA6B,SAA7B,EAAsC;AACpC,QAAM,GAAG,GAAG,MAAM,CAAC,GAAD,EAAM,WAAN,EAAmB,KAAnB,CAAlB;AACA,SAAK,MAAL,CAAY,GAAZ,IAAmB,SAAnB;AACA,MAAE,KAAK,UAAP;AACD,GAJD;AAMA;;;;;;AAMG;;;AACH,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,YAAR,EAAoB;AAClB,SAAK,aAAL,GAAqB,YAArB;AACA,SAAK,MAAL;AACD,GAHD;;AAIF,SAAA,cAAA;AAAC,CAtFD,EAAA;AAwFA;;;;;AAKG;;;AACH,SAAS,MAAT,CAAgB,GAAhB,EAAqB,WAArB,EAAkC,KAAlC,EAAuC;AACrC,MAAM,WAAW,GAAG,KAAK,GAAG,QAAQ,CAAC,KAAD,CAAX,GAAqB,MAA9C;AACA,SAAO,WAAW,GAAG,GAAd,GAAoB,GAApB,GAA0B,GAA1B,GAAgC,WAAvC;AACD;;AAED,eAAe,cAAf;AAEA;;;;AAIG;;AACH,OAAO,IAAM,MAAM,GAAG,IAAI,cAAJ,EAAf","sourceRoot":"","sourcesContent":["/**\n * @module ol/style/IconImageCache\n */\nimport { asString } from '../color.js';\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.\n */\nvar IconImageCache = /** @class */ (function () {\n    function IconImageCache() {\n        /**\n         * @type {!Object<string, import(\"./IconImage.js\").default>}\n         * @private\n         */\n        this.cache_ = {};\n        /**\n         * @type {number}\n         * @private\n         */\n        this.cacheSize_ = 0;\n        /**\n         * @type {number}\n         * @private\n         */\n        this.maxCacheSize_ = 32;\n    }\n    /**\n     * FIXME empty description for jsdoc\n     */\n    IconImageCache.prototype.clear = function () {\n        this.cache_ = {};\n        this.cacheSize_ = 0;\n    };\n    /**\n     * @return {boolean} Can expire cache.\n     */\n    IconImageCache.prototype.canExpireCache = function () {\n        return this.cacheSize_ > this.maxCacheSize_;\n    };\n    /**\n     * FIXME empty description for jsdoc\n     */\n    IconImageCache.prototype.expire = function () {\n        if (this.canExpireCache()) {\n            var i = 0;\n            for (var key in this.cache_) {\n                var iconImage = this.cache_[key];\n                if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n                    delete this.cache_[key];\n                    --this.cacheSize_;\n                }\n            }\n        }\n    };\n    /**\n     * @param {string} src Src.\n     * @param {?string} crossOrigin Cross origin.\n     * @param {import(\"../color.js\").Color} color Color.\n     * @return {import(\"./IconImage.js\").default} Icon image.\n     */\n    IconImageCache.prototype.get = function (src, crossOrigin, color) {\n        var key = getKey(src, crossOrigin, color);\n        return key in this.cache_ ? this.cache_[key] : null;\n    };\n    /**\n     * @param {string} src Src.\n     * @param {?string} crossOrigin Cross origin.\n     * @param {import(\"../color.js\").Color} color Color.\n     * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n     */\n    IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {\n        var key = getKey(src, crossOrigin, color);\n        this.cache_[key] = iconImage;\n        ++this.cacheSize_;\n    };\n    /**\n     * Set the cache size of the icon cache. Default is `32`. Change this value when\n     * your map uses more than 32 different icon images and you are not caching icon\n     * styles on the application level.\n     * @param {number} maxCacheSize Cache max size.\n     * @api\n     */\n    IconImageCache.prototype.setSize = function (maxCacheSize) {\n        this.maxCacheSize_ = maxCacheSize;\n        this.expire();\n    };\n    return IconImageCache;\n}());\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\nfunction getKey(src, crossOrigin, color) {\n    var colorString = color ? asString(color) : 'null';\n    return crossOrigin + ':' + src + ':' + colorString;\n}\nexport default IconImageCache;\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\nexport var shared = new IconImageCache();\n//# sourceMappingURL=IconImageCache.js.map"]},"metadata":{},"sourceType":"module"}