{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/render/canvas/PolygonBuilder\n */\n\n\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction, { beginPathInstruction, closePathInstruction, fillInstruction, strokeInstruction } from './Instruction.js';\nimport { defaultFillStyle } from '../canvas.js';\nimport { snap } from '../../geom/flat/simplify.js';\n\nvar CanvasPolygonBuilder = function (_super) {\n  __extends(CanvasPolygonBuilder, _super);\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n\n\n  function CanvasPolygonBuilder(tolerance, maxExtent, resolution, pixelRatio) {\n    return _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;\n  }\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n\n\n  CanvasPolygonBuilder.prototype.drawFlatCoordinatess_ = function (flatCoordinates, offset, ends, stride) {\n    var state = this.state;\n    var fill = state.fillStyle !== undefined;\n    var stroke = state.strokeStyle !== undefined;\n    var numEnds = ends.length;\n    this.instructions.push(beginPathInstruction);\n    this.hitDetectionInstructions.push(beginPathInstruction);\n\n    for (var i = 0; i < numEnds; ++i) {\n      var end = ends[i];\n      var myBegin = this.coordinates.length;\n      var myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, true, !stroke);\n      var moveToLineToInstruction = [CanvasInstruction.MOVE_TO_LINE_TO, myBegin, myEnd];\n      this.instructions.push(moveToLineToInstruction);\n      this.hitDetectionInstructions.push(moveToLineToInstruction);\n\n      if (stroke) {\n        // Performance optimization: only call closePath() when we have a stroke.\n        // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\n        this.instructions.push(closePathInstruction);\n        this.hitDetectionInstructions.push(closePathInstruction);\n      }\n\n      offset = end;\n    }\n\n    if (fill) {\n      this.instructions.push(fillInstruction);\n      this.hitDetectionInstructions.push(fillInstruction);\n    }\n\n    if (stroke) {\n      this.instructions.push(strokeInstruction);\n      this.hitDetectionInstructions.push(strokeInstruction);\n    }\n\n    return offset;\n  };\n  /**\n   * @param {import(\"../../geom/Circle.js\").default} circleGeometry Circle geometry.\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   */\n\n\n  CanvasPolygonBuilder.prototype.drawCircle = function (circleGeometry, feature) {\n    var state = this.state;\n    var fillStyle = state.fillStyle;\n    var strokeStyle = state.strokeStyle;\n\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n\n    this.setFillStrokeStyles_();\n    this.beginGeometry(circleGeometry, feature);\n\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([CanvasInstruction.SET_FILL_STYLE, defaultFillStyle]);\n    }\n\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin, state.miterLimit, state.lineDash, state.lineDashOffset]);\n    }\n\n    var flatCoordinates = circleGeometry.getFlatCoordinates();\n    var stride = circleGeometry.getStride();\n    var myBegin = this.coordinates.length;\n    this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);\n    var circleInstruction = [CanvasInstruction.CIRCLE, myBegin];\n    this.instructions.push(beginPathInstruction, circleInstruction);\n    this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);\n\n    if (state.fillStyle !== undefined) {\n      this.instructions.push(fillInstruction);\n      this.hitDetectionInstructions.push(fillInstruction);\n    }\n\n    if (state.strokeStyle !== undefined) {\n      this.instructions.push(strokeInstruction);\n      this.hitDetectionInstructions.push(strokeInstruction);\n    }\n\n    this.endGeometry(feature);\n  };\n  /**\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} polygonGeometry Polygon geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n\n\n  CanvasPolygonBuilder.prototype.drawPolygon = function (polygonGeometry, feature) {\n    var state = this.state;\n    var fillStyle = state.fillStyle;\n    var strokeStyle = state.strokeStyle;\n\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n\n    this.setFillStrokeStyles_();\n    this.beginGeometry(polygonGeometry, feature);\n\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([CanvasInstruction.SET_FILL_STYLE, defaultFillStyle]);\n    }\n\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin, state.miterLimit, state.lineDash, state.lineDashOffset]);\n    }\n\n    var ends = polygonGeometry.getEnds();\n    var flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\n    var stride = polygonGeometry.getStride();\n    this.drawFlatCoordinatess_(flatCoordinates, 0, ends, stride);\n    this.endGeometry(feature);\n  };\n  /**\n   * @param {import(\"../../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n\n\n  CanvasPolygonBuilder.prototype.drawMultiPolygon = function (multiPolygonGeometry, feature) {\n    var state = this.state;\n    var fillStyle = state.fillStyle;\n    var strokeStyle = state.strokeStyle;\n\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n\n    this.setFillStrokeStyles_();\n    this.beginGeometry(multiPolygonGeometry, feature);\n\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([CanvasInstruction.SET_FILL_STYLE, defaultFillStyle]);\n    }\n\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin, state.miterLimit, state.lineDash, state.lineDashOffset]);\n    }\n\n    var endss = multiPolygonGeometry.getEndss();\n    var flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\n    var stride = multiPolygonGeometry.getStride();\n    var offset = 0;\n\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n      offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);\n    }\n\n    this.endGeometry(feature);\n  };\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n\n\n  CanvasPolygonBuilder.prototype.finish = function () {\n    this.reverseHitDetectionInstructions();\n    this.state = null; // We want to preserve topology when drawing polygons.  Polygons are\n    // simplified using quantization and point elimination. However, we might\n    // have received a mix of quantized and non-quantized geometries, so ensure\n    // that all are quantized by quantizing all coordinates in the batch.\n\n    var tolerance = this.tolerance;\n\n    if (tolerance !== 0) {\n      var coordinates = this.coordinates;\n\n      for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = snap(coordinates[i], tolerance);\n      }\n    }\n\n    return _super.prototype.finish.call(this);\n  };\n  /**\n   * @private\n   */\n\n\n  CanvasPolygonBuilder.prototype.setFillStrokeStyles_ = function () {\n    var state = this.state;\n    var fillStyle = state.fillStyle;\n\n    if (fillStyle !== undefined) {\n      this.updateFillStyle(state, this.createFill);\n    }\n\n    if (state.strokeStyle !== undefined) {\n      this.updateStrokeStyle(state, this.applyStroke);\n    }\n  };\n\n  return CanvasPolygonBuilder;\n}(CanvasBuilder);\n\nexport default CanvasPolygonBuilder;","map":{"version":3,"sources":["../../src/render/canvas/PolygonBuilder.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/render/canvas/PolygonBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction, { beginPathInstruction, closePathInstruction, fillInstruction, strokeInstruction, } from './Instruction.js';\nimport { defaultFillStyle } from '../canvas.js';\nimport { snap } from '../../geom/flat/simplify.js';\nvar CanvasPolygonBuilder = /** @class */ (function (_super) {\n    __extends(CanvasPolygonBuilder, _super);\n    /**\n     * @param {number} tolerance Tolerance.\n     * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     */\n    function CanvasPolygonBuilder(tolerance, maxExtent, resolution, pixelRatio) {\n        return _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;\n    }\n    /**\n     * @param {Array<number>} flatCoordinates Flat coordinates.\n     * @param {number} offset Offset.\n     * @param {Array<number>} ends Ends.\n     * @param {number} stride Stride.\n     * @private\n     * @return {number} End.\n     */\n    CanvasPolygonBuilder.prototype.drawFlatCoordinatess_ = function (flatCoordinates, offset, ends, stride) {\n        var state = this.state;\n        var fill = state.fillStyle !== undefined;\n        var stroke = state.strokeStyle !== undefined;\n        var numEnds = ends.length;\n        this.instructions.push(beginPathInstruction);\n        this.hitDetectionInstructions.push(beginPathInstruction);\n        for (var i = 0; i < numEnds; ++i) {\n            var end = ends[i];\n            var myBegin = this.coordinates.length;\n            var myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, true, !stroke);\n            var moveToLineToInstruction = [\n                CanvasInstruction.MOVE_TO_LINE_TO,\n                myBegin,\n                myEnd,\n            ];\n            this.instructions.push(moveToLineToInstruction);\n            this.hitDetectionInstructions.push(moveToLineToInstruction);\n            if (stroke) {\n                // Performance optimization: only call closePath() when we have a stroke.\n                // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\n                this.instructions.push(closePathInstruction);\n                this.hitDetectionInstructions.push(closePathInstruction);\n            }\n            offset = end;\n        }\n        if (fill) {\n            this.instructions.push(fillInstruction);\n            this.hitDetectionInstructions.push(fillInstruction);\n        }\n        if (stroke) {\n            this.instructions.push(strokeInstruction);\n            this.hitDetectionInstructions.push(strokeInstruction);\n        }\n        return offset;\n    };\n    /**\n     * @param {import(\"../../geom/Circle.js\").default} circleGeometry Circle geometry.\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     */\n    CanvasPolygonBuilder.prototype.drawCircle = function (circleGeometry, feature) {\n        var state = this.state;\n        var fillStyle = state.fillStyle;\n        var strokeStyle = state.strokeStyle;\n        if (fillStyle === undefined && strokeStyle === undefined) {\n            return;\n        }\n        this.setFillStrokeStyles_();\n        this.beginGeometry(circleGeometry, feature);\n        if (state.fillStyle !== undefined) {\n            this.hitDetectionInstructions.push([\n                CanvasInstruction.SET_FILL_STYLE,\n                defaultFillStyle,\n            ]);\n        }\n        if (state.strokeStyle !== undefined) {\n            this.hitDetectionInstructions.push([\n                CanvasInstruction.SET_STROKE_STYLE,\n                state.strokeStyle,\n                state.lineWidth,\n                state.lineCap,\n                state.lineJoin,\n                state.miterLimit,\n                state.lineDash,\n                state.lineDashOffset,\n            ]);\n        }\n        var flatCoordinates = circleGeometry.getFlatCoordinates();\n        var stride = circleGeometry.getStride();\n        var myBegin = this.coordinates.length;\n        this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);\n        var circleInstruction = [CanvasInstruction.CIRCLE, myBegin];\n        this.instructions.push(beginPathInstruction, circleInstruction);\n        this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);\n        if (state.fillStyle !== undefined) {\n            this.instructions.push(fillInstruction);\n            this.hitDetectionInstructions.push(fillInstruction);\n        }\n        if (state.strokeStyle !== undefined) {\n            this.instructions.push(strokeInstruction);\n            this.hitDetectionInstructions.push(strokeInstruction);\n        }\n        this.endGeometry(feature);\n    };\n    /**\n     * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} polygonGeometry Polygon geometry.\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     */\n    CanvasPolygonBuilder.prototype.drawPolygon = function (polygonGeometry, feature) {\n        var state = this.state;\n        var fillStyle = state.fillStyle;\n        var strokeStyle = state.strokeStyle;\n        if (fillStyle === undefined && strokeStyle === undefined) {\n            return;\n        }\n        this.setFillStrokeStyles_();\n        this.beginGeometry(polygonGeometry, feature);\n        if (state.fillStyle !== undefined) {\n            this.hitDetectionInstructions.push([\n                CanvasInstruction.SET_FILL_STYLE,\n                defaultFillStyle,\n            ]);\n        }\n        if (state.strokeStyle !== undefined) {\n            this.hitDetectionInstructions.push([\n                CanvasInstruction.SET_STROKE_STYLE,\n                state.strokeStyle,\n                state.lineWidth,\n                state.lineCap,\n                state.lineJoin,\n                state.miterLimit,\n                state.lineDash,\n                state.lineDashOffset,\n            ]);\n        }\n        var ends = polygonGeometry.getEnds();\n        var flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\n        var stride = polygonGeometry.getStride();\n        this.drawFlatCoordinatess_(flatCoordinates, 0, \n        /** @type {Array<number>} */ (ends), stride);\n        this.endGeometry(feature);\n    };\n    /**\n     * @param {import(\"../../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     */\n    CanvasPolygonBuilder.prototype.drawMultiPolygon = function (multiPolygonGeometry, feature) {\n        var state = this.state;\n        var fillStyle = state.fillStyle;\n        var strokeStyle = state.strokeStyle;\n        if (fillStyle === undefined && strokeStyle === undefined) {\n            return;\n        }\n        this.setFillStrokeStyles_();\n        this.beginGeometry(multiPolygonGeometry, feature);\n        if (state.fillStyle !== undefined) {\n            this.hitDetectionInstructions.push([\n                CanvasInstruction.SET_FILL_STYLE,\n                defaultFillStyle,\n            ]);\n        }\n        if (state.strokeStyle !== undefined) {\n            this.hitDetectionInstructions.push([\n                CanvasInstruction.SET_STROKE_STYLE,\n                state.strokeStyle,\n                state.lineWidth,\n                state.lineCap,\n                state.lineJoin,\n                state.miterLimit,\n                state.lineDash,\n                state.lineDashOffset,\n            ]);\n        }\n        var endss = multiPolygonGeometry.getEndss();\n        var flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\n        var stride = multiPolygonGeometry.getStride();\n        var offset = 0;\n        for (var i = 0, ii = endss.length; i < ii; ++i) {\n            offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);\n        }\n        this.endGeometry(feature);\n    };\n    /**\n     * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n     */\n    CanvasPolygonBuilder.prototype.finish = function () {\n        this.reverseHitDetectionInstructions();\n        this.state = null;\n        // We want to preserve topology when drawing polygons.  Polygons are\n        // simplified using quantization and point elimination. However, we might\n        // have received a mix of quantized and non-quantized geometries, so ensure\n        // that all are quantized by quantizing all coordinates in the batch.\n        var tolerance = this.tolerance;\n        if (tolerance !== 0) {\n            var coordinates = this.coordinates;\n            for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n                coordinates[i] = snap(coordinates[i], tolerance);\n            }\n        }\n        return _super.prototype.finish.call(this);\n    };\n    /**\n     * @private\n     */\n    CanvasPolygonBuilder.prototype.setFillStrokeStyles_ = function () {\n        var state = this.state;\n        var fillStyle = state.fillStyle;\n        if (fillStyle !== undefined) {\n            this.updateFillStyle(state, this.createFill);\n        }\n        if (state.strokeStyle !== undefined) {\n            this.updateStrokeStyle(state, this.applyStroke);\n        }\n    };\n    return CanvasPolygonBuilder;\n}(CanvasBuilder));\nexport default CanvasPolygonBuilder;\n//# sourceMappingURL=PolygonBuilder.js.map"]},"metadata":{},"sourceType":"module"}