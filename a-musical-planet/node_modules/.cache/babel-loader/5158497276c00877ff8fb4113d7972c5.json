{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Interaction\n */\n\n\nimport BaseObject from '../Object.js';\nimport InteractionProperty from './Property.js';\nimport { easeOut, linear } from '../easing.js';\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active', Return>} InteractionOnSignature\n */\n\n/**\n * Object literal with config options for interactions.\n * @typedef {Object} InteractionOptions\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} handleEvent\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. If the function returns a falsy value, propagation of\n * the event to other interactions in the map's interactions chain will be\n * prevented (this includes functions with no explicit return). The interactions\n * are traversed in reverse order of the interactions collection of the map.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\n * by a keyboard event not a button element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n * @api\n */\n\nvar Interaction = function (_super) {\n  __extends(Interaction, _super);\n  /**\n   * @param {InteractionOptions} [opt_options] Options.\n   */\n\n\n  function Interaction(opt_options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {InteractionOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {InteractionOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n\n    _this.once;\n    /***\n     * @type {InteractionOnSignature<void>}\n     */\n\n    _this.un;\n\n    if (opt_options && opt_options.handleEvent) {\n      _this.handleEvent = opt_options.handleEvent;\n    }\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default}\n     */\n\n\n    _this.map_ = null;\n\n    _this.setActive(true);\n\n    return _this;\n  }\n  /**\n   * Return whether the interaction is currently active.\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\n   * @observable\n   * @api\n   */\n\n\n  Interaction.prototype.getActive = function () {\n    return this.get(InteractionProperty.ACTIVE);\n  };\n  /**\n   * Get the map associated with this interaction.\n   * @return {import(\"../PluggableMap.js\").default} Map.\n   * @api\n   */\n\n\n  Interaction.prototype.getMap = function () {\n    return this.map_;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event}.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n\n\n  Interaction.prototype.handleEvent = function (mapBrowserEvent) {\n    return true;\n  };\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n\n\n  Interaction.prototype.setActive = function (active) {\n    this.set(InteractionProperty.ACTIVE, active);\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n\n\n  Interaction.prototype.setMap = function (map) {\n    this.map_ = map;\n  };\n\n  return Interaction;\n}(BaseObject);\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {import(\"../coordinate.js\").Coordinate} delta Delta.\n * @param {number} [opt_duration] Duration.\n */\n\n\nexport function pan(view, delta, opt_duration) {\n  var currentCenter = view.getCenterInternal();\n\n  if (currentCenter) {\n    var center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];\n    view.animateInternal({\n      duration: opt_duration !== undefined ? opt_duration : 250,\n      easing: linear,\n      center: view.getConstrainedCenter(center)\n    });\n  }\n}\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] Anchor coordinate in the user projection.\n * @param {number} [opt_duration] Duration.\n */\n\nexport function zoomByDelta(view, delta, opt_anchor, opt_duration) {\n  var currentZoom = view.getZoom();\n\n  if (currentZoom === undefined) {\n    return;\n  }\n\n  var newZoom = view.getConstrainedZoom(currentZoom + delta);\n  var newResolution = view.getResolutionForZoom(newZoom);\n\n  if (view.getAnimating()) {\n    view.cancelAnimations();\n  }\n\n  view.animate({\n    resolution: newResolution,\n    anchor: opt_anchor,\n    duration: opt_duration !== undefined ? opt_duration : 250,\n    easing: easeOut\n  });\n}\nexport default Interaction;","map":{"version":3,"sources":["../src/interaction/Interaction.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/Interaction\n */\nimport BaseObject from '../Object.js';\nimport InteractionProperty from './Property.js';\nimport { easeOut, linear } from '../easing.js';\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active', Return>} InteractionOnSignature\n */\n/**\n * Object literal with config options for interactions.\n * @typedef {Object} InteractionOptions\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} handleEvent\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. If the function returns a falsy value, propagation of\n * the event to other interactions in the map's interactions chain will be\n * prevented (this includes functions with no explicit return). The interactions\n * are traversed in reverse order of the interactions collection of the map.\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\n * by a keyboard event not a button element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n * @api\n */\nvar Interaction = /** @class */ (function (_super) {\n    __extends(Interaction, _super);\n    /**\n     * @param {InteractionOptions} [opt_options] Options.\n     */\n    function Interaction(opt_options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {InteractionOnSignature<import(\"../Observable.js\").OnReturn>}\n         */\n        _this.on;\n        /***\n         * @type {InteractionOnSignature<import(\"../Observable.js\").OnReturn>}\n         */\n        _this.once;\n        /***\n         * @type {InteractionOnSignature<void>}\n         */\n        _this.un;\n        if (opt_options && opt_options.handleEvent) {\n            _this.handleEvent = opt_options.handleEvent;\n        }\n        /**\n         * @private\n         * @type {import(\"../PluggableMap.js\").default}\n         */\n        _this.map_ = null;\n        _this.setActive(true);\n        return _this;\n    }\n    /**\n     * Return whether the interaction is currently active.\n     * @return {boolean} `true` if the interaction is active, `false` otherwise.\n     * @observable\n     * @api\n     */\n    Interaction.prototype.getActive = function () {\n        return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));\n    };\n    /**\n     * Get the map associated with this interaction.\n     * @return {import(\"../PluggableMap.js\").default} Map.\n     * @api\n     */\n    Interaction.prototype.getMap = function () {\n        return this.map_;\n    };\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent map browser event}.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     * @api\n     */\n    Interaction.prototype.handleEvent = function (mapBrowserEvent) {\n        return true;\n    };\n    /**\n     * Activate or deactivate the interaction.\n     * @param {boolean} active Active.\n     * @observable\n     * @api\n     */\n    Interaction.prototype.setActive = function (active) {\n        this.set(InteractionProperty.ACTIVE, active);\n    };\n    /**\n     * Remove the interaction from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    Interaction.prototype.setMap = function (map) {\n        this.map_ = map;\n    };\n    return Interaction;\n}(BaseObject));\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {import(\"../coordinate.js\").Coordinate} delta Delta.\n * @param {number} [opt_duration] Duration.\n */\nexport function pan(view, delta, opt_duration) {\n    var currentCenter = view.getCenterInternal();\n    if (currentCenter) {\n        var center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];\n        view.animateInternal({\n            duration: opt_duration !== undefined ? opt_duration : 250,\n            easing: linear,\n            center: view.getConstrainedCenter(center),\n        });\n    }\n}\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] Anchor coordinate in the user projection.\n * @param {number} [opt_duration] Duration.\n */\nexport function zoomByDelta(view, delta, opt_anchor, opt_duration) {\n    var currentZoom = view.getZoom();\n    if (currentZoom === undefined) {\n        return;\n    }\n    var newZoom = view.getConstrainedZoom(currentZoom + delta);\n    var newResolution = view.getResolutionForZoom(newZoom);\n    if (view.getAnimating()) {\n        view.cancelAnimations();\n    }\n    view.animate({\n        resolution: newResolution,\n        anchor: opt_anchor,\n        duration: opt_duration !== undefined ? opt_duration : 250,\n        easing: easeOut,\n    });\n}\nexport default Interaction;\n//# sourceMappingURL=Interaction.js.map"]},"metadata":{},"sourceType":"module"}