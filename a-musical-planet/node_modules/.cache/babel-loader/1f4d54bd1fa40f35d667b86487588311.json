{"ast":null,"code":"const asin = Math.asin;\nconst cos = Math.cos;\nconst sin = Math.sin;\nconst sqrt = Math.sqrt;\nconst PI = Math.PI; // equatorial mean radius of Earth (in meters)\n\nconst R = 6378137;\n\nfunction squared(x) {\n  return x * x;\n}\n\nfunction toRad(x) {\n  return x * PI / 180.0;\n}\n\nfunction hav(x) {\n  return squared(sin(x / 2));\n} // hav(theta) = hav(bLat - aLat) + cos(aLat) * cos(bLat) * hav(bLon - aLon)\n\n\nfunction haversineDistance(a, b) {\n  const aLat = toRad(Array.isArray(a) ? a[1] : a.latitude || a.lat);\n  const bLat = toRad(Array.isArray(b) ? b[1] : b.latitude || b.lat);\n  const aLng = toRad(Array.isArray(a) ? a[0] : a.longitude || a.lng || a.lon);\n  const bLng = toRad(Array.isArray(b) ? b[0] : b.longitude || b.lng || b.lon);\n  const ht = hav(bLat - aLat) + cos(aLat) * cos(bLat) * hav(bLng - aLng);\n  return 2 * R * asin(sqrt(ht));\n}\n\nmodule.exports = haversineDistance;","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/node_modules/haversine-distance/index.js"],"names":["asin","Math","cos","sin","sqrt","PI","R","squared","x","toRad","hav","haversineDistance","a","b","aLat","Array","isArray","latitude","lat","bLat","aLng","longitude","lng","lon","bLng","ht","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,IAAI,CAACD,IAAlB;AACA,MAAME,GAAG,GAAGD,IAAI,CAACC,GAAjB;AACA,MAAMC,GAAG,GAAGF,IAAI,CAACE,GAAjB;AACA,MAAMC,IAAI,GAAGH,IAAI,CAACG,IAAlB;AACA,MAAMC,EAAE,GAAGJ,IAAI,CAACI,EAAhB,C,CAEA;;AACA,MAAMC,CAAC,GAAG,OAAV;;AAEA,SAASC,OAAT,CAAkBC,CAAlB,EAAqB;AAAE,SAAOA,CAAC,GAAGA,CAAX;AAAc;;AACrC,SAASC,KAAT,CAAgBD,CAAhB,EAAmB;AAAE,SAAOA,CAAC,GAAGH,EAAJ,GAAS,KAAhB;AAAuB;;AAC5C,SAASK,GAAT,CAAcF,CAAd,EAAiB;AACf,SAAOD,OAAO,CAACJ,GAAG,CAACK,CAAC,GAAG,CAAL,CAAJ,CAAd;AACD,C,CAED;;;AACA,SAASG,iBAAT,CAA4BC,CAA5B,EAA+BC,CAA/B,EAAkC;AAChC,QAAMC,IAAI,GAAGL,KAAK,CAACM,KAAK,CAACC,OAAN,CAAcJ,CAAd,IAAmBA,CAAC,CAAC,CAAD,CAApB,GAA0BA,CAAC,CAACK,QAAF,IAAcL,CAAC,CAACM,GAA3C,CAAlB;AACA,QAAMC,IAAI,GAAGV,KAAK,CAACM,KAAK,CAACC,OAAN,CAAcH,CAAd,IAAmBA,CAAC,CAAC,CAAD,CAApB,GAA0BA,CAAC,CAACI,QAAF,IAAcJ,CAAC,CAACK,GAA3C,CAAlB;AACA,QAAME,IAAI,GAAGX,KAAK,CAACM,KAAK,CAACC,OAAN,CAAcJ,CAAd,IAAmBA,CAAC,CAAC,CAAD,CAApB,GAA0BA,CAAC,CAACS,SAAF,IAAeT,CAAC,CAACU,GAAjB,IAAwBV,CAAC,CAACW,GAArD,CAAlB;AACA,QAAMC,IAAI,GAAGf,KAAK,CAACM,KAAK,CAACC,OAAN,CAAcH,CAAd,IAAmBA,CAAC,CAAC,CAAD,CAApB,GAA0BA,CAAC,CAACQ,SAAF,IAAeR,CAAC,CAACS,GAAjB,IAAwBT,CAAC,CAACU,GAArD,CAAlB;AAEA,QAAME,EAAE,GAAGf,GAAG,CAACS,IAAI,GAAGL,IAAR,CAAH,GAAmBZ,GAAG,CAACY,IAAD,CAAH,GAAYZ,GAAG,CAACiB,IAAD,CAAf,GAAwBT,GAAG,CAACc,IAAI,GAAGJ,IAAR,CAAzD;AACA,SAAO,IAAId,CAAJ,GAAQN,IAAI,CAACI,IAAI,CAACqB,EAAD,CAAL,CAAnB;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBhB,iBAAjB","sourcesContent":["const asin = Math.asin\nconst cos = Math.cos\nconst sin = Math.sin\nconst sqrt = Math.sqrt\nconst PI = Math.PI\n\n// equatorial mean radius of Earth (in meters)\nconst R = 6378137\n\nfunction squared (x) { return x * x }\nfunction toRad (x) { return x * PI / 180.0 }\nfunction hav (x) {\n  return squared(sin(x / 2))\n}\n\n// hav(theta) = hav(bLat - aLat) + cos(aLat) * cos(bLat) * hav(bLon - aLon)\nfunction haversineDistance (a, b) {\n  const aLat = toRad(Array.isArray(a) ? a[1] : a.latitude || a.lat)\n  const bLat = toRad(Array.isArray(b) ? b[1] : b.latitude || b.lat)\n  const aLng = toRad(Array.isArray(a) ? a[0] : a.longitude || a.lng || a.lon)\n  const bLng = toRad(Array.isArray(b) ? b[0] : b.longitude || b.lng || b.lon)\n\n  const ht = hav(bLat - aLat) + cos(aLat) * cos(bLat) * hav(bLng - aLng)\n  return 2 * R * asin(sqrt(ht))\n}\n\nmodule.exports = haversineDistance\n"]},"metadata":{},"sourceType":"script"}