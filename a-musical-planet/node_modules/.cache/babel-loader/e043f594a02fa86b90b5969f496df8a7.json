{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragRotate\n */\n\n\nimport PointerInteraction from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { altShiftKeysOnly, mouseActionButton, mouseOnly } from '../events/condition.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\n\nvar DragRotate = function (_super) {\n  __extends(DragRotate, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function DragRotate(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      stopDown: FALSE\n    }) || this;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n    return _this;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  DragRotate.prototype.handleDragEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    var size = map.getSize();\n    var offset = mapBrowserEvent.pixel;\n    var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n\n    if (this.lastAngle_ !== undefined) {\n      var delta = theta - this.lastAngle_;\n      view.adjustRotationInternal(-delta);\n    }\n\n    this.lastAngle_ = theta;\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragRotate.prototype.handleUpEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.endInteraction(this.duration_);\n    return false;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragRotate.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      map.getView().beginInteraction();\n      this.lastAngle_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return DragRotate;\n}(PointerInteraction);\n\nexport default DragRotate;","map":{"version":3,"sources":["../src/interaction/DragRotate.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/DragRotate\n */\nimport PointerInteraction from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { altShiftKeysOnly, mouseActionButton, mouseOnly, } from '../events/condition.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nvar DragRotate = /** @class */ (function (_super) {\n    __extends(DragRotate, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function DragRotate(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            stopDown: FALSE,\n        }) || this;\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.lastAngle_ = undefined;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.duration_ = options.duration !== undefined ? options.duration : 250;\n        return _this;\n    }\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     */\n    DragRotate.prototype.handleDragEvent = function (mapBrowserEvent) {\n        if (!mouseOnly(mapBrowserEvent)) {\n            return;\n        }\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        if (view.getConstraints().rotation === disable) {\n            return;\n        }\n        var size = map.getSize();\n        var offset = mapBrowserEvent.pixel;\n        var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n        if (this.lastAngle_ !== undefined) {\n            var delta = theta - this.lastAngle_;\n            view.adjustRotationInternal(-delta);\n        }\n        this.lastAngle_ = theta;\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    DragRotate.prototype.handleUpEvent = function (mapBrowserEvent) {\n        if (!mouseOnly(mapBrowserEvent)) {\n            return true;\n        }\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        view.endInteraction(this.duration_);\n        return false;\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    DragRotate.prototype.handleDownEvent = function (mapBrowserEvent) {\n        if (!mouseOnly(mapBrowserEvent)) {\n            return false;\n        }\n        if (mouseActionButton(mapBrowserEvent) &&\n            this.condition_(mapBrowserEvent)) {\n            var map = mapBrowserEvent.map;\n            map.getView().beginInteraction();\n            this.lastAngle_ = undefined;\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    return DragRotate;\n}(PointerInteraction));\nexport default DragRotate;\n//# sourceMappingURL=DragRotate.js.map"]},"metadata":{},"sourceType":"module"}