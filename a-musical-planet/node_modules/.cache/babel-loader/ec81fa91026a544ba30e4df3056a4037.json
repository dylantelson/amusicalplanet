{"ast":null,"code":"/**\n * @module ol/geom/flat/segments\n */\n\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n  var point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];\n  var point2 = [];\n  var ret;\n\n  for (; offset + stride < end; offset += stride) {\n    point2[0] = flatCoordinates[offset + stride];\n    point2[1] = flatCoordinates[offset + stride + 1];\n    ret = callback(point1, point2);\n\n    if (ret) {\n      return ret;\n    }\n\n    point1[0] = point2[0];\n    point1[1] = point2[1];\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../src/geom/flat/segments.js"],"names":[],"mappings":"AAAA;;AAEG;;AAEH;;;;;;;;;;;;AAYG;AACH,OAAM,SAAU,OAAV,CAAkB,eAAlB,EAAmC,MAAnC,EAA2C,GAA3C,EAAgD,MAAhD,EAAwD,QAAxD,EAAgE;AACpE,MAAM,MAAM,GAAG,CAAC,eAAe,CAAC,MAAD,CAAhB,EAA0B,eAAe,CAAC,MAAM,GAAG,CAAV,CAAzC,CAAf;AACA,MAAM,MAAM,GAAG,EAAf;AACA,MAAI,GAAJ;;AACA,SAAO,MAAM,GAAG,MAAT,GAAkB,GAAzB,EAA8B,MAAM,IAAI,MAAxC,EAAgD;AAC9C,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,eAAe,CAAC,MAAM,GAAG,MAAV,CAA3B;AACA,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,eAAe,CAAC,MAAM,GAAG,MAAT,GAAkB,CAAnB,CAA3B;AACA,IAAA,GAAG,GAAG,QAAQ,CAAC,MAAD,EAAS,MAAT,CAAd;;AACA,QAAI,GAAJ,EAAS;AACP,aAAO,GAAP;AACD;;AACD,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,MAAM,CAAC,CAAD,CAAlB;AACA,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,MAAM,CAAC,CAAD,CAAlB;AACD;;AACD,SAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @module ol/geom/flat/segments\n */\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n    var point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];\n    var point2 = [];\n    var ret;\n    for (; offset + stride < end; offset += stride) {\n        point2[0] = flatCoordinates[offset + stride];\n        point2[1] = flatCoordinates[offset + stride + 1];\n        ret = callback(point1, point2);\n        if (ret) {\n            return ret;\n        }\n        point1[0] = point2[0];\n        point1[1] = point2[1];\n    }\n    return false;\n}\n//# sourceMappingURL=segments.js.map"]},"metadata":{},"sourceType":"module"}