{"ast":null,"code":"/**\n * @module ol/geom/flat/straightchunk\n */\n\n/**\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Array<number>} Start and end of the first suitable chunk of the\n * given `flatCoordinates`.\n */\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\n  var chunkStart = offset;\n  var chunkEnd = offset;\n  var chunkM = 0;\n  var m = 0;\n  var start = offset;\n  var acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\n\n  for (i = offset; i < end; i += stride) {\n    var x2 = flatCoordinates[i];\n    var y2 = flatCoordinates[i + 1];\n\n    if (x1 !== undefined) {\n      x23 = x2 - x1;\n      y23 = y2 - y1;\n      m23 = Math.sqrt(x23 * x23 + y23 * y23);\n\n      if (x12 !== undefined) {\n        m += m12;\n        acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\n\n        if (acos > maxAngle) {\n          if (m > chunkM) {\n            chunkM = m;\n            chunkStart = start;\n            chunkEnd = i;\n          }\n\n          m = 0;\n          start = i - stride;\n        }\n      }\n\n      m12 = m23;\n      x12 = x23;\n      y12 = y23;\n    }\n\n    x1 = x2;\n    y1 = y2;\n  }\n\n  m += m23;\n  return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\n}","map":{"version":3,"sources":["../../src/geom/flat/straightchunk.js"],"names":[],"mappings":"AAAA;;AAEG;;AAEH;;;;;;;;AAQG;AACH,OAAM,SAAU,aAAV,CAAwB,QAAxB,EAAkC,eAAlC,EAAmD,MAAnD,EAA2D,GAA3D,EAAgE,MAAhE,EAAsE;AAC1E,MAAI,UAAU,GAAG,MAAjB;AACA,MAAI,QAAQ,GAAG,MAAf;AACA,MAAI,MAAM,GAAG,CAAb;AACA,MAAI,CAAC,GAAG,CAAR;AACA,MAAI,KAAK,GAAG,MAAZ;AACA,MAAI,IAAJ,EAAU,CAAV,EAAa,GAAb,EAAkB,GAAlB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C;;AACA,OAAK,CAAC,GAAG,MAAT,EAAiB,CAAC,GAAG,GAArB,EAA0B,CAAC,IAAI,MAA/B,EAAuC;AACrC,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,CAA1B;AACA,QAAM,EAAE,GAAG,eAAe,CAAC,CAAC,GAAG,CAAL,CAA1B;;AACA,QAAI,EAAE,KAAK,SAAX,EAAsB;AACpB,MAAA,GAAG,GAAG,EAAE,GAAG,EAAX;AACA,MAAA,GAAG,GAAG,EAAE,GAAG,EAAX;AACA,MAAA,GAAG,GAAG,IAAI,CAAC,IAAL,CAAU,GAAG,GAAG,GAAN,GAAY,GAAG,GAAG,GAA5B,CAAN;;AACA,UAAI,GAAG,KAAK,SAAZ,EAAuB;AACrB,QAAA,CAAC,IAAI,GAAL;AACA,QAAA,IAAI,GAAG,IAAI,CAAC,IAAL,CAAU,CAAC,GAAG,GAAG,GAAN,GAAY,GAAG,GAAG,GAAnB,KAA2B,GAAG,GAAG,GAAjC,CAAV,CAAP;;AACA,YAAI,IAAI,GAAG,QAAX,EAAqB;AACnB,cAAI,CAAC,GAAG,MAAR,EAAgB;AACd,YAAA,MAAM,GAAG,CAAT;AACA,YAAA,UAAU,GAAG,KAAb;AACA,YAAA,QAAQ,GAAG,CAAX;AACD;;AACD,UAAA,CAAC,GAAG,CAAJ;AACA,UAAA,KAAK,GAAG,CAAC,GAAG,MAAZ;AACD;AACF;;AACD,MAAA,GAAG,GAAG,GAAN;AACA,MAAA,GAAG,GAAG,GAAN;AACA,MAAA,GAAG,GAAG,GAAN;AACD;;AACD,IAAA,EAAE,GAAG,EAAL;AACA,IAAA,EAAE,GAAG,EAAL;AACD;;AACD,EAAA,CAAC,IAAI,GAAL;AACA,SAAO,CAAC,GAAG,MAAJ,GAAa,CAAC,KAAD,EAAQ,CAAR,CAAb,GAA0B,CAAC,UAAD,EAAa,QAAb,CAAjC;AACD","sourceRoot":"","sourcesContent":["/**\n * @module ol/geom/flat/straightchunk\n */\n/**\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Array<number>} Start and end of the first suitable chunk of the\n * given `flatCoordinates`.\n */\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\n    var chunkStart = offset;\n    var chunkEnd = offset;\n    var chunkM = 0;\n    var m = 0;\n    var start = offset;\n    var acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\n    for (i = offset; i < end; i += stride) {\n        var x2 = flatCoordinates[i];\n        var y2 = flatCoordinates[i + 1];\n        if (x1 !== undefined) {\n            x23 = x2 - x1;\n            y23 = y2 - y1;\n            m23 = Math.sqrt(x23 * x23 + y23 * y23);\n            if (x12 !== undefined) {\n                m += m12;\n                acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\n                if (acos > maxAngle) {\n                    if (m > chunkM) {\n                        chunkM = m;\n                        chunkStart = start;\n                        chunkEnd = i;\n                    }\n                    m = 0;\n                    start = i - stride;\n                }\n            }\n            m12 = m23;\n            x12 = x23;\n            y12 = y23;\n        }\n        x1 = x2;\n        y1 = y2;\n    }\n    m += m23;\n    return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\n}\n//# sourceMappingURL=straightchunk.js.map"]},"metadata":{},"sourceType":"module"}