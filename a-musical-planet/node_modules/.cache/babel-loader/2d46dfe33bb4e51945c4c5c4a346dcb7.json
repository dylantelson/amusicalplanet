{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst countries = require(\"./countries.json\");\n\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = props => {\n  _s();\n\n  const [currPos, setCurrPos] = useState({\n    zoom: 1,\n    coordinates: [0, 0]\n  });\n\n  const renderStyle = country => {\n    if (!country.area) return [{\n      fontSize: \"0px\"\n    }, 0];\n    const adjustedFont = country.area > 500000 ? country.area / 800000 + 3.5 : country.area / 800000 + 1.3;\n    const rightOffset = adjustedFont - 1;\n    return [{\n      textAlign: \"center\",\n      fontSize: `${adjustedFont}px`,\n      width: `${adjustedFont * 70}px`\n    }, rightOffset];\n  };\n\n  console.log(\"coords\", currPos.coordinates);\n  const projection = geoMercator().scale(153).center([40, 50]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      \"data-tip\": \"\",\n      projection: projection,\n      style: {\n        width: \"100%\",\n        height: \"auto\",\n        outline: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        translateExtent: [[-100, -50], [860, 600]],\n        onMoveEnd: props => {\n          setCurrPos({\n            zoom: props.zoom,\n            coordinates: props.coordinates\n          });\n        },\n        maxZoom: 12,\n        zoom: currPos.zoom,\n        center: currPos.coordinates,\n        children: [/*#__PURE__*/_jsxDEV(Geographies, {\n          geography: geoUrl,\n          children: ({\n            geographies\n          }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            onClick: () => {\n              props.setCurrChosen(geo.properties.NAME);\n            },\n            onMouseEnter: () => {\n              props.setTooltipContent(geo.properties.NAME);\n            },\n            onMouseLeave: () => {\n              props.setTooltipContent(\"\");\n            },\n            style: {\n              default: {\n                fill: \"#D6D6DA\",\n                stroke: \"#000000\",\n                strokeWidth: 0.1,\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#F53\",\n                stroke: \"#000000\",\n                strokeWidth: 0.1,\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#E42\",\n                stroke: \"#000000\",\n                strokeWidth: 0.1,\n                outline: \"none\"\n              }\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), countries.map(country => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            coordinates: [country.latlng[1] - renderStyle(country)[1], country.latlng[0]],\n            fill: \"#777\",\n            children: currPos.zoom * 2 + renderStyle(country)[1] > 9 ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n              style: renderStyle(country)[0],\n              children: country.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MapChart, \"BLpefoHJaIk3cJIRZ6vwuiHVVEM=\");\n\n_c = MapChart;\nexport default _c2 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js"],"names":["React","memo","useState","ZoomableGroup","ComposableMap","Geographies","Geography","Marker","geoMercator","countries","require","geoUrl","rounded","num","Math","round","MapChart","props","currPos","setCurrPos","zoom","coordinates","renderStyle","country","area","fontSize","adjustedFont","rightOffset","textAlign","width","console","log","projection","scale","center","height","outline","geographies","map","geo","setCurrChosen","properties","NAME","setTooltipContent","default","fill","stroke","strokeWidth","hover","pressed","rsmKey","latlng","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,SAJF,EAKEC,MALF,QAMO,mBANP;AAOA,SAASC,WAAT,QAA4B,QAA5B;;;;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AAEA,MAAMC,MAAM,GACV,wGADF;;AAGA,MAAMC,OAAO,GAAIC,GAAD,IAAS;AACvB,MAAIA,GAAG,GAAG,UAAV,EAAsB;AACpB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,SAAjB,IAA8B,EAA9B,GAAmC,IAA1C;AACD,GAFD,MAEO,IAAIA,GAAG,GAAG,OAAV,EAAmB;AACxB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,MAAjB,IAA2B,EAA3B,GAAgC,GAAvC;AACD,GAFM,MAEA;AACL,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,GAAjB,IAAwB,EAAxB,GAA6B,GAApC;AACD;AACF,CARD;;AAUA,MAAMG,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC;AAAEkB,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAxB,GAAD,CAAtC;;AACA,QAAMC,WAAW,GAAIC,OAAD,IAAa;AAC/B,QAAI,CAACA,OAAO,CAACC,IAAb,EAAmB,OAAO,CAAC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAD,EAAsB,CAAtB,CAAP;AACnB,UAAMC,YAAY,GAChBH,OAAO,CAACC,IAAR,GAAe,MAAf,GACID,OAAO,CAACC,IAAR,GAAe,MAAf,GAAwB,GAD5B,GAEID,OAAO,CAACC,IAAR,GAAe,MAAf,GAAwB,GAH9B;AAIA,UAAMG,WAAW,GAAGD,YAAY,GAAG,CAAnC;AACA,WAAO,CACL;AACEE,MAAAA,SAAS,EAAE,QADb;AAEEH,MAAAA,QAAQ,EAAG,GAAEC,YAAa,IAF5B;AAGEG,MAAAA,KAAK,EAAG,GAAEH,YAAY,GAAG,EAAG;AAH9B,KADK,EAMLC,WANK,CAAP;AAQD,GAfD;;AAiBAG,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBb,OAAO,CAACG,WAA9B;AACA,QAAMW,UAAU,GAAGxB,WAAW,GAAGyB,KAAd,CAAoB,GAApB,EAAyBC,MAAzB,CAAgC,CAAC,EAAD,EAAK,EAAL,CAAhC,CAAnB;AAEA,sBACE;AAAA,2BACE,QAAC,aAAD;AACE,kBAAS,EADX;AAEE,MAAA,UAAU,EAAEF,UAFd;AAGE,MAAA,KAAK,EAAE;AACLH,QAAAA,KAAK,EAAE,MADF;AAELM,QAAAA,MAAM,EAAE,MAFH;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAHT;AAAA,6BASE,QAAC,aAAD;AACE,QAAA,eAAe,EAAE,CACf,CAAC,CAAC,GAAF,EAAO,CAAC,EAAR,CADe,EAEf,CAAC,GAAD,EAAM,GAAN,CAFe,CADnB;AAKE,QAAA,SAAS,EAAGnB,KAAD,IAAW;AACpBE,UAAAA,UAAU,CAAC;AACTC,YAAAA,IAAI,EAAEH,KAAK,CAACG,IADH;AAETC,YAAAA,WAAW,EAAEJ,KAAK,CAACI;AAFV,WAAD,CAAV;AAID,SAVH;AAWE,QAAA,OAAO,EAAE,EAXX;AAYE,QAAA,IAAI,EAAEH,OAAO,CAACE,IAZhB;AAaE,QAAA,MAAM,EAAEF,OAAO,CAACG,WAblB;AAAA,gCAeE,QAAC,WAAD;AAAa,UAAA,SAAS,EAAEV,MAAxB;AAAA,oBACG,CAAC;AAAE0B,YAAAA;AAAF,WAAD,KACCA,WAAW,CAACC,GAAZ,CAAiBC,GAAD,iBACd,QAAC,SAAD;AAEE,YAAA,SAAS,EAAEA,GAFb;AAGE,YAAA,OAAO,EAAE,MAAM;AACbtB,cAAAA,KAAK,CAACuB,aAAN,CAAoBD,GAAG,CAACE,UAAJ,CAAeC,IAAnC;AACD,aALH;AAME,YAAA,YAAY,EAAE,MAAM;AAClBzB,cAAAA,KAAK,CAAC0B,iBAAN,CAAwBJ,GAAG,CAACE,UAAJ,CAAeC,IAAvC;AACD,aARH;AASE,YAAA,YAAY,EAAE,MAAM;AAClBzB,cAAAA,KAAK,CAAC0B,iBAAN,CAAwB,EAAxB;AACD,aAXH;AAYE,YAAA,KAAK,EAAE;AACLC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,IAAI,EAAE,SADC;AAEPC,gBAAAA,MAAM,EAAE,SAFD;AAGPC,gBAAAA,WAAW,EAAE,GAHN;AAIPX,gBAAAA,OAAO,EAAE;AAJF,eADJ;AAOLY,cAAAA,KAAK,EAAE;AACLH,gBAAAA,IAAI,EAAE,MADD;AAELC,gBAAAA,MAAM,EAAE,SAFH;AAGLC,gBAAAA,WAAW,EAAE,GAHR;AAILX,gBAAAA,OAAO,EAAE;AAJJ,eAPF;AAaLa,cAAAA,OAAO,EAAE;AACPJ,gBAAAA,IAAI,EAAE,MADC;AAEPC,gBAAAA,MAAM,EAAE,SAFD;AAGPC,gBAAAA,WAAW,EAAE,GAHN;AAIPX,gBAAAA,OAAO,EAAE;AAJF;AAbJ;AAZT,aACOG,GAAG,CAACW,MADX;AAAA;AAAA;AAAA;AAAA,kBADF;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAfF,EAsDGzC,SAAS,CAAC6B,GAAV,CAAef,OAAD,IAAa;AAC1B,8BACE,QAAC,MAAD;AACE,YAAA,WAAW,EAAE,CACXA,OAAO,CAAC4B,MAAR,CAAe,CAAf,IAAoB7B,WAAW,CAACC,OAAD,CAAX,CAAqB,CAArB,CADT,EAEXA,OAAO,CAAC4B,MAAR,CAAe,CAAf,CAFW,CADf;AAKE,YAAA,IAAI,EAAC,MALP;AAAA,sBAOGjC,OAAO,CAACE,IAAR,GAAe,CAAf,GAAmBE,WAAW,CAACC,OAAD,CAAX,CAAqB,CAArB,CAAnB,GAA6C,CAA7C,gBACC;AAAU,cAAA,KAAK,EAAED,WAAW,CAACC,OAAD,CAAX,CAAqB,CAArB,CAAjB;AAAA,wBACGA,OAAO,CAAC6B;AADX;AAAA;AAAA;AAAA;AAAA,oBADD,gBAKC;AAZJ;AAAA;AAAA;AAAA;AAAA,kBADF;AAiBD,SAlBA,CAtDH;AAAA;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAwFD,CA9GD;;GAAMpC,Q;;KAAAA,Q;AAgHN,kCAAef,IAAI,CAACe,QAAD,CAAnB","sourcesContent":["import React, { memo, useState } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\n\nconst countries = require(\"./countries.json\");\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = (num) => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = (props) => {\n  const [currPos, setCurrPos] = useState({ zoom: 1, coordinates: [0, 0] });\n  const renderStyle = (country) => {\n    if (!country.area) return [{ fontSize: \"0px\" }, 0];\n    const adjustedFont =\n      country.area > 500000\n        ? country.area / 800000 + 3.5\n        : country.area / 800000 + 1.3;\n    const rightOffset = adjustedFont - 1;\n    return [\n      {\n        textAlign: \"center\",\n        fontSize: `${adjustedFont}px`,\n        width: `${adjustedFont * 70}px`,\n      },\n      rightOffset,\n    ];\n  };\n\n  console.log(\"coords\", currPos.coordinates);\n  const projection = geoMercator().scale(153).center([40, 50]);\n\n  return (\n    <>\n      <ComposableMap\n        data-tip=\"\"\n        projection={projection}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n          outline: \"none\",\n        }}\n      >\n        <ZoomableGroup\n          translateExtent={[\n            [-100, -50],\n            [860, 600],\n          ]}\n          onMoveEnd={(props) => {\n            setCurrPos({\n              zoom: props.zoom,\n              coordinates: props.coordinates,\n            });\n          }}\n          maxZoom={12}\n          zoom={currPos.zoom}\n          center={currPos.coordinates}\n        >\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onClick={() => {\n                    props.setCurrChosen(geo.properties.NAME);\n                  }}\n                  onMouseEnter={() => {\n                    props.setTooltipContent(geo.properties.NAME);\n                  }}\n                  onMouseLeave={() => {\n                    props.setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#D6D6DA\",\n                      stroke: \"#000000\",\n                      strokeWidth: 0.1,\n                      outline: \"none\",\n                    },\n                    hover: {\n                      fill: \"#F53\",\n                      stroke: \"#000000\",\n                      strokeWidth: 0.1,\n                      outline: \"none\",\n                    },\n                    pressed: {\n                      fill: \"#E42\",\n                      stroke: \"#000000\",\n                      strokeWidth: 0.1,\n                      outline: \"none\",\n                    },\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n          {countries.map((country) => {\n            return (\n              <Marker\n                coordinates={[\n                  country.latlng[1] - renderStyle(country)[1],\n                  country.latlng[0],\n                ]}\n                fill=\"#777\"\n              >\n                {currPos.zoom * 2 + renderStyle(country)[1] > 9 ? (\n                  <textarea style={renderStyle(country)[0]}>\n                    {country.name}\n                  </textarea>\n                ) : (\n                  <></>\n                )}\n              </Marker>\n            );\n          })}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}