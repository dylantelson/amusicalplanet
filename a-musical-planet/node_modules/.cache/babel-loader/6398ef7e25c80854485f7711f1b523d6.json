{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/Play.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport MapPage from \"./MapPage\";\nimport GuessPopup from \"./GuessPopup\";\nimport \"./Play.css\";\nimport haversine from \"haversine-distance\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\n\nconst countries = require(\"./countriesInfo.json\");\n\nconst Play = props => {\n  _s();\n\n  const [currTrack, setCurrTrack] = useState({});\n  const [redirect, setRedirect] = useState(\"\");\n  const [mapContent, setMapContent] = useState(\"\");\n  const [currChosen, setCurrChosen] = useState(\"\"); //first value is a bool on whether to show popup,\n  //second is the score to show\n\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0\n  });\n  const audioRef = useRef(null);\n\n  const nextTrack = () => {\n    setPopup({ ...popup,\n      show: false,\n      roundScore: 0\n    });\n    setCurrChosen(\"\");\n\n    if (props.accessToken === null || props.accessToken === \"\") {\n      setRedirect(\"login\");\n      return;\n    }\n\n    let currPlaylistIndex = Math.floor(Math.random() * Playlists.length);\n\n    if (Playlists[currPlaylistIndex].country === currTrack.country) {\n      if (currPlaylistIndex > 0) currPlaylistIndex--;else currPlaylistIndex++;\n    }\n\n    fetch(`https://api.spotify.com/v1/playlists/${Playlists[currPlaylistIndex].playlistId}`, {\n      headers: {\n        Authorization: \"Bearer \" + props.accessToken\n      }\n    }).then(response => response.json()).then(data => {\n      let track = \"\";\n      let trackIndex = 0;\n\n      while (track === \"\") {\n        trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n        track = data.tracks.items[trackIndex].track;\n      }\n\n      console.log(track);\n      setCurrTrack({\n        url: track.preview_url,\n        artist: data.tracks.items[trackIndex].track.artists[0].name,\n        album: data.tracks.items[trackIndex].track.album.name,\n        image: data.tracks.items[trackIndex].track.album.images[0].url,\n        country: data.name,\n        name: data.tracks.items[trackIndex].track.name\n      });\n      audioRef.current.load();\n      audioRef.current.play();\n    }).catch(err => {\n      console.log(\"ERROR LOADING TRACK\");\n      console.log(err);\n      window.location.replace(\"http://localhost:8888/getNewToken\");\n    });\n  };\n\n  const guessGiven = () => {\n    if (currChosen === currTrack.country) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore\n      });\n      return;\n    }\n\n    const chosenCountryCoords = countries.filter(function (country) {\n      return country.name === currChosen;\n    })[0].latlng;\n    const currTrackCountryCoords = countries.filter(function (country) {\n      return country.name === currTrack.country;\n    })[0].latlng;\n    let score = maxScore - Math.ceil(haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2);\n    if (score < 0) score = 0;\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score\n    }); // if (currTrack.country === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.country}!`);\n    // }\n    // getNewArtist();\n  };\n\n  const goToMap = () => {\n    setRedirect(\"map\");\n  };\n\n  useEffect(() => {\n    nextTrack();\n  }, []);\n  if (redirect === \"login\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 36\n  }, this);else if (redirect === \"map\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 39\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        id: \"music\",\n        ref: audioRef,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          volume: \"2\",\n          allow: \"autoplay\",\n          src: currTrack.url,\n          type: \"audio/mpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-div\",\n        children: /*#__PURE__*/_jsxDEV(MapPage, {\n          currCountry: currTrack.country,\n          setCurrChosen: setCurrChosen,\n          currChosen: currChosen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Curr Guess: \", currChosen]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: guessGiven,\n          children: \"Submit Guess\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), popup.show && /*#__PURE__*/_jsxDEV(GuessPopup, {\n        currTrack: currTrack,\n        currChosen: currChosen,\n        nextTrack: nextTrack,\n        roundScore: popup.roundScore,\n        sessionScore: popup.sessionScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Play, \"9/O2PAFU/0VPrCOGM8yDFpP5oSU=\");\n\n_c = Play;\nexport default Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/Play.js"],"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Switch","Route","Link","Redirect","MapPage","GuessPopup","haversine","maxScore","Playlists","require","countries","Play","props","currTrack","setCurrTrack","redirect","setRedirect","mapContent","setMapContent","currChosen","setCurrChosen","popup","setPopup","show","roundScore","sessionScore","audioRef","nextTrack","accessToken","currPlaylistIndex","Math","floor","random","length","country","fetch","playlistId","headers","Authorization","then","response","json","data","track","trackIndex","tracks","items","console","log","url","preview_url","artist","artists","name","album","image","images","current","load","play","catch","err","window","location","replace","guessGiven","chosenCountryCoords","filter","latlng","currTrackCountryCoords","score","ceil","goToMap"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\n\nimport MapPage from \"./MapPage\";\nimport GuessPopup from \"./GuessPopup\";\nimport \"./Play.css\";\nimport haversine from \"haversine-distance\";\n\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\nconst countries = require(\"./countriesInfo.json\");\n\nconst Play = (props) => {\n  const [currTrack, setCurrTrack] = useState({});\n  const [redirect, setRedirect] = useState(\"\");\n\n  const [mapContent, setMapContent] = useState(\"\");\n  const [currChosen, setCurrChosen] = useState(\"\");\n  //first value is a bool on whether to show popup,\n  //second is the score to show\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0,\n  });\n\n  const audioRef = useRef(null);\n\n  const nextTrack = () => {\n    setPopup({ ...popup, show: false, roundScore: 0 });\n    setCurrChosen(\"\");\n    if (props.accessToken === null || props.accessToken === \"\") {\n      setRedirect(\"login\");\n      return;\n    }\n\n    let currPlaylistIndex = Math.floor(Math.random() * Playlists.length);\n    if (Playlists[currPlaylistIndex].country === currTrack.country) {\n      if (currPlaylistIndex > 0) currPlaylistIndex--;\n      else currPlaylistIndex++;\n    }\n    fetch(\n      `https://api.spotify.com/v1/playlists/${Playlists[currPlaylistIndex].playlistId}`,\n      {\n        headers: { Authorization: \"Bearer \" + props.accessToken },\n      }\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        let track = \"\";\n        let trackIndex = 0;\n        while (track === \"\") {\n          trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n          track = data.tracks.items[trackIndex].track;\n        }\n        console.log(track);\n        setCurrTrack({\n          url: track.preview_url,\n          artist: data.tracks.items[trackIndex].track.artists[0].name,\n          album: data.tracks.items[trackIndex].track.album.name,\n          image: data.tracks.items[trackIndex].track.album.images[0].url,\n          country: data.name,\n          name: data.tracks.items[trackIndex].track.name,\n        });\n        audioRef.current.load();\n        audioRef.current.play();\n      })\n      .catch((err) => {\n        console.log(\"ERROR LOADING TRACK\");\n        console.log(err);\n        window.location.replace(\"http://localhost:8888/getNewToken\");\n      });\n  };\n\n  const guessGiven = () => {\n    if (currChosen === currTrack.country) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore,\n      });\n      return;\n    }\n    const chosenCountryCoords = countries.filter(function (country) {\n      return country.name === currChosen;\n    })[0].latlng;\n\n    const currTrackCountryCoords = countries.filter(function (country) {\n      return country.name === currTrack.country;\n    })[0].latlng;\n\n    let score =\n      maxScore -\n      Math.ceil(\n        haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2\n      );\n\n    if (score < 0) score = 0;\n\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score,\n    });\n    // if (currTrack.country === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.country}!`);\n    // }\n    // getNewArtist();\n  };\n\n  const goToMap = () => {\n    setRedirect(\"map\");\n  };\n\n  useEffect(() => {\n    nextTrack();\n  }, []);\n\n  if (redirect === \"login\") return <Redirect to=\"/login\" />;\n  else if (redirect === \"map\") return <Redirect to=\"/map\" />;\n  return (\n    <>\n      <div className=\"play-section\">\n        <audio controls id=\"music\" ref={audioRef}>\n          <source\n            volume=\"2\"\n            allow=\"autoplay\"\n            src={currTrack.url}\n            type=\"audio/mpeg\"\n          ></source>\n          {/* Your browser does not support the audio element. */}\n        </audio>\n        <div className=\"map-div\">\n          <MapPage\n            currCountry={currTrack.country}\n            setCurrChosen={setCurrChosen}\n            currChosen={currChosen}\n          />\n        </div>\n        <div>\n          <h2>Curr Guess: {currChosen}</h2>\n        </div>\n        <div>\n          <button onClick={guessGiven}>Submit Guess</button>\n        </div>\n        {popup.show && (\n          <GuessPopup\n            currTrack={currTrack}\n            currChosen={currChosen}\n            nextTrack={nextTrack}\n            roundScore={popup.roundScore}\n            sessionScore={popup.sessionScore}\n          />\n        )}\n        {/* <div>\n        <button onClick={getNewArtist}>New Song</button>\n      </div>\n      <div>\n        <button onClick={goToMap}>Map</button>\n      </div> */}\n      </div>\n    </>\n  );\n};\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}