{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState, useEffect } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst worldCountries = require(\"./WorldInfo.json\"); // const europeCountries = require(\"./EuropeInfo.json\");\n\n\nconst worldGeoSVG = require(\"./worldSVG.json\"); // const europeGeoSVG = require(\"./EuropeInfo.json\");\n\n\nconst locationInfo = {\n  world: worldCountries // europe: europeCountries,\n\n};\nconst locationGeoSVG = {\n  world: worldGeoSVG\n};\nconst borderWidth = 0.2;\nconst colors = {\n  Asia: \"#E5B961\",\n  Europe: \"#D4A29C\",\n  Africa: \"#EDCC8B\",\n  SouthAmerica: \"#E8B298\",\n  NorthAmerica: \"#C7877F\",\n  Oceania: \"#7FC6A4\",\n  Water: \"#BDD1C5\",\n  Russia: \"#DDAE7F\",\n  Selected: \"#FFAAFA\"\n};\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n  var r = (num >> 16) + amt;\n  if (r > 255) r = 255;else if (r < 0) r = 0;\n  var b = (num >> 8 & 0x00ff) + amt;\n  if (b > 255) b = 255;else if (b < 0) b = 0;\n  var g = (num & 0x0000ff) + amt;\n  if (g > 255) g = 255;else if (g < 0) g = 0;\n  return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n}\n\n_c = LightenDarkenColor;\n\nconst MapChart = ({\n  setCurrChosen,\n  currChosen,\n  mapProps,\n  currMap\n}) => {\n  _s();\n\n  const renderStyle = country => {\n    if (!country.area || country.area < 1500) return [{\n      fontSize: \"0px\"\n    }, 0];\n    let adjustedFont = country.area > 500000 ? country.area / 800000 + 4.5 : country.area / 800000 + 2.3;\n    if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n    if (country.name.common === \"Russia\" && currMap === \"Europe\") adjustedFont /= 2.5; //const rightOffset = adjustedFont;\n\n    return [{\n      fontSize: `${adjustedFont}px` // stroke: \"#FFF\",\n      // stroke: colors[country.CONTINENT],\n      // strokeWidth: `${adjustedFont / 50}px`,\n\n    }, adjustedFont - 1];\n  };\n\n  const hoveredStyle = color => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\"\n    };\n  };\n\n  const selectedStyle = color => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\"\n    };\n  };\n\n  const [currPos, setCurrPos] = useState({\n    zoom: mapProps.minZoom,\n    coordinates: mapProps.coordinates\n  });\n  const projection = geoMercator().scale(mapProps.scale).center(mapProps.center).rotate(mapProps.rotate); //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [currLocation]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      \"data-tip\": \"\",\n      projection: projection,\n      style: {\n        width: \"100%\",\n        height: \"auto\",\n        outline: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        translateExtent: mapProps.translateExtent,\n        onMoveEnd: ({\n          zoom,\n          coordinates\n        }) => {\n          setCurrPos({\n            zoom: zoom,\n            coordinates: coordinates\n          });\n        },\n        minZoom: mapProps.minZoom,\n        maxZoom: mapProps.maxZoom,\n        zoom: currPos.zoom,\n        center: currPos.coordinates,\n        children: [/*#__PURE__*/_jsxDEV(Geographies, {\n          geography: worldGeoSVG,\n          children: ({\n            geographies\n          }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            onClick: () => {\n              setCurrChosen(geo.properties.NAME);\n            },\n            visibility: geo.properties.CONTINENT === \"Antarctica\" ? \"hidden\" : \"visible\",\n            style: {\n              default: currChosen === geo.properties.NAME ? selectedStyle(colors[geo.properties.CONTINENT]) : {\n                fill: currMap === \"World\" || geo.properties.CONTINENT === currMap ? colors[geo.properties.CONTINENT] : \"#ccc\",\n                stroke: \"#000000\",\n                strokeWidth: borderWidth,\n                outline: \"none\"\n              },\n              hover: currChosen === geo.properties.NAME ? selectedStyle(colors[geo.properties.CONTINENT]) : hoveredStyle(colors[geo.properties.CONTINENT])\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), worldCountries.map(country => {\n          if (currMap !== \"World\" && country.region !== currMap || country.area < 1500) return;\n          const currStyle = renderStyle(country);\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            coordinates: country.name.common === \"Russia\" && currMap === \"Europe\" ? [country.latlng[1] - 60, country.latlng[0] - 5] : [country.latlng[1], country.latlng[0]],\n            fill: \"#000\",\n            children: currPos.zoom * 2 + currStyle[1] > 9 ? currStyle[1] > country.name.common.length ? /*#__PURE__*/_jsxDEV(\"text\", {\n              textAnchor: \"middle\",\n              pointerEvents: \"none\",\n              style: currStyle[0],\n              children: country.name.common\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 21\n            }, this) : country.name.common.split(\" \").map((word, index) => {\n              return /*#__PURE__*/_jsxDEV(\"text\", {\n                textRendering: \"optimizeSpeed\",\n                textAnchor: \"middle\",\n                pointerEvents: \"none\",\n                y: (currStyle[1] / 1.3 + 1.3) * index,\n                style: currStyle[0],\n                children: word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 25\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MapChart, \"Fn+m2d//ZXrpMX/FmXph1PQLZNU=\");\n\n_c2 = MapChart;\nexport default _c3 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LightenDarkenColor\");\n$RefreshReg$(_c2, \"MapChart\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js"],"names":["React","memo","useState","useEffect","ZoomableGroup","ComposableMap","Geographies","Geography","Marker","geoMercator","worldCountries","require","worldGeoSVG","locationInfo","world","locationGeoSVG","borderWidth","colors","Asia","Europe","Africa","SouthAmerica","NorthAmerica","Oceania","Water","Russia","Selected","LightenDarkenColor","col","amt","usePound","slice","num","parseInt","r","b","g","toString","MapChart","setCurrChosen","currChosen","mapProps","currMap","renderStyle","country","area","fontSize","adjustedFont","name","common","length","hoveredStyle","color","fill","stroke","strokeWidth","outline","selectedStyle","currPos","setCurrPos","zoom","minZoom","coordinates","projection","scale","center","rotate","width","height","translateExtent","maxZoom","geographies","map","geo","properties","NAME","CONTINENT","default","hover","rsmKey","region","currStyle","latlng","split","word","index"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\n\nimport \"./Map.css\";\n\nconst worldCountries = require(\"./WorldInfo.json\");\n// const europeCountries = require(\"./EuropeInfo.json\");\n\nconst worldGeoSVG = require(\"./worldSVG.json\");\n// const europeGeoSVG = require(\"./EuropeInfo.json\");\n\nconst locationInfo = {\n  world: worldCountries,\n  // europe: europeCountries,\n};\n\nconst locationGeoSVG = {\n  world: worldGeoSVG,\n};\n\nconst borderWidth = 0.2;\n\nconst colors = {\n  Asia: \"#E5B961\",\n  Europe: \"#D4A29C\",\n  Africa: \"#EDCC8B\",\n  SouthAmerica: \"#E8B298\",\n  NorthAmerica: \"#C7877F\",\n  Oceania: \"#7FC6A4\",\n  Water: \"#BDD1C5\",\n  Russia: \"#DDAE7F\",\n  Selected: \"#FFAAFA\",\n};\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nconst MapChart = ({ setCurrChosen, currChosen, mapProps, currMap }) => {\n  const renderStyle = (country) => {\n    if (!country.area || country.area < 1500) return [{ fontSize: \"0px\" }, 0];\n    let adjustedFont =\n      country.area > 500000\n        ? country.area / 800000 + 4.5\n        : country.area / 800000 + 2.3;\n    if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n\n    if (country.name.common === \"Russia\" && currMap === \"Europe\")\n      adjustedFont /= 2.5;\n    //const rightOffset = adjustedFont;\n    return [\n      {\n        fontSize: `${adjustedFont}px`,\n        // stroke: \"#FFF\",\n        // stroke: colors[country.CONTINENT],\n        // strokeWidth: `${adjustedFont / 50}px`,\n      },\n      adjustedFont - 1,\n    ];\n  };\n\n  const hoveredStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n  const selectedStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n\n  const [currPos, setCurrPos] = useState({\n    zoom: mapProps.minZoom,\n    coordinates: mapProps.coordinates,\n  });\n  const projection = geoMercator()\n    .scale(mapProps.scale)\n    .center(mapProps.center)\n    .rotate(mapProps.rotate);\n\n  //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [currLocation]);\n\n  return (\n    <>\n      <ComposableMap\n        data-tip=\"\"\n        projection={projection}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n          outline: \"none\",\n        }}\n      >\n        <ZoomableGroup\n          translateExtent={mapProps.translateExtent}\n          onMoveEnd={({ zoom, coordinates }) => {\n            setCurrPos({\n              zoom: zoom,\n              coordinates: coordinates,\n            });\n          }}\n          minZoom={mapProps.minZoom}\n          maxZoom={mapProps.maxZoom}\n          zoom={currPos.zoom}\n          center={currPos.coordinates}\n        >\n          <Geographies geography={worldGeoSVG}>\n            {({ geographies }) =>\n              geographies.map((geo) => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onClick={() => {\n                    setCurrChosen(geo.properties.NAME);\n                  }}\n                  visibility={\n                    geo.properties.CONTINENT === \"Antarctica\"\n                      ? \"hidden\"\n                      : \"visible\"\n                  }\n                  style={{\n                    default:\n                      currChosen === geo.properties.NAME\n                        ? selectedStyle(colors[geo.properties.CONTINENT])\n                        : {\n                            fill:\n                              currMap === \"World\" ||\n                              geo.properties.CONTINENT === currMap\n                                ? colors[geo.properties.CONTINENT]\n                                : \"#ccc\",\n                            stroke: \"#000000\",\n                            strokeWidth: borderWidth,\n                            outline: \"none\",\n                          },\n                    hover:\n                      currChosen === geo.properties.NAME\n                        ? selectedStyle(colors[geo.properties.CONTINENT])\n                        : hoveredStyle(colors[geo.properties.CONTINENT]),\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n          {worldCountries.map((country) => {\n            if (\n              (currMap !== \"World\" && country.region !== currMap) ||\n              country.area < 1500\n            )\n              return;\n            const currStyle = renderStyle(country);\n            return (\n              <Marker\n                coordinates={\n                  country.name.common === \"Russia\" && currMap === \"Europe\"\n                    ? [country.latlng[1] - 60, country.latlng[0] - 5]\n                    : [country.latlng[1], country.latlng[0]]\n                }\n                fill=\"#000\"\n              >\n                {currPos.zoom * 2 + currStyle[1] > 9 ? (\n                  currStyle[1] > country.name.common.length ? (\n                    <text\n                      textAnchor=\"middle\"\n                      pointerEvents=\"none\"\n                      style={currStyle[0]}\n                    >\n                      {country.name.common}\n                    </text>\n                  ) : (\n                    country.name.common.split(\" \").map((word, index) => {\n                      return (\n                        <text\n                          textRendering=\"optimizeSpeed\"\n                          textAnchor=\"middle\"\n                          pointerEvents=\"none\"\n                          y={(currStyle[1] / 1.3 + 1.3) * index}\n                          style={currStyle[0]}\n                        >\n                          {word}\n                        </text>\n                      );\n                    })\n                  )\n                ) : (\n                  <></>\n                )}\n              </Marker>\n            );\n          })}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}