{"ast":null,"code":"import ascending from \"./ascending.js\"; // Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\n\nexport default function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n\n      while (compare(array[i], t) < 0) ++i;\n\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);else ++j, swap(array, j, right);\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/node_modules/d3-array/src/quickselect.js"],"names":["ascending","quickselect","array","k","left","right","length","compare","n","m","z","Math","log","s","exp","sd","sqrt","newLeft","max","floor","newRight","min","t","i","j","swap"],"mappings":"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","sourcesContent":["import ascending from \"./ascending.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n"]},"metadata":{},"sourceType":"module"}