{"ast":null,"code":"/**\n * @module ol/style/Circle\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport RegularShape from './RegularShape.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\n * @property {number} [rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\n * (meaningful only when used in conjunction with a two dimensional scale).\n */\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\n\nvar CircleStyle = function (_super) {\n  __extends(CircleStyle, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function CircleStyle(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      scale: options.scale !== undefined ? options.scale : 1,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0]\n    }) || this;\n    return _this;\n  }\n  /**\n   * Clones the style.\n   * @return {CircleStyle} The cloned style.\n   * @api\n   */\n\n\n  CircleStyle.prototype.clone = function () {\n    var scale = this.getScale();\n    var style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice()\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  };\n  /**\n   * Set the circle radius.\n   *\n   * @param {number} radius Circle radius.\n   * @api\n   */\n\n\n  CircleStyle.prototype.setRadius = function (radius) {\n    this.radius_ = radius;\n    this.render();\n  };\n\n  return CircleStyle;\n}(RegularShape);\n\nexport default CircleStyle;","map":{"version":3,"sources":["../src/style/Circle.js"],"names":[],"mappings":"AAAA;;AAEG;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,YAAP,MAAyB,mBAAzB;AAEA;;;;;;;;;;;;AAYG;;AAEH;;;;AAIG;;AACH,IAAA,WAAA,GAAA,UAAA,MAAA,EAAA;AAA0B,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;AACxB;;AAEG;;;AACH,WAAA,WAAA,CAAY,WAAZ,EAAuB;AAAvB,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,OAAO,GAAG,WAAW,GAAG,WAAH,GAAiB,EAA5C;AAEA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AACJ,MAAA,MAAM,EAAE,QADJ;AAEJ,MAAA,IAAI,EAAE,OAAO,CAAC,IAFV;AAGJ,MAAA,MAAM,EAAE,OAAO,CAAC,MAHZ;AAIJ,MAAA,MAAM,EAAE,OAAO,CAAC,MAJZ;AAKJ,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,KAAkB,SAAlB,GAA8B,OAAO,CAAC,KAAtC,GAA8C,CALjD;AAMJ,MAAA,QAAQ,EAAE,OAAO,CAAC,QAAR,KAAqB,SAArB,GAAiC,OAAO,CAAC,QAAzC,GAAoD,CAN1D;AAOJ,MAAA,cAAc,EACZ,OAAO,CAAC,cAAR,KAA2B,SAA3B,GAAuC,OAAO,CAAC,cAA/C,GAAgE,KAR9D;AASJ,MAAA,YAAY,EACV,OAAO,CAAC,YAAR,KAAyB,SAAzB,GAAqC,OAAO,CAAC,YAA7C,GAA4D,CAAC,CAAD,EAAI,CAAJ;AAV1D,KAAN,KAWE,IAXF;;AAYD;AAED;;;;AAIG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,QAAM,KAAK,GAAG,KAAK,QAAL,EAAd;AACA,QAAM,KAAK,GAAG,IAAI,WAAJ,CAAgB;AAC5B,MAAA,IAAI,EAAE,KAAK,OAAL,KAAiB,KAAK,OAAL,GAAe,KAAf,EAAjB,GAA0C,SADpB;AAE5B,MAAA,MAAM,EAAE,KAAK,SAAL,KAAmB,KAAK,SAAL,GAAiB,KAAjB,EAAnB,GAA8C,SAF1B;AAG5B,MAAA,MAAM,EAAE,KAAK,SAAL,EAHoB;AAI5B,MAAA,KAAK,EAAE,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAK,CAAC,KAAN,EAAvB,GAAuC,KAJlB;AAK5B,MAAA,QAAQ,EAAE,KAAK,WAAL,EALkB;AAM5B,MAAA,cAAc,EAAE,KAAK,iBAAL,EANY;AAO5B,MAAA,YAAY,EAAE,KAAK,eAAL,GAAuB,KAAvB;AAPc,KAAhB,CAAd;AASA,IAAA,KAAK,CAAC,UAAN,CAAiB,KAAK,UAAL,EAAjB;AACA,WAAO,KAAP;AACD,GAbD;AAeA;;;;;AAKG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,MAAV,EAAgB;AACd,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,MAAL;AACD,GAHD;;AAIF,SAAA,WAAA;AAAC,CAnDD,CAA0B,YAA1B,CAAA;;AAqDA,eAAe,WAAf","sourceRoot":"","sourcesContent":["/**\n * @module ol/style/Circle\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport RegularShape from './RegularShape.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\n * @property {number} [rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\n * (meaningful only when used in conjunction with a two dimensional scale).\n */\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\nvar CircleStyle = /** @class */ (function (_super) {\n    __extends(CircleStyle, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function CircleStyle(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            points: Infinity,\n            fill: options.fill,\n            radius: options.radius,\n            stroke: options.stroke,\n            scale: options.scale !== undefined ? options.scale : 1,\n            rotation: options.rotation !== undefined ? options.rotation : 0,\n            rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,\n            displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n        }) || this;\n        return _this;\n    }\n    /**\n     * Clones the style.\n     * @return {CircleStyle} The cloned style.\n     * @api\n     */\n    CircleStyle.prototype.clone = function () {\n        var scale = this.getScale();\n        var style = new CircleStyle({\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            radius: this.getRadius(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            displacement: this.getDisplacement().slice(),\n        });\n        style.setOpacity(this.getOpacity());\n        return style;\n    };\n    /**\n     * Set the circle radius.\n     *\n     * @param {number} radius Circle radius.\n     * @api\n     */\n    CircleStyle.prototype.setRadius = function (radius) {\n        this.radius_ = radius;\n        this.render();\n    };\n    return CircleStyle;\n}(RegularShape));\nexport default CircleStyle;\n//# sourceMappingURL=Circle.js.map"]},"metadata":{},"sourceType":"module"}