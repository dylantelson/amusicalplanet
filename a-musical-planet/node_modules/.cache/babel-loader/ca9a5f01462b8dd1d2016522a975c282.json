{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/dylan/MusicGuessr/a-musical-planet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/home/dylan/MusicGuessr/a-musical-planet/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{memo,useState,useEffect}from\"react\";import{ZoomableGroup,ComposableMap,Geographies,Geography,Marker}from\"react-simple-maps\";import{geoMercator}from\"d3-geo\";import Playlists from\"./Playlists\";import\"./Map.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var worldCountries=require(\"./WorldInfo.json\");// const europeCountries = require(\"./EuropeInfo.json\");\nvar worldGeoSVG=require(\"./WorldSVG50m.json\");var colors=require(\"./colors.json\");// const europeGeoSVG = require(\"./EuropeInfo.json\");\n// const locationInfo = {\n//   world: worldCountries,\n//   // europe: europeCountries,\n// };\n// const locationGeoSVG = {\n//   world: worldGeoSVG,\n// };\nvar borderWidth=0.2;function LightenDarkenColor(col,amt){var usePound=false;if(!col)return\"#000\";if(col[0]===\"#\"){col=col.slice(1);usePound=true;}var num=parseInt(col,16);var r=(num>>16)+amt;if(r>255)r=255;else if(r<0)r=0;var b=(num>>8&0x00ff)+amt;if(b>255)b=255;else if(b<0)b=0;var g=(num&0x0000ff)+amt;if(g>255)g=255;else if(g<0)g=0;return(usePound?\"#\":\"\")+(g|b<<8|r<<16).toString(16);}var camelize=function camelize(word){return word[0].toLowerCase()+word.slice(1).replaceAll(\" \",\"\");};var checkDifficulty=function checkDifficulty(mapDifficulty,countryDifficulty){if(mapDifficulty===\"Easy\")return countryDifficulty===\"Easy\";if(mapDifficulty===\"Medium\")return countryDifficulty===\"Easy\"||countryDifficulty===\"Medium\";//for some reason this necessary, otherwise it returns true even if mapDifficulty is Easy\nif(mapDifficulty===\"Hard\")return true;return false;};var countriesToShow=[];var currSelectedCountry=null;var MapChart=function MapChart(_ref){var handleNewChosen=_ref.handleNewChosen,mapProps=_ref.mapProps,currMap=_ref.currMap;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];useEffect(function(){countriesToShow=[];var currSelectedCountry=null;if(currMap.slice(0,5)===\"world\"){var _iterator=_createForOfIteratorHelper(Playlists.world),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var playlist=_step.value;if(checkDifficulty(currMap.slice(5),playlist.difficulty))countriesToShow.push(camelize(playlist.country));}}catch(err){_iterator.e(err);}finally{_iterator.f();}}else{var _iterator2=_createForOfIteratorHelper(Playlists[currMap]),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _playlist=_step2.value;countriesToShow.push(camelize(_playlist.country));}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}console.log(countriesToShow);var waitForMapLoad=setInterval(function(){if(document.querySelectorAll(\".rsm-geography\").length!==0){clearInterval(waitForMapLoad);setLoading(false);}},500);},[currMap]);if(!loading){var countries=document.querySelectorAll(\".rsm-geography\");var _iterator3=_createForOfIteratorHelper(countries),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var country=_step3.value;country.setAttribute(\"style\",countriesToShow.indexOf(country.id)>=0?\"fill: \".concat(colors[country.getAttribute(\"continent\")],\"; pointer-events: all; stroke: #000000; stroke-width: \").concat(borderWidth,\"; outline: none; visibility: visible;\"):\"fill: #ccc; pointer-events: none; stroke: #000000; stroke-width: \".concat(borderWidth,\"; outline: none; visibility: visible\"));}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}// style={{\n//                       currSelectedCountry &&\n//                       currSelectedCountry.element.id ===\n//                         geo.properties.NAME.replaceAll(\" \", \"\")\n//                         ? selectedStyle(colors[geo.properties.CONTINENT])\n//                         : countriesToShow.indexOf(geo.properties.NAME) >= 0\n//                         ? {\n//                             fill: colors[geo.properties.CONTINENT],\n//                             pointerEvents: \"all\",\n//                             stroke: \"#000000\",\n//                             strokeWidth: borderWidth,\n//                             outline: \"none\",\n//                           }\n//                         : {\n//                             fill: \"#ccc\",\n//                             pointerEvents: \"none\",\n//                             stroke: \"#000000\",\n//                             strokeWidth: borderWidth,\n//                             outline: \"none\",\n//                           },\n//                     hover:\n//                       currSelectedCountry &&\n//                       currSelectedCountry.element.id ===\n//                         geo.properties.NAME.replaceAll(\" \", \"\")\n//                         ? selectedStyle(colors[geo.properties.CONTINENT])\n//                         : hoveredStyle(colors[geo.properties.CONTINENT]),\n//                   }}\nvar setPressedStyle=function setPressedStyle(country,event){if(currSelectedCountry){//if user clicked on already selected country, return\nif(event.target.classList.contains(\"pressed\"))return;if(!(currSelectedCountry.element.id===event.target.id)){var prevCountry=document.querySelector(\"#\".concat(currSelectedCountry.element.id));prevCountry.style.fill=colors[currSelectedCountry.props.CONTINENT];prevCountry.classList.remove(\"pressed\");}}currSelectedCountry={element:event.target,props:country};event.target.style.fill=selectedStyle(colors[country.CONTINENT]).fill;event.target.classList.add(\"pressed\");};// const clearPressedStyle = () => {\n//   if (currSelectedCountry) {\n//     document.querySelector(`#${currSelectedCountry.element.id}`).style.fill =\n//       colors[currSelectedCountry.props.CONTINENT];\n//     currSelectedCountry = null;\n//   }\n// };\n// const renderStyle = (country) => {\n//   if (!country.area || country.area < 1500) return [{ fontSize: \"0px\" }, 0];\n//   let adjustedFont =\n//     country.area > 500000\n//       ? country.area / 800000 + 4.5\n//       : country.area / 800000 + 2.3;\n//   if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n//   if (country.name.common === \"Russia\" && currMap === \"europe\")\n//     adjustedFont /= 2.5;\n//   //const rightOffset = adjustedFont;\n//   return [\n//     {\n//       fontSize: `${adjustedFont}px`,\n//       // stroke: \"#FFF\",\n//       // stroke: colors[country.CONTINENT],\n//       // strokeWidth: `${adjustedFont / 50}px`,\n//     },\n//     adjustedFont - 1,\n//   ];\n// };\nvar renderStyle=function renderStyle(area){if(area>5000000)return{fontSize:\"20px\"};if(area>2500000)return{fontSize:\"12px\"};if(area>1000000)return{fontSize:\"9px\"};if(area>500000)return{fontSize:\"7px\"};if(area>300000)return{fontSize:\"5px\"};if(area>200000)return{fontSize:\"4px\"};if(area>100000)return{fontSize:\"3px\"};if(area>70000)return{fontSize:\"2.5px\"};return{fontSize:\"2px\"};};var hoveredStyle=function hoveredStyle(color){return{fill:LightenDarkenColor(color,15),stroke:\"#000\",strokeWidth:borderWidth,outline:\"none\"};};var selectedStyle=function selectedStyle(color){return{fill:LightenDarkenColor(color,40),stroke:\"#000\",strokeWidth:borderWidth,outline:\"none\"};};// const [currPos, setCurrPos] = useState({\n//   zoom: mapProps.minZoom,\n//   coordinates: mapProps.coordinates,\n// });\nvar projection=geoMercator().scale(mapProps.scale).center(mapProps.center).rotate(mapProps.rotate);//Uncomment this to make map reset after guess\n// useEffect(() => {\n//   setCurrPos({\n//     zoom: 1,\n//     coordinates: [0, 40],\n//   });\n// }, [currLocation]);\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[loading?/*#__PURE__*/_jsx(\"h1\",{class:\"mapLoading\",children:\"Loading...\"}):/*#__PURE__*/_jsx(_Fragment,{}),/*#__PURE__*/_jsx(ComposableMap,{\"data-tip\":\"\",projection:projection,style:{width:\"100%\",height:\"auto\",outline:\"none\"},children:/*#__PURE__*/_jsxs(ZoomableGroup,{translateExtent:mapProps.translateExtent,minZoom:mapProps.minZoom,maxZoom:mapProps.maxZoom,zoom:mapProps.minZoom,center:mapProps.coordinates,children:[/*#__PURE__*/_jsx(Geographies,{geography:worldGeoSVG,children:function children(_ref2){var geographies=_ref2.geographies;return geographies.map(function(geo){return/*#__PURE__*/_jsx(Geography,{id:camelize(geo.properties.NAME),continent:geo.properties.CONTINENT,geography:geo,onClick:function onClick(event){setPressedStyle(geo.properties,event);handleNewChosen(geo.properties.NAME);},onMouseEnter:function onMouseEnter(event){if(!currSelectedCountry||currSelectedCountry.element.id!==event.target.id||!currSelectedCountry.element.classList.contains(\"pressed\")){event.target.style.fill=hoveredStyle(colors[event.target.getAttribute(\"continent\")]).fill;}},onMouseLeave:function onMouseLeave(event){if(currSelectedCountry&&currSelectedCountry.element.id===event.target.id&&currSelectedCountry.element.classList.contains(\"pressed\")){event.target.style.fill=selectedStyle(colors[event.target.getAttribute(\"continent\")]).fill;}else{event.target.style.fill=colors[event.target.getAttribute(\"continent\")];}},visibility:\"hidden\"},geo.rsmKey);});}}),worldCountries.map(function(country){if(loading||countriesToShow.indexOf(camelize(country.name.common))<0)return null;// const currStyle = renderStyle(country);\nreturn/*#__PURE__*/_jsx(Marker,{coordinates:country.name.common===\"Russia\"&&currMap===\"europe\"?[country.latlng[1]-57,country.latlng[0]-6]:[country.latlng[1],country.latlng[0]],fill:\"#000\",children:/*#__PURE__*/_jsx(\"text\",{textAnchor:\"middle\",pointerEvents:\"none\",style:renderStyle(country.area),children:country.name.common})},country.name.common);})]})})]});};export default/*#__PURE__*/memo(MapChart);","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js"],"names":["React","memo","useState","useEffect","ZoomableGroup","ComposableMap","Geographies","Geography","Marker","geoMercator","Playlists","worldCountries","require","worldGeoSVG","colors","borderWidth","LightenDarkenColor","col","amt","usePound","slice","num","parseInt","r","b","g","toString","camelize","word","toLowerCase","replaceAll","checkDifficulty","mapDifficulty","countryDifficulty","countriesToShow","currSelectedCountry","MapChart","handleNewChosen","mapProps","currMap","loading","setLoading","world","playlist","difficulty","push","country","console","log","waitForMapLoad","setInterval","document","querySelectorAll","length","clearInterval","countries","setAttribute","indexOf","id","getAttribute","setPressedStyle","event","target","classList","contains","element","prevCountry","querySelector","style","fill","props","CONTINENT","remove","selectedStyle","add","renderStyle","area","fontSize","hoveredStyle","color","stroke","strokeWidth","outline","projection","scale","center","rotate","width","height","translateExtent","minZoom","maxZoom","coordinates","geographies","map","geo","properties","NAME","rsmKey","name","common","latlng"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\n\nimport Playlists from \"./Playlists\";\nimport \"./Map.css\";\n\nconst worldCountries = require(\"./WorldInfo.json\");\n// const europeCountries = require(\"./EuropeInfo.json\");\n\nconst worldGeoSVG = require(\"./WorldSVG50m.json\");\nconst colors = require(\"./colors.json\");\n// const europeGeoSVG = require(\"./EuropeInfo.json\");\n\n// const locationInfo = {\n//   world: worldCountries,\n//   // europe: europeCountries,\n// };\n\n// const locationGeoSVG = {\n//   world: worldGeoSVG,\n// };\n\nconst borderWidth = 0.2;\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nconst camelize = (word) => {\n  return word[0].toLowerCase() + word.slice(1).replaceAll(\" \", \"\");\n};\n\nconst checkDifficulty = (mapDifficulty, countryDifficulty) => {\n  if (mapDifficulty === \"Easy\") return countryDifficulty === \"Easy\";\n  if (mapDifficulty === \"Medium\")\n    return countryDifficulty === \"Easy\" || countryDifficulty === \"Medium\";\n  //for some reason this necessary, otherwise it returns true even if mapDifficulty is Easy\n  if (mapDifficulty === \"Hard\") return true;\n  return false;\n};\n\nlet countriesToShow = [];\nlet currSelectedCountry = null;\nconst MapChart = ({ handleNewChosen, mapProps, currMap }) => {\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    countriesToShow = [];\n    let currSelectedCountry = null;\n    if (currMap.slice(0, 5) === \"world\") {\n      for (const playlist of Playlists.world) {\n        if (checkDifficulty(currMap.slice(5), playlist.difficulty))\n          countriesToShow.push(camelize(playlist.country));\n      }\n    } else {\n      for (const playlist of Playlists[currMap]) {\n        countriesToShow.push(camelize(playlist.country));\n      }\n    }\n    console.log(countriesToShow);\n    var waitForMapLoad = setInterval(function () {\n      if (document.querySelectorAll(\".rsm-geography\").length !== 0) {\n        clearInterval(waitForMapLoad);\n        setLoading(false);\n      }\n    }, 500);\n  }, [currMap]);\n\n  if (!loading) {\n    const countries = document.querySelectorAll(\".rsm-geography\");\n    for (const country of countries) {\n      country.setAttribute(\n        \"style\",\n        countriesToShow.indexOf(country.id) >= 0\n          ? `fill: ${\n              colors[country.getAttribute(\"continent\")]\n            }; pointer-events: all; stroke: #000000; stroke-width: ${borderWidth}; outline: none; visibility: visible;`\n          : `fill: #ccc; pointer-events: none; stroke: #000000; stroke-width: ${borderWidth}; outline: none; visibility: visible`\n      );\n    }\n  }\n\n  // style={{\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replaceAll(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : countriesToShow.indexOf(geo.properties.NAME) >= 0\n  //                         ? {\n  //                             fill: colors[geo.properties.CONTINENT],\n  //                             pointerEvents: \"all\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           }\n  //                         : {\n  //                             fill: \"#ccc\",\n  //                             pointerEvents: \"none\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           },\n  //                     hover:\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replaceAll(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : hoveredStyle(colors[geo.properties.CONTINENT]),\n  //                   }}\n\n  const setPressedStyle = (country, event) => {\n    if (currSelectedCountry) {\n      //if user clicked on already selected country, return\n      if (event.target.classList.contains(\"pressed\")) return;\n      if (!(currSelectedCountry.element.id === event.target.id)) {\n        const prevCountry = document.querySelector(\n          `#${currSelectedCountry.element.id}`\n        );\n        prevCountry.style.fill = colors[currSelectedCountry.props.CONTINENT];\n        prevCountry.classList.remove(\"pressed\");\n      }\n    }\n    currSelectedCountry = { element: event.target, props: country };\n    event.target.style.fill = selectedStyle(colors[country.CONTINENT]).fill;\n    event.target.classList.add(\"pressed\");\n  };\n\n  // const clearPressedStyle = () => {\n  //   if (currSelectedCountry) {\n  //     document.querySelector(`#${currSelectedCountry.element.id}`).style.fill =\n  //       colors[currSelectedCountry.props.CONTINENT];\n  //     currSelectedCountry = null;\n  //   }\n  // };\n\n  // const renderStyle = (country) => {\n  //   if (!country.area || country.area < 1500) return [{ fontSize: \"0px\" }, 0];\n  //   let adjustedFont =\n  //     country.area > 500000\n  //       ? country.area / 800000 + 4.5\n  //       : country.area / 800000 + 2.3;\n  //   if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n\n  //   if (country.name.common === \"Russia\" && currMap === \"europe\")\n  //     adjustedFont /= 2.5;\n  //   //const rightOffset = adjustedFont;\n  //   return [\n  //     {\n  //       fontSize: `${adjustedFont}px`,\n  //       // stroke: \"#FFF\",\n  //       // stroke: colors[country.CONTINENT],\n  //       // strokeWidth: `${adjustedFont / 50}px`,\n  //     },\n  //     adjustedFont - 1,\n  //   ];\n  // };\n\n  const renderStyle = (area) => {\n    if (area > 5000000) return { fontSize: \"20px\" };\n    if (area > 2500000) return { fontSize: \"12px\" };\n    if (area > 1000000) return { fontSize: \"9px\" };\n    if (area > 500000) return { fontSize: \"7px\" };\n    if (area > 300000) return { fontSize: \"5px\" };\n    if (area > 200000) return { fontSize: \"4px\" };\n    if (area > 100000) return { fontSize: \"3px\" };\n    if (area > 70000) return { fontSize: \"2.5px\" };\n    return { fontSize: \"2px\" };\n  };\n\n  const hoveredStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n  const selectedStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n\n  // const [currPos, setCurrPos] = useState({\n  //   zoom: mapProps.minZoom,\n  //   coordinates: mapProps.coordinates,\n  // });\n  const projection = geoMercator()\n    .scale(mapProps.scale)\n    .center(mapProps.center)\n    .rotate(mapProps.rotate);\n\n  //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [currLocation]);\n\n  return (\n    <>\n      {loading ? <h1 class=\"mapLoading\">Loading...</h1> : <></>}\n      <ComposableMap\n        data-tip=\"\"\n        projection={projection}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n          outline: \"none\",\n        }}\n      >\n        <ZoomableGroup\n          translateExtent={mapProps.translateExtent}\n          minZoom={mapProps.minZoom}\n          maxZoom={mapProps.maxZoom}\n          zoom={mapProps.minZoom}\n          center={mapProps.coordinates}\n        >\n          <Geographies geography={worldGeoSVG}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                return (\n                  <Geography\n                    id={camelize(geo.properties.NAME)}\n                    continent={geo.properties.CONTINENT}\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onClick={(event) => {\n                      setPressedStyle(geo.properties, event);\n                      handleNewChosen(geo.properties.NAME);\n                    }}\n                    onMouseEnter={(event) => {\n                      if (\n                        !currSelectedCountry ||\n                        currSelectedCountry.element.id !== event.target.id ||\n                        !currSelectedCountry.element.classList.contains(\n                          \"pressed\"\n                        )\n                      ) {\n                        event.target.style.fill = hoveredStyle(\n                          colors[event.target.getAttribute(\"continent\")]\n                        ).fill;\n                      }\n                    }}\n                    onMouseLeave={(event) => {\n                      if (\n                        currSelectedCountry &&\n                        currSelectedCountry.element.id === event.target.id &&\n                        currSelectedCountry.element.classList.contains(\n                          \"pressed\"\n                        )\n                      ) {\n                        event.target.style.fill = selectedStyle(\n                          colors[event.target.getAttribute(\"continent\")]\n                        ).fill;\n                      } else {\n                        event.target.style.fill =\n                          colors[event.target.getAttribute(\"continent\")];\n                      }\n                    }}\n                    visibility={\"hidden\"}\n                  />\n                );\n              })\n            }\n          </Geographies>\n          {worldCountries.map((country) => {\n            if (\n              loading ||\n              countriesToShow.indexOf(camelize(country.name.common)) < 0\n            )\n              return null;\n            // const currStyle = renderStyle(country);\n            return (\n              <Marker\n                key={country.name.common}\n                coordinates={\n                  country.name.common === \"Russia\" && currMap === \"europe\"\n                    ? [country.latlng[1] - 57, country.latlng[0] - 6]\n                    : [country.latlng[1], country.latlng[0]]\n                }\n                fill=\"#000\"\n              >\n                <text\n                  textAnchor=\"middle\"\n                  pointerEvents=\"none\"\n                  style={renderStyle(country.area)}\n                >\n                  {country.name.common}\n                </text>\n                {/* {currPos.zoom * 2 + currStyle[1] > 9 ? (\n                  currStyle[1] > country.name.common.length ? (\n                    <text\n                      textAnchor=\"middle\"\n                      pointerEvents=\"none\"\n                      style={currStyle[0]}\n                    >\n                      {country.name.common}\n                    </text>\n                  ) : (\n                    country.name.common.split(\" \").map((word, index) => {\n                      return (\n                        <text\n                          key={word + index}\n                          textRendering=\"optimizeSpeed\"\n                          textAnchor=\"middle\"\n                          pointerEvents=\"none\"\n                          y={(currStyle[1] / 1.3 + 1.3) * index}\n                          style={currStyle[0]}\n                        >\n                          {word}\n                        </text>\n                      );\n                    })\n                  )\n                ) : (\n                  <></>\n                )} */}\n              </Marker>\n            );\n          })}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}