{"ast":null,"code":"/**\n * @module ol/centerconstraint\n */\nimport { clamp } from './math.js';\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\n\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [opt_centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, opt_isMoving, opt_centerShift) {\n      if (center) {\n        var viewWidth = onlyCenter ? 0 : size[0] * resolution;\n        var viewHeight = onlyCenter ? 0 : size[1] * resolution;\n        var shiftX = opt_centerShift ? opt_centerShift[0] : 0;\n        var shiftY = opt_centerShift ? opt_centerShift[1] : 0;\n        var minX = extent[0] + viewWidth / 2 + shiftX;\n        var maxX = extent[2] - viewWidth / 2 + shiftX;\n        var minY = extent[1] + viewHeight / 2 + shiftY;\n        var maxY = extent[3] - viewHeight / 2 + shiftY; // note: when zooming out of bounds, min and max values for x and y may\n        // end up inverted (min > max); this has to be accounted for\n\n        if (minX > maxX) {\n          minX = (maxX + minX) / 2;\n          maxX = minX;\n        }\n\n        if (minY > maxY) {\n          minY = (maxY + minY) / 2;\n          maxY = minY;\n        }\n\n        var x = clamp(center[0], minX, maxX);\n        var y = clamp(center[1], minY, maxY);\n        var ratio = 30 * resolution; // during an interaction, allow some overscroll\n\n        if (opt_isMoving && smooth) {\n          x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) + ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n          y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) + ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n        }\n\n        return [x, y];\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\n\nexport function none(center) {\n  return center;\n}","map":{"version":3,"sources":["src/centerconstraint.js"],"names":[],"mappings":"AAAA;;AAEG;AACH,SAAQ,KAAR,QAAoB,WAApB;AAEA;;AAEG;;AAEH;;;;;;AAMG;;AACH,OAAM,SAAU,YAAV,CAAuB,MAAvB,EAA+B,UAA/B,EAA2C,MAA3C,EAAiD;AACrD;AACE;;;;;;;AAOG;AACH,cAAU,MAAV,EAAkB,UAAlB,EAA8B,IAA9B,EAAoC,YAApC,EAAkD,eAAlD,EAAiE;AAC/D,UAAI,MAAJ,EAAY;AACV,YAAM,SAAS,GAAG,UAAU,GAAG,CAAH,GAAO,IAAI,CAAC,CAAD,CAAJ,GAAU,UAA7C;AACA,YAAM,UAAU,GAAG,UAAU,GAAG,CAAH,GAAO,IAAI,CAAC,CAAD,CAAJ,GAAU,UAA9C;AACA,YAAM,MAAM,GAAG,eAAe,GAAG,eAAe,CAAC,CAAD,CAAlB,GAAwB,CAAtD;AACA,YAAM,MAAM,GAAG,eAAe,GAAG,eAAe,CAAC,CAAD,CAAlB,GAAwB,CAAtD;AACA,YAAI,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,GAAY,SAAS,GAAG,CAAxB,GAA4B,MAAvC;AACA,YAAI,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,GAAY,SAAS,GAAG,CAAxB,GAA4B,MAAvC;AACA,YAAI,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,GAAY,UAAU,GAAG,CAAzB,GAA6B,MAAxC;AACA,YAAI,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,GAAY,UAAU,GAAG,CAAzB,GAA6B,MAAxC,CARU,CAUV;AACA;;AACA,YAAI,IAAI,GAAG,IAAX,EAAiB;AACf,UAAA,IAAI,GAAG,CAAC,IAAI,GAAG,IAAR,IAAgB,CAAvB;AACA,UAAA,IAAI,GAAG,IAAP;AACD;;AACD,YAAI,IAAI,GAAG,IAAX,EAAiB;AACf,UAAA,IAAI,GAAG,CAAC,IAAI,GAAG,IAAR,IAAgB,CAAvB;AACA,UAAA,IAAI,GAAG,IAAP;AACD;;AAED,YAAI,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,IAAZ,EAAkB,IAAlB,CAAb;AACA,YAAI,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,IAAZ,EAAkB,IAAlB,CAAb;AACA,YAAM,KAAK,GAAG,KAAK,UAAnB,CAvBU,CAyBV;;AACA,YAAI,YAAY,IAAI,MAApB,EAA4B;AAC1B,UAAA,CAAC,IACC,CAAC,KAAD,GAAS,IAAI,CAAC,GAAL,CAAS,IAAI,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,GAAG,MAAM,CAAC,CAAD,CAAzB,IAAgC,KAA7C,CAAT,GACA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,MAAM,CAAC,CAAD,CAAN,GAAY,IAAxB,IAAgC,KAA7C,CAFV;AAGA,UAAA,CAAC,IACC,CAAC,KAAD,GAAS,IAAI,CAAC,GAAL,CAAS,IAAI,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,GAAG,MAAM,CAAC,CAAD,CAAzB,IAAgC,KAA7C,CAAT,GACA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,MAAM,CAAC,CAAD,CAAN,GAAY,IAAxB,IAAgC,KAA7C,CAFV;AAGD;;AAED,eAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACD,OApCD,MAoCO;AACL,eAAO,SAAP;AACD;AACF;AAjDH;AAmDD;AAED;;;AAGG;;AACH,OAAM,SAAU,IAAV,CAAe,MAAf,EAAqB;AACzB,SAAO,MAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @module ol/centerconstraint\n */\nimport { clamp } from './math.js';\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\nexport function createExtent(extent, onlyCenter, smooth) {\n    return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [opt_centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, opt_isMoving, opt_centerShift) {\n        if (center) {\n            var viewWidth = onlyCenter ? 0 : size[0] * resolution;\n            var viewHeight = onlyCenter ? 0 : size[1] * resolution;\n            var shiftX = opt_centerShift ? opt_centerShift[0] : 0;\n            var shiftY = opt_centerShift ? opt_centerShift[1] : 0;\n            var minX = extent[0] + viewWidth / 2 + shiftX;\n            var maxX = extent[2] - viewWidth / 2 + shiftX;\n            var minY = extent[1] + viewHeight / 2 + shiftY;\n            var maxY = extent[3] - viewHeight / 2 + shiftY;\n            // note: when zooming out of bounds, min and max values for x and y may\n            // end up inverted (min > max); this has to be accounted for\n            if (minX > maxX) {\n                minX = (maxX + minX) / 2;\n                maxX = minX;\n            }\n            if (minY > maxY) {\n                minY = (maxY + minY) / 2;\n                maxY = minY;\n            }\n            var x = clamp(center[0], minX, maxX);\n            var y = clamp(center[1], minY, maxY);\n            var ratio = 30 * resolution;\n            // during an interaction, allow some overscroll\n            if (opt_isMoving && smooth) {\n                x +=\n                    -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +\n                        ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n                y +=\n                    -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +\n                        ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n            }\n            return [x, y];\n        }\n        else {\n            return undefined;\n        }\n    });\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\nexport function none(center) {\n    return center;\n}\n//# sourceMappingURL=centerconstraint.js.map"]},"metadata":{},"sourceType":"module"}