{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/Play.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\nimport MapPage from \"./MapPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Playlists = require(\"./Playlists.json\");\n\nconst Play = props => {\n  _s();\n\n  const [currTrack, setCurrTrack] = useState({});\n  const [redirect, setRedirect] = useState(\"\");\n  const [mapContent, setMapContent] = useState(\"\");\n  const [currChosen, setCurrChosen] = useState(\"\");\n  const [popupOpen, setPopupOpen] = useState(false);\n  const audioRef = useRef(null); //const imageRef = useRef(null);\n  //props.spotifyApi.setAccessToken(props.token);\n\n  const getNewArtist = () => {\n    if (props.accessToken === null || props.accessToken === \"\") {\n      console.log(\"REDIRECTING\");\n      setRedirect(\"login\");\n      return;\n    }\n\n    const currPlaylistIndex = Math.floor(Math.random() * Playlists.length);\n    fetch(`https://api.spotify.com/v1/playlists/${Playlists[currPlaylistIndex]}`, {\n      headers: {\n        Authorization: \"Bearer \" + props.accessToken\n      }\n    }).then(response => response.json()).then(data => {\n      let track = \"\";\n      let artist = \"\";\n      let country = \"\";\n\n      while (track === \"\") {\n        const chosenIndex = Math.floor(Math.random() * data.tracks.items.length);\n        const possibleTrack = data.tracks.items[chosenIndex].track;\n\n        if (possibleTrack != null) {\n          track = possibleTrack;\n          artist = data.tracks.items[chosenIndex].track.artists[0].name;\n          country = data.name;\n        }\n      }\n\n      setCurrTrack({\n        artist,\n        country,\n        image: track.album.images[0].url,\n        track: track.preview_url\n      });\n      audioRef.current.load();\n      audioRef.current.play();\n    });\n  };\n\n  const guessGiven = () => {\n    setPopupOpen(true); // if (currTrack.country === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.country}!`);\n    // }\n    // getNewArtist();\n  };\n\n  const goToMap = () => {\n    setRedirect(\"map\");\n  };\n\n  useEffect(() => {\n    getNewArtist();\n  }, []);\n  if (redirect === \"login\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 36\n  }, this);else if (redirect === \"map\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 39\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Country: \", currTrack.country]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        id: \"music\",\n        ref: audioRef,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          volume: \"2\",\n          allow: \"autoplay\",\n          src: currTrack.track,\n          type: \"audio/mpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapPage, { ...props,\n      setTooltipContent: setMapContent,\n      setCurrChosen: setCurrChosen,\n      currChosen: currChosen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n      children: mapContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Curr Guess: \", currChosen]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: guessGiven,\n        children: \"Submit Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), popupOpen && /*#__PURE__*/_jsxDEV(\"popupOpen\", {\n      currTrack: true,\n      currChosen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Play, \"E1giwZW2ISe6ea6aBuGW8pUdSRE=\");\n\n_c = Play;\nexport default Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/Play.js"],"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactTooltip","MapPage","Playlists","require","Play","props","currTrack","setCurrTrack","redirect","setRedirect","mapContent","setMapContent","currChosen","setCurrChosen","popupOpen","setPopupOpen","audioRef","getNewArtist","accessToken","console","log","currPlaylistIndex","Math","floor","random","length","fetch","headers","Authorization","then","response","json","data","track","artist","country","chosenIndex","tracks","items","possibleTrack","artists","name","image","album","images","url","preview_url","current","load","play","guessGiven","goToMap"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport MapPage from \"./MapPage\";\n\nconst Playlists = require(\"./Playlists.json\");\nconst Play = (props) => {\n  const [currTrack, setCurrTrack] = useState({});\n  const [redirect, setRedirect] = useState(\"\");\n\n  const [mapContent, setMapContent] = useState(\"\");\n  const [currChosen, setCurrChosen] = useState(\"\");\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  const audioRef = useRef(null);\n  //const imageRef = useRef(null);\n  //props.spotifyApi.setAccessToken(props.token);\n\n  const getNewArtist = () => {\n    if (props.accessToken === null || props.accessToken === \"\") {\n      console.log(\"REDIRECTING\");\n      setRedirect(\"login\");\n      return;\n    }\n\n    const currPlaylistIndex = Math.floor(Math.random() * Playlists.length);\n    fetch(\n      `https://api.spotify.com/v1/playlists/${Playlists[currPlaylistIndex]}`,\n      {\n        headers: { Authorization: \"Bearer \" + props.accessToken },\n      }\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        let track = \"\";\n        let artist = \"\";\n        let country = \"\";\n        while (track === \"\") {\n          const chosenIndex = Math.floor(\n            Math.random() * data.tracks.items.length\n          );\n          const possibleTrack = data.tracks.items[chosenIndex].track;\n          if (possibleTrack != null) {\n            track = possibleTrack;\n            artist = data.tracks.items[chosenIndex].track.artists[0].name;\n            country = data.name;\n          }\n        }\n        setCurrTrack({\n          artist,\n          country,\n          image: track.album.images[0].url,\n          track: track.preview_url,\n        });\n        audioRef.current.load();\n        audioRef.current.play();\n      });\n  };\n\n  const guessGiven = () => {\n    setPopupOpen(true);\n    // if (currTrack.country === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.country}!`);\n    // }\n    // getNewArtist();\n  };\n\n  const goToMap = () => {\n    setRedirect(\"map\");\n  };\n\n  useEffect(() => {\n    getNewArtist();\n  }, []);\n\n  if (redirect === \"login\") return <Redirect to=\"/login\" />;\n  else if (redirect === \"map\") return <Redirect to=\"/map\" />;\n  return (\n    <>\n      <h2>Country: {currTrack.country}</h2>\n      {/* <div>\n        <span>\n          <h2>Artist: {currTrack.artist}</h2>\n          <h2>Country: {currTrack.country}</h2>\n        </span>\n        <span>\n          <img src={currTrack.image} alt=\"Album image\" width=\"300\" height=\"300\"></img>\n        </span>\n      </div> */}\n      <div>\n        <audio controls id=\"music\" ref={audioRef}>\n          <source\n            volume=\"2\"\n            allow=\"autoplay\"\n            src={currTrack.track}\n            type=\"audio/mpeg\"\n          ></source>\n          {/* Your browser does not support the audio element. */}\n        </audio>\n      </div>\n      <MapPage\n        {...props}\n        setTooltipContent={setMapContent}\n        setCurrChosen={setCurrChosen}\n        currChosen={currChosen}\n      />\n      <ReactTooltip>{mapContent}</ReactTooltip>\n      <div>\n        <h2>Curr Guess: {currChosen}</h2>\n      </div>\n      <div>\n        <button onClick={guessGiven}>Submit Guess</button>\n      </div>\n      {popupOpen && <popupOpen currTrack currChosen />}\n      {/* <div>\n        <button onClick={getNewArtist}>New Song</button>\n      </div>\n      <div>\n        <button onClick={goToMap}>Map</button>\n      </div> */}\n    </>\n  );\n};\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}