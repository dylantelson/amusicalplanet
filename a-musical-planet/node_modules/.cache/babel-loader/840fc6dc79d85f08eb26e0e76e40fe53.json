{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst countries = require(\"./countriesInfo.json\");\n\nconst geoSVG = require(\"./countriesSVG.json\");\n\nconst borderWidth = 0.2;\nconst colors = {\n  Asia: \"#E5B961\",\n  Europe: \"#D4A29C\",\n  Africa: \"#EDCC8B\",\n  SouthAmerica: \"#E8B298\",\n  NorthAmerica: \"#C7877F\",\n  Oceania: \"#7FC6A4\",\n  Water: \"#BDD1C5\",\n  Russia: \"#DDAE7F\",\n  Selected: \"#FFAAFA\"\n};\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n  var r = (num >> 16) + amt;\n  if (r > 255) r = 255;else if (r < 0) r = 0;\n  var b = (num >> 8 & 0x00ff) + amt;\n  if (b > 255) b = 255;else if (b < 0) b = 0;\n  var g = (num & 0x0000ff) + amt;\n  if (g > 255) g = 255;else if (g < 0) g = 0;\n  return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n}\n\n_c = LightenDarkenColor;\n\nconst renderStyle = country => {\n  if (!country.area) return [{\n    fontSize: \"0px\"\n  }, 0];\n  let adjustedFont = country.area > 500000 ? country.area / 800000 + 4.5 : country.area / 800000 + 2.3;\n  if (adjustedFont <= country.name.length) adjustedFont = adjustedFont / 1.3; //const rightOffset = adjustedFont;\n\n  return [{\n    fontSize: `${adjustedFont}px`,\n    //stroke: \"#FFF\",\n    stroke: colors[country.CONTINENT],\n    strokeWidth: `${adjustedFont / 50}px`\n  }, adjustedFont - 1];\n};\n\nconst MapChart = props => {\n  _s();\n\n  const hoveredStyle = color => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\"\n    };\n  };\n\n  const selectedStyle = color => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\"\n    };\n  };\n\n  const [currPos, setCurrPos] = useState({\n    zoom: 1,\n    coordinates: [0, 0]\n  });\n  const projection = geoMercator().scale(170).center([40, 40]).rotate([-10, 0, 0]); //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [props.currCountry]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      \"data-tip\": \"\",\n      projection: projection,\n      style: {\n        width: \"100%\",\n        height: \"auto\",\n        outline: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup // translateExtent={[\n      //   [-100, -50],\n      //   [860, 600],\n      // ]}\n      , {\n        onMoveEnd: ({\n          zoom,\n          coordinates\n        }) => {\n          setCurrPos({\n            zoom: zoom,\n            coordinates: coordinates\n          });\n        },\n        maxZoom: 6,\n        zoom: currPos.zoom,\n        center: currPos.coordinates,\n        children: [/*#__PURE__*/_jsxDEV(Geographies, {\n          geography: geoSVG,\n          children: ({\n            geographies\n          }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            onClick: () => {\n              props.setCurrChosen(geo.properties.NAME);\n            },\n            visibility: geo.properties.CONTINENT === \"Antarctica\" ? \"hidden\" : \"visible\",\n            style: {\n              default: props.currChosen === geo.properties.NAME ? selectedStyle(colors[geo.properties.CONTINENT]) : {\n                fill: colors[geo.properties.CONTINENT],\n                stroke: \"#000000\",\n                strokeWidth: borderWidth,\n                outline: \"none\"\n              },\n              hover: props.currChosen === geo.properties.NAME ? selectedStyle(colors[geo.properties.CONTINENT]) : hoveredStyle(colors[geo.properties.CONTINENT])\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), countries.map(country => {\n          const currStyle = renderStyle(country);\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            coordinates: [country.latlng[1], country.latlng[0]],\n            fill: \"#000\",\n            children: currPos.zoom * 2 + currStyle[1] > 9 ? currStyle[1] > country.name.length ? /*#__PURE__*/_jsxDEV(\"text\", {\n              textAnchor: \"middle\",\n              pointerEvents: \"none\",\n              style: currStyle[0],\n              children: country.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 21\n            }, this) : country.name.split(\" \").map((word, index) => {\n              return /*#__PURE__*/_jsxDEV(\"text\", {\n                textRendering: \"optimizeSpeed\",\n                textAnchor: \"middle\",\n                pointerEvents: \"none\",\n                y: (currStyle[1] / 1.3 + 1.3) * index,\n                style: currStyle[0],\n                children: word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 25\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MapChart, \"BLpefoHJaIk3cJIRZ6vwuiHVVEM=\");\n\n_c2 = MapChart;\nexport default _c3 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LightenDarkenColor\");\n$RefreshReg$(_c2, \"MapChart\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js"],"names":["React","memo","useState","ZoomableGroup","ComposableMap","Geographies","Geography","Marker","geoMercator","countries","require","geoSVG","borderWidth","colors","Asia","Europe","Africa","SouthAmerica","NorthAmerica","Oceania","Water","Russia","Selected","LightenDarkenColor","col","amt","usePound","slice","num","parseInt","r","b","g","toString","renderStyle","country","area","fontSize","adjustedFont","name","length","stroke","CONTINENT","strokeWidth","MapChart","props","hoveredStyle","color","fill","outline","selectedStyle","currPos","setCurrPos","zoom","coordinates","projection","scale","center","rotate","width","height","geographies","map","geo","setCurrChosen","properties","NAME","default","currChosen","hover","rsmKey","currStyle","latlng","split","word","index"],"mappings":"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","sourcesContent":["import React, { memo, useState } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\n\nimport \"./Map.css\";\n\nconst countries = require(\"./countriesInfo.json\");\n\nconst geoSVG = require(\"./countriesSVG.json\");\n\nconst borderWidth = 0.2;\n\nconst colors = {\n  Asia: \"#E5B961\",\n  Europe: \"#D4A29C\",\n  Africa: \"#EDCC8B\",\n  SouthAmerica: \"#E8B298\",\n  NorthAmerica: \"#C7877F\",\n  Oceania: \"#7FC6A4\",\n  Water: \"#BDD1C5\",\n  Russia: \"#DDAE7F\",\n  Selected: \"#FFAAFA\",\n};\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nconst renderStyle = (country) => {\n  if (!country.area) return [{ fontSize: \"0px\" }, 0];\n  let adjustedFont =\n    country.area > 500000\n      ? country.area / 800000 + 4.5\n      : country.area / 800000 + 2.3;\n  if (adjustedFont <= country.name.length) adjustedFont = adjustedFont / 1.3;\n  //const rightOffset = adjustedFont;\n  return [\n    {\n      fontSize: `${adjustedFont}px`,\n      //stroke: \"#FFF\",\n      stroke: colors[country.CONTINENT],\n      strokeWidth: `${adjustedFont / 50}px`,\n    },\n    adjustedFont - 1,\n  ];\n};\n\nconst MapChart = (props) => {\n  const hoveredStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n  const selectedStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n\n  const [currPos, setCurrPos] = useState({ zoom: 1, coordinates: [0, 0] });\n  const projection = geoMercator()\n    .scale(170)\n    .center([40, 40])\n    .rotate([-10, 0, 0]);\n\n  //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [props.currCountry]);\n\n  return (\n    <>\n      <ComposableMap\n        data-tip=\"\"\n        projection={projection}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n          outline: \"none\",\n        }}\n      >\n        <ZoomableGroup\n          // translateExtent={[\n          //   [-100, -50],\n          //   [860, 600],\n          // ]}\n          onMoveEnd={({ zoom, coordinates }) => {\n            setCurrPos({\n              zoom: zoom,\n              coordinates: coordinates,\n            });\n          }}\n          maxZoom={6}\n          zoom={currPos.zoom}\n          center={currPos.coordinates}\n        >\n          <Geographies geography={geoSVG}>\n            {({ geographies }) =>\n              geographies.map((geo) => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onClick={() => {\n                    props.setCurrChosen(geo.properties.NAME);\n                  }}\n                  visibility={\n                    geo.properties.CONTINENT === \"Antarctica\"\n                      ? \"hidden\"\n                      : \"visible\"\n                  }\n                  style={{\n                    default:\n                      props.currChosen === geo.properties.NAME\n                        ? selectedStyle(colors[geo.properties.CONTINENT])\n                        : {\n                            fill: colors[geo.properties.CONTINENT],\n                            stroke: \"#000000\",\n                            strokeWidth: borderWidth,\n                            outline: \"none\",\n                          },\n                    hover:\n                      props.currChosen === geo.properties.NAME\n                        ? selectedStyle(colors[geo.properties.CONTINENT])\n                        : hoveredStyle(colors[geo.properties.CONTINENT]),\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n          {countries.map((country) => {\n            const currStyle = renderStyle(country);\n            return (\n              <Marker\n                coordinates={[country.latlng[1], country.latlng[0]]}\n                fill=\"#000\"\n              >\n                {currPos.zoom * 2 + currStyle[1] > 9 ? (\n                  currStyle[1] > country.name.length ? (\n                    <text\n                      textAnchor=\"middle\"\n                      pointerEvents=\"none\"\n                      style={currStyle[0]}\n                    >\n                      {country.name}\n                    </text>\n                  ) : (\n                    country.name.split(\" \").map((word, index) => {\n                      return (\n                        <text\n                          textRendering=\"optimizeSpeed\"\n                          textAnchor=\"middle\"\n                          pointerEvents=\"none\"\n                          y={(currStyle[1] / 1.3 + 1.3) * index}\n                          style={currStyle[0]}\n                        >\n                          {word}\n                        </text>\n                      );\n                    })\n                  )\n                ) : (\n                  <></>\n                )}\n              </Marker>\n            );\n          })}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}