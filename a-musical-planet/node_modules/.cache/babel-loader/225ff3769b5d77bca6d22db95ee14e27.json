{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Modify\n */\n\n\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals, includes } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from '../proj.js';\nimport { getUid } from '../util.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\n * @enum {string}\n */\n\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {import(\"../Feature\").FeatureLike} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\n\nvar ModifyEvent = function (_super) {\n  __extends(ModifyEvent, _super);\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<import(\"../Feature\").FeatureLike>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} MapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent}.\n   */\n\n\n  function ModifyEvent(type, features, MapBrowserEvent) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The features being modified.\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @api\n     */\n\n\n    _this.features = features;\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n\n    _this.mapBrowserEvent = MapBrowserEvent;\n    return _this;\n  }\n\n  return ModifyEvent;\n}(Event);\n\nexport { ModifyEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerane`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\n\nvar Modify = function (_super) {\n  __extends(Modify, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function Modify(options) {\n    var _this = _super.call(this, options) || this;\n    /***\n     * @type {ModifyOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {ModifyOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n\n    _this.once;\n    /***\n     * @type {ModifyOnSignature<void>}\n     */\n\n    _this.un;\n    /** @private */\n\n    _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : primaryAction;\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n\n    _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n\n\n    _this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : _this.defaultDeleteCondition_;\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n\n    _this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n    /**\n     * Editing vertex.\n     * @type {Feature}\n     * @private\n     */\n\n    _this.vertexFeature_ = null;\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n\n    _this.vertexSegments_ = null;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n    _this.lastPixel_ = [0, 0];\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n\n    _this.ignoreNextSingleClick_ = false;\n    /**\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @private\n     */\n\n    _this.featuresBeingModified_ = null;\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n\n    _this.rBush_ = new RBush();\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.snappedToVertex_ = false;\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n\n    _this.changingFeature_ = false;\n    /**\n     * @type {Array}\n     * @private\n     */\n\n    _this.dragSegments_ = [];\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n\n    _this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n\n    _this.SEGMENT_WRITERS_ = {\n      'Point': _this.writePointGeometry_.bind(_this),\n      'LineString': _this.writeLineStringGeometry_.bind(_this),\n      'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n      'Polygon': _this.writePolygonGeometry_.bind(_this),\n      'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n      'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n      'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n      'Circle': _this.writeCircleGeometry_.bind(_this),\n      'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this)\n    };\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n\n    _this.source_ = null;\n    /**\n     * @type {boolean|import(\"../layer/BaseVector\").default}\n     */\n\n    _this.hitDetection_ = null;\n    var features;\n\n    if (options.features) {\n      features = options.features;\n    } else if (options.source) {\n      _this.source_ = options.source;\n      features = new Collection(_this.source_.getFeatures());\n\n      _this.source_.addEventListener(VectorEventType.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n\n      _this.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n    }\n\n    if (!features) {\n      throw new Error('The modify interaction requires features, a source or a layer');\n    }\n\n    if (options.hitDetection) {\n      _this.hitDetection_ = options.hitDetection;\n    }\n    /**\n     * @type {Collection<import(\"../Feature.js\").FeatureLike>}\n     * @private\n     */\n\n\n    _this.features_ = features;\n\n    _this.features_.forEach(_this.addFeature_.bind(_this));\n\n    _this.features_.addEventListener(CollectionEventType.ADD, _this.handleFeatureAdd_.bind(_this));\n\n    _this.features_.addEventListener(CollectionEventType.REMOVE, _this.handleFeatureRemove_.bind(_this));\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n\n\n    _this.lastPointerEvent_ = null;\n    /**\n     * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n     * @type {Array<number>}\n     */\n\n    _this.delta_ = [0, 0];\n    /**\n     * @private\n     */\n\n    _this.snapToPointer_ = options.snapToPointer === undefined ? !_this.hitDetection_ : options.snapToPointer;\n    return _this;\n  }\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.addFeature_ = function (feature) {\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n\n    var map = this.getMap();\n\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n   * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n   * @private\n   */\n\n\n  Modify.prototype.willModifyFeatures_ = function (evt, segments) {\n    if (!this.featuresBeingModified_) {\n      this.featuresBeingModified_ = new Collection();\n      var features = this.featuresBeingModified_.getArray();\n\n      for (var i = 0, ii = segments.length; i < ii; ++i) {\n        var segment = segments[i];\n\n        for (var s = 0, ss = segment.length; s < ss; ++s) {\n          var feature = segment[s].feature;\n\n          if (feature && features.indexOf(feature) === -1) {\n            this.featuresBeingModified_.push(feature);\n          }\n        }\n      }\n\n      if (this.featuresBeingModified_.getLength() === 0) {\n        this.featuresBeingModified_ = null;\n      } else {\n        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.removeFeature_ = function (feature) {\n    this.removeFeatureSegmentData_(feature); // Remove the vertex feature if the collection of canditate features is empty.\n\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n    var rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n\n    var nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      var nodeToRemove = nodesToRemove[i];\n\n      for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n\n      rBush.remove(nodeToRemove);\n    }\n  };\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n\n\n  Modify.prototype.setActive = function (active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    _super.prototype.setActive.call(this, active);\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n\n\n  Modify.prototype.setMap = function (map) {\n    this.overlay_.setMap(map);\n\n    _super.prototype.setMap.call(this, map);\n  };\n  /**\n   * Get the overlay layer that this interaction renders the modification point or vertex to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n\n\n  Modify.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleSourceAdd_ = function (event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleSourceRemove_ = function (event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureAdd_ = function (evt) {\n    this.addFeature_(evt.element);\n  };\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureChange_ = function (evt) {\n    if (!this.changingFeature_) {\n      var feature = evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureRemove_ = function (evt) {\n    var feature = evt.element;\n    this.removeFeature_(feature);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    /** @type {SegmentData} */\n\n    var segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n    var points = geometry.getCoordinates();\n\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      /** @type {SegmentData} */\n\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      /** @type {SegmentData} */\n\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n    var lines = geometry.getCoordinates();\n\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n    var rings = geometry.getCoordinates();\n\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n    var polygons = geometry.getCoordinates();\n\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          /** @type {SegmentData} */\n\n          var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCenter();\n    /** @type {SegmentData} */\n\n    var centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    /** @type {SegmentData} */\n\n    var circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    var circleGeometry = geometry;\n    var userProjection = getUserProjection();\n\n    if (userProjection && this.getMap()) {\n      var projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n      circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n    }\n\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n    var geometries = geometry.getGeometriesArray();\n\n    for (var i = 0; i < geometries.length; ++i) {\n      var geometry_1 = geometries[i];\n      var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n      writer(feature, geometry_1);\n    }\n  };\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {Array<import(\"../Feature\").FeatureLike>} features The features being modified.\n   * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n\n\n  Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates, features, geometries) {\n    var vertexFeature = this.vertexFeature_;\n\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n\n    vertexFeature.set('features', features);\n    vertexFeature.set('geometries', geometries);\n    return vertexFeature;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n\n\n  Modify.prototype.handleEvent = function (mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    this.lastPointerEvent_ = mapBrowserEvent;\n    var handled;\n\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n  };\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   */\n\n\n  Modify.prototype.handleDragEvent = function (evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt, this.dragSegments_);\n    var vertex = [evt.coordinate[0] + this.delta_[0], evt.coordinate[1] + this.delta_[1]];\n    var features = [];\n    var geometries = [];\n\n    for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      var dragSegment = this.dragSegments_[i];\n      var segmentData = dragSegment[0];\n      var feature = segmentData.feature;\n\n      if (features.indexOf(feature) === -1) {\n        features.push(feature);\n      }\n\n      var geometry = segmentData.geometry;\n\n      if (geometries.indexOf(geometry) === -1) {\n        geometries.push(geometry);\n      }\n\n      var depth = segmentData.depth;\n      var coordinates = void 0;\n      var segment = segmentData.segment;\n      var index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case GeometryType.POINT:\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n\n        case GeometryType.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n\n        case GeometryType.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.CIRCLE:\n          segment[0] = vertex;\n          segment[1] = vertex;\n\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            var projection = evt.map.getView().getProjection();\n            var radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n            var userProjection = getUserProjection();\n\n            if (userProjection) {\n              var circleGeometry = geometry.clone().transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry.transform(projection, userProjection).getRadius();\n            }\n\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n\n    this.createOrUpdateVertexFeature_(vertex, features, geometries);\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  Modify.prototype.handleDownEvent = function (evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n\n    var pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.featuresBeingModified_ = null;\n    var vertexFeature = this.vertexFeature_;\n\n    if (vertexFeature) {\n      var projection = evt.map.getView().getProjection();\n      var insertVertices = [];\n      var vertex = vertexFeature.getGeometry().getCoordinates();\n      var vertexExtent = boundingExtent([vertex]);\n      var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      var componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n\n      for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        var segmentDataMatch = segmentDataMatches[i];\n        var segment = segmentDataMatch.segment;\n        var uid = getUid(segmentDataMatch.geometry);\n        var depth = segmentDataMatch.depth;\n\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n\n        if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n\n          continue;\n        }\n\n        if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n\n        if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n          // prevent dragging closed linestrings by the connecting node\n          if ((segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING || segmentDataMatch.geometry.getType() === GeometryType.MULTI_LINE_STRING) && componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            continue;\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n\n        if (getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1] && this.insertVertexCondition_(evt)) {\n          insertVertices.push(segmentDataMatch);\n        }\n      }\n\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt, [insertVertices]);\n      }\n\n      for (var j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_(insertVertices[j], vertex);\n      }\n    }\n\n    return !!this.vertexFeature_;\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  Modify.prototype.handleUpEvent = function (evt) {\n    for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n      var segmentData = this.dragSegments_[i][0];\n      var geometry = segmentData.geometry;\n\n      if (geometry.getType() === GeometryType.CIRCLE) {\n        // Update a circle object in the R* bush:\n        var coordinates = geometry.getCenter();\n        var centerSegmentData = segmentData.featureSegments[0];\n        var circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        var circleGeometry = geometry;\n        var userProjection = getUserProjection();\n\n        if (userProjection) {\n          var projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n        }\n\n        this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n\n    if (this.featuresBeingModified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      this.featuresBeingModified_ = null;\n    }\n\n    return false;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handlePointerMove_ = function (evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  };\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_coordinate] The pixel Coordinate.\n   * @private\n   */\n\n\n  Modify.prototype.handlePointerAtPixel_ = function (pixel, map, opt_coordinate) {\n    var _this = this;\n\n    var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n    var projection = map.getView().getProjection();\n\n    var sortByDistance = function (a, b) {\n      return projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) - projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection);\n    };\n    /** @type {Array<SegmentData>|undefined} */\n\n\n    var nodes;\n    var hitPointGeometry;\n\n    if (this.hitDetection_) {\n      var layerFilter = typeof this.hitDetection_ === 'object' ? function (layer) {\n        return layer === _this.hitDetection_;\n      } : undefined;\n      map.forEachFeatureAtPixel(pixel, function (feature, layer, geometry) {\n        geometry = geometry || feature.getGeometry();\n\n        if (geometry.getType() === GeometryType.POINT && includes(_this.features_.getArray(), feature)) {\n          hitPointGeometry = geometry;\n          var coordinate = geometry.getFlatCoordinates().slice(0, 2);\n          nodes = [{\n            feature: feature,\n            geometry: geometry,\n            segment: [coordinate, coordinate]\n          }];\n        }\n\n        return true;\n      }, {\n        layerFilter: layerFilter\n      });\n    }\n\n    if (!nodes) {\n      var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n      var buffer = map.getView().getResolution() * this.pixelTolerance_;\n      var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n      nodes = this.rBush_.getInExtent(box);\n    }\n\n    if (nodes && nodes.length > 0) {\n      var node = nodes.sort(sortByDistance)[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = coordinateDistance(pixel, vertexPixel);\n\n      if (hitPointGeometry || dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        var vertexSegments = {};\n        vertexSegments[getUid(closestSegment)] = true;\n\n        if (!this.snapToPointer_) {\n          this.delta_[0] = vertex[0] - pixelCoordinate[0];\n          this.delta_[1] = vertex[1] - pixelCoordinate[1];\n        }\n\n        if (node.geometry.getType() === GeometryType.CIRCLE && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n          var geometries = {};\n          geometries[getUid(node.geometry)] = true;\n\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              var geometryUid = getUid(nodes[i].geometry);\n\n              if (!(geometryUid in geometries)) {\n                geometries[geometryUid] = true;\n                vertexSegments[getUid(segment)] = true;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n\n\n  Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index = segmentData.index;\n    var coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    /** @type {SegmentData} */\n\n    var newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    /** @type {SegmentData} */\n\n    var newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n\n\n  Modify.prototype.removePoint = function () {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt, this.dragSegments_);\n      var removed = this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      this.featuresBeingModified_ = null;\n      return removed;\n    }\n\n    return false;\n  };\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n\n\n  Modify.prototype.removeVertex_ = function () {\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n\n        /* falls through */\n\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n\n            component.splice(index, 1);\n            deleted = true;\n\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          var newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n\n        dragSegments.length = 0;\n      }\n    }\n\n    return deleted;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n\n\n  Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n\n\n  Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n\n  return Modify;\n}(PointerInteraction);\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\n\n\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\n\n\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    var circleGeometry = geometry;\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var userProjection = getUserProjection();\n\n      if (userProjection) {\n        circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n      }\n\n      var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\n\n\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    var circleGeometry = geometry;\n    var userProjection = getUserProjection();\n\n    if (userProjection) {\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n    }\n\n    return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n  }\n\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\nexport default Modify;","map":{"version":3,"sources":["../src/interaction/Modify.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick, } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent, } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals, includes } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent, } from '../proj.js';\nimport { getUid } from '../util.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n    /**\n     * Triggered upon feature modification start\n     * @event ModifyEvent#modifystart\n     * @api\n     */\n    MODIFYSTART: 'modifystart',\n    /**\n     * Triggered upon feature modification end\n     * @event ModifyEvent#modifyend\n     * @api\n     */\n    MODIFYEND: 'modifyend',\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {import(\"../Feature\").FeatureLike} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nvar ModifyEvent = /** @class */ (function (_super) {\n    __extends(ModifyEvent, _super);\n    /**\n     * @param {ModifyEventType} type Type.\n     * @param {Collection<import(\"../Feature\").FeatureLike>} features\n     * The features modified.\n     * @param {import(\"../MapBrowserEvent.js\").default} MapBrowserEvent\n     * Associated {@link module:ol/MapBrowserEvent}.\n     */\n    function ModifyEvent(type, features, MapBrowserEvent) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The features being modified.\n         * @type {Collection<import(\"../Feature\").FeatureLike>}\n         * @api\n         */\n        _this.features = features;\n        /**\n         * Associated {@link module:ol/MapBrowserEvent}.\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @api\n         */\n        _this.mapBrowserEvent = MapBrowserEvent;\n        return _this;\n    }\n    return ModifyEvent;\n}(Event));\nexport { ModifyEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerane`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nvar Modify = /** @class */ (function (_super) {\n    __extends(Modify, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function Modify(options) {\n        var _this = _super.call(this, /** @type {import(\"./Pointer.js\").Options} */ (options)) || this;\n        /***\n         * @type {ModifyOnSignature<import(\"../Observable.js\").OnReturn>}\n         */\n        _this.on;\n        /***\n         * @type {ModifyOnSignature<import(\"../Observable.js\").OnReturn>}\n         */\n        _this.once;\n        /***\n         * @type {ModifyOnSignature<void>}\n         */\n        _this.un;\n        /** @private */\n        _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.condition ? options.condition : primaryAction;\n        /**\n         * @private\n         * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n         * @return {boolean} Combined condition result.\n         */\n        _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n            return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n        };\n        /**\n         * @type {import(\"../events/condition.js\").Condition}\n         * @private\n         */\n        _this.deleteCondition_ = options.deleteCondition\n            ? options.deleteCondition\n            : _this.defaultDeleteCondition_;\n        /**\n         * @type {import(\"../events/condition.js\").Condition}\n         * @private\n         */\n        _this.insertVertexCondition_ = options.insertVertexCondition\n            ? options.insertVertexCondition\n            : always;\n        /**\n         * Editing vertex.\n         * @type {Feature}\n         * @private\n         */\n        _this.vertexFeature_ = null;\n        /**\n         * Segments intersecting {@link this.vertexFeature_} by segment uid.\n         * @type {Object<string, boolean>}\n         * @private\n         */\n        _this.vertexSegments_ = null;\n        /**\n         * @type {import(\"../pixel.js\").Pixel}\n         * @private\n         */\n        _this.lastPixel_ = [0, 0];\n        /**\n         * Tracks if the next `singleclick` event should be ignored to prevent\n         * accidental deletion right after vertex creation.\n         * @type {boolean}\n         * @private\n         */\n        _this.ignoreNextSingleClick_ = false;\n        /**\n         * @type {Collection<import(\"../Feature\").FeatureLike>}\n         * @private\n         */\n        _this.featuresBeingModified_ = null;\n        /**\n         * Segment RTree for each layer\n         * @type {RBush<SegmentData>}\n         * @private\n         */\n        _this.rBush_ = new RBush();\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.pixelTolerance_ =\n            options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.snappedToVertex_ = false;\n        /**\n         * Indicate whether the interaction is currently changing a feature's\n         * coordinates.\n         * @type {boolean}\n         * @private\n         */\n        _this.changingFeature_ = false;\n        /**\n         * @type {Array}\n         * @private\n         */\n        _this.dragSegments_ = [];\n        /**\n         * Draw overlay where sketch features are drawn.\n         * @type {VectorLayer}\n         * @private\n         */\n        _this.overlay_ = new VectorLayer({\n            source: new VectorSource({\n                useSpatialIndex: false,\n                wrapX: !!options.wrapX,\n            }),\n            style: options.style ? options.style : getDefaultStyleFunction(),\n            updateWhileAnimating: true,\n            updateWhileInteracting: true,\n        });\n        /**\n         * @const\n         * @private\n         * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n         */\n        _this.SEGMENT_WRITERS_ = {\n            'Point': _this.writePointGeometry_.bind(_this),\n            'LineString': _this.writeLineStringGeometry_.bind(_this),\n            'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n            'Polygon': _this.writePolygonGeometry_.bind(_this),\n            'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n            'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n            'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n            'Circle': _this.writeCircleGeometry_.bind(_this),\n            'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this),\n        };\n        /**\n         * @type {VectorSource}\n         * @private\n         */\n        _this.source_ = null;\n        /**\n         * @type {boolean|import(\"../layer/BaseVector\").default}\n         */\n        _this.hitDetection_ = null;\n        var features;\n        if (options.features) {\n            features = options.features;\n        }\n        else if (options.source) {\n            _this.source_ = options.source;\n            features = new Collection(_this.source_.getFeatures());\n            _this.source_.addEventListener(VectorEventType.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n            _this.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n        }\n        if (!features) {\n            throw new Error('The modify interaction requires features, a source or a layer');\n        }\n        if (options.hitDetection) {\n            _this.hitDetection_ = options.hitDetection;\n        }\n        /**\n         * @type {Collection<import(\"../Feature.js\").FeatureLike>}\n         * @private\n         */\n        _this.features_ = features;\n        _this.features_.forEach(_this.addFeature_.bind(_this));\n        _this.features_.addEventListener(CollectionEventType.ADD, _this.handleFeatureAdd_.bind(_this));\n        _this.features_.addEventListener(CollectionEventType.REMOVE, _this.handleFeatureRemove_.bind(_this));\n        /**\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @private\n         */\n        _this.lastPointerEvent_ = null;\n        /**\n         * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n         * @type {Array<number>}\n         */\n        _this.delta_ = [0, 0];\n        /**\n         * @private\n         */\n        _this.snapToPointer_ =\n            options.snapToPointer === undefined\n                ? !_this.hitDetection_\n                : options.snapToPointer;\n        return _this;\n    }\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.addFeature_ = function (feature) {\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n            if (writer) {\n                writer(feature, geometry);\n            }\n        }\n        var map = this.getMap();\n        if (map && map.isRendered() && this.getActive()) {\n            this.handlePointerAtPixel_(this.lastPixel_, map);\n        }\n        feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n     * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n     * @private\n     */\n    Modify.prototype.willModifyFeatures_ = function (evt, segments) {\n        if (!this.featuresBeingModified_) {\n            this.featuresBeingModified_ = new Collection();\n            var features = this.featuresBeingModified_.getArray();\n            for (var i = 0, ii = segments.length; i < ii; ++i) {\n                var segment = segments[i];\n                for (var s = 0, ss = segment.length; s < ss; ++s) {\n                    var feature = segment[s].feature;\n                    if (feature && features.indexOf(feature) === -1) {\n                        this.featuresBeingModified_.push(feature);\n                    }\n                }\n            }\n            if (this.featuresBeingModified_.getLength() === 0) {\n                this.featuresBeingModified_ = null;\n            }\n            else {\n                this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.removeFeature_ = function (feature) {\n        this.removeFeatureSegmentData_(feature);\n        // Remove the vertex feature if the collection of canditate features is empty.\n        if (this.vertexFeature_ && this.features_.getLength() === 0) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n        feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    };\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n        var rBush = this.rBush_;\n        /** @type {Array<SegmentData>} */\n        var nodesToRemove = [];\n        rBush.forEach(\n        /**\n         * @param {SegmentData} node RTree node.\n         */\n        function (node) {\n            if (feature === node.feature) {\n                nodesToRemove.push(node);\n            }\n        });\n        for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n            var nodeToRemove = nodesToRemove[i];\n            for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n                if (this.dragSegments_[j][0] === nodeToRemove) {\n                    this.dragSegments_.splice(j, 1);\n                }\n            }\n            rBush.remove(nodeToRemove);\n        }\n    };\n    /**\n     * Activate or deactivate the interaction.\n     * @param {boolean} active Active.\n     * @observable\n     * @api\n     */\n    Modify.prototype.setActive = function (active) {\n        if (this.vertexFeature_ && !active) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n        _super.prototype.setActive.call(this, active);\n    };\n    /**\n     * Remove the interaction from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    Modify.prototype.setMap = function (map) {\n        this.overlay_.setMap(map);\n        _super.prototype.setMap.call(this, map);\n    };\n    /**\n     * Get the overlay layer that this interaction renders the modification point or vertex to.\n     * @return {VectorLayer} Overlay layer.\n     * @api\n     */\n    Modify.prototype.getOverlay = function () {\n        return this.overlay_;\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    Modify.prototype.handleSourceAdd_ = function (event) {\n        if (event.feature) {\n            this.features_.push(event.feature);\n        }\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    Modify.prototype.handleSourceRemove_ = function (event) {\n        if (event.feature) {\n            this.features_.remove(event.feature);\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureAdd_ = function (evt) {\n        this.addFeature_(/** @type {Feature} */ (evt.element));\n    };\n    /**\n     * @param {import(\"../events/Event.js\").default} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureChange_ = function (evt) {\n        if (!this.changingFeature_) {\n            var feature = /** @type {Feature} */ (evt.target);\n            this.removeFeature_(feature);\n            this.addFeature_(feature);\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureRemove_ = function (evt) {\n        var feature = /** @type {Feature} */ (evt.element);\n        this.removeFeature_(feature);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {Point} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        /** @type {SegmentData} */\n        var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            segment: [coordinates, coordinates],\n        };\n        this.rBush_.insert(geometry.getExtent(), segmentData);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n        var points = geometry.getCoordinates();\n        for (var i = 0, ii = points.length; i < ii; ++i) {\n            var coordinates = points[i];\n            /** @type {SegmentData} */\n            var segmentData = {\n                feature: feature,\n                geometry: geometry,\n                depth: [i],\n                index: i,\n                segment: [coordinates, coordinates],\n            };\n            this.rBush_.insert(geometry.getExtent(), segmentData);\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n            var segment = coordinates.slice(i, i + 2);\n            /** @type {SegmentData} */\n            var segmentData = {\n                feature: feature,\n                geometry: geometry,\n                index: i,\n                segment: segment,\n            };\n            this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n        var lines = geometry.getCoordinates();\n        for (var j = 0, jj = lines.length; j < jj; ++j) {\n            var coordinates = lines[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                /** @type {SegmentData} */\n                var segmentData = {\n                    feature: feature,\n                    geometry: geometry,\n                    depth: [j],\n                    index: i,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n        var rings = geometry.getCoordinates();\n        for (var j = 0, jj = rings.length; j < jj; ++j) {\n            var coordinates = rings[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                /** @type {SegmentData} */\n                var segmentData = {\n                    feature: feature,\n                    geometry: geometry,\n                    depth: [j],\n                    index: i,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n        var polygons = geometry.getCoordinates();\n        for (var k = 0, kk = polygons.length; k < kk; ++k) {\n            var rings = polygons[k];\n            for (var j = 0, jj = rings.length; j < jj; ++j) {\n                var coordinates = rings[j];\n                for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                    var segment = coordinates.slice(i, i + 2);\n                    /** @type {SegmentData} */\n                    var segmentData = {\n                        feature: feature,\n                        geometry: geometry,\n                        depth: [j, k],\n                        index: i,\n                        segment: segment,\n                    };\n                    this.rBush_.insert(boundingExtent(segment), segmentData);\n                }\n            }\n        }\n    };\n    /**\n     * We convert a circle into two segments.  The segment at index\n     * {@link CIRCLE_CENTER_INDEX} is the\n     * circle's center (a point).  The segment at index\n     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n     * the circumference, and is not a line segment.\n     *\n     * @param {Feature} feature Feature.\n     * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCenter();\n        /** @type {SegmentData} */\n        var centerSegmentData = {\n            feature: feature,\n            geometry: geometry,\n            index: CIRCLE_CENTER_INDEX,\n            segment: [coordinates, coordinates],\n        };\n        /** @type {SegmentData} */\n        var circumferenceSegmentData = {\n            feature: feature,\n            geometry: geometry,\n            index: CIRCLE_CIRCUMFERENCE_INDEX,\n            segment: [coordinates, coordinates],\n        };\n        var featureSegments = [centerSegmentData, circumferenceSegmentData];\n        centerSegmentData.featureSegments = featureSegments;\n        circumferenceSegmentData.featureSegments = featureSegments;\n        this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n        var circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n        var userProjection = getUserProjection();\n        if (userProjection && this.getMap()) {\n            var projection = this.getMap().getView().getProjection();\n            circleGeometry = circleGeometry\n                .clone()\n                .transform(userProjection, projection);\n            circleGeometry = fromCircle(\n            /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry)).transform(projection, userProjection);\n        }\n        this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n        var geometries = geometry.getGeometriesArray();\n        for (var i = 0; i < geometries.length; ++i) {\n            var geometry_1 = geometries[i];\n            var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n            writer(feature, geometry_1);\n        }\n    };\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n     * @param {Array<import(\"../Feature\").FeatureLike>} features The features being modified.\n     * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n     * @return {Feature} Vertex feature.\n     * @private\n     */\n    Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates, features, geometries) {\n        var vertexFeature = this.vertexFeature_;\n        if (!vertexFeature) {\n            vertexFeature = new Feature(new Point(coordinates));\n            this.vertexFeature_ = vertexFeature;\n            this.overlay_.getSource().addFeature(vertexFeature);\n        }\n        else {\n            var geometry = vertexFeature.getGeometry();\n            geometry.setCoordinates(coordinates);\n        }\n        vertexFeature.set('features', features);\n        vertexFeature.set('geometries', geometries);\n        return vertexFeature;\n    };\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     */\n    Modify.prototype.handleEvent = function (mapBrowserEvent) {\n        if (!mapBrowserEvent.originalEvent) {\n            return true;\n        }\n        this.lastPointerEvent_ = mapBrowserEvent;\n        var handled;\n        if (!mapBrowserEvent.map.getView().getInteracting() &&\n            mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n            !this.handlingDownUpSequence) {\n            this.handlePointerMove_(mapBrowserEvent);\n        }\n        if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n            if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||\n                !this.ignoreNextSingleClick_) {\n                handled = this.removePoint();\n            }\n            else {\n                handled = true;\n            }\n        }\n        if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n            this.ignoreNextSingleClick_ = false;\n        }\n        return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n    };\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     */\n    Modify.prototype.handleDragEvent = function (evt) {\n        this.ignoreNextSingleClick_ = false;\n        this.willModifyFeatures_(evt, this.dragSegments_);\n        var vertex = [\n            evt.coordinate[0] + this.delta_[0],\n            evt.coordinate[1] + this.delta_[1],\n        ];\n        var features = [];\n        var geometries = [];\n        for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n            var dragSegment = this.dragSegments_[i];\n            var segmentData = dragSegment[0];\n            var feature = segmentData.feature;\n            if (features.indexOf(feature) === -1) {\n                features.push(feature);\n            }\n            var geometry = segmentData.geometry;\n            if (geometries.indexOf(geometry) === -1) {\n                geometries.push(geometry);\n            }\n            var depth = segmentData.depth;\n            var coordinates = void 0;\n            var segment = segmentData.segment;\n            var index = dragSegment[1];\n            while (vertex.length < geometry.getStride()) {\n                vertex.push(segment[index][vertex.length]);\n            }\n            switch (geometry.getType()) {\n                case GeometryType.POINT:\n                    coordinates = vertex;\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    break;\n                case GeometryType.MULTI_POINT:\n                    coordinates = geometry.getCoordinates();\n                    coordinates[segmentData.index] = vertex;\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    break;\n                case GeometryType.LINE_STRING:\n                    coordinates = geometry.getCoordinates();\n                    coordinates[segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case GeometryType.MULTI_LINE_STRING:\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case GeometryType.POLYGON:\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case GeometryType.MULTI_POLYGON:\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case GeometryType.CIRCLE:\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    if (segmentData.index === CIRCLE_CENTER_INDEX) {\n                        this.changingFeature_ = true;\n                        geometry.setCenter(vertex);\n                        this.changingFeature_ = false;\n                    }\n                    else {\n                        // We're dragging the circle's circumference:\n                        this.changingFeature_ = true;\n                        var projection = evt.map.getView().getProjection();\n                        var radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n                        var userProjection = getUserProjection();\n                        if (userProjection) {\n                            var circleGeometry = geometry\n                                .clone()\n                                .transform(userProjection, projection);\n                            circleGeometry.setRadius(radius);\n                            radius = circleGeometry\n                                .transform(projection, userProjection)\n                                .getRadius();\n                        }\n                        geometry.setRadius(radius);\n                        this.changingFeature_ = false;\n                    }\n                    break;\n                default:\n                // pass\n            }\n            if (coordinates) {\n                this.setGeometryCoordinates_(geometry, coordinates);\n            }\n        }\n        this.createOrUpdateVertexFeature_(vertex, features, geometries);\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Modify.prototype.handleDownEvent = function (evt) {\n        if (!this.condition_(evt)) {\n            return false;\n        }\n        var pixelCoordinate = evt.coordinate;\n        this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n        this.dragSegments_.length = 0;\n        this.featuresBeingModified_ = null;\n        var vertexFeature = this.vertexFeature_;\n        if (vertexFeature) {\n            var projection = evt.map.getView().getProjection();\n            var insertVertices = [];\n            var vertex = vertexFeature.getGeometry().getCoordinates();\n            var vertexExtent = boundingExtent([vertex]);\n            var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n            var componentSegments = {};\n            segmentDataMatches.sort(compareIndexes);\n            for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n                var segmentDataMatch = segmentDataMatches[i];\n                var segment = segmentDataMatch.segment;\n                var uid = getUid(segmentDataMatch.geometry);\n                var depth = segmentDataMatch.depth;\n                if (depth) {\n                    uid += '-' + depth.join('-'); // separate feature components\n                }\n                if (!componentSegments[uid]) {\n                    componentSegments[uid] = new Array(2);\n                }\n                if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE &&\n                    segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n                    var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n                    if (coordinatesEqual(closestVertex, vertex) &&\n                        !componentSegments[uid][0]) {\n                        this.dragSegments_.push([segmentDataMatch, 0]);\n                        componentSegments[uid][0] = segmentDataMatch;\n                    }\n                    continue;\n                }\n                if (coordinatesEqual(segment[0], vertex) &&\n                    !componentSegments[uid][0]) {\n                    this.dragSegments_.push([segmentDataMatch, 0]);\n                    componentSegments[uid][0] = segmentDataMatch;\n                    continue;\n                }\n                if (coordinatesEqual(segment[1], vertex) &&\n                    !componentSegments[uid][1]) {\n                    // prevent dragging closed linestrings by the connecting node\n                    if ((segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING ||\n                        segmentDataMatch.geometry.getType() ===\n                            GeometryType.MULTI_LINE_STRING) &&\n                        componentSegments[uid][0] &&\n                        componentSegments[uid][0].index === 0) {\n                        continue;\n                    }\n                    this.dragSegments_.push([segmentDataMatch, 1]);\n                    componentSegments[uid][1] = segmentDataMatch;\n                    continue;\n                }\n                if (getUid(segment) in this.vertexSegments_ &&\n                    !componentSegments[uid][0] &&\n                    !componentSegments[uid][1] &&\n                    this.insertVertexCondition_(evt)) {\n                    insertVertices.push(segmentDataMatch);\n                }\n            }\n            if (insertVertices.length) {\n                this.willModifyFeatures_(evt, [insertVertices]);\n            }\n            for (var j = insertVertices.length - 1; j >= 0; --j) {\n                this.insertVertex_(insertVertices[j], vertex);\n            }\n        }\n        return !!this.vertexFeature_;\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Modify.prototype.handleUpEvent = function (evt) {\n        for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n            var segmentData = this.dragSegments_[i][0];\n            var geometry = segmentData.geometry;\n            if (geometry.getType() === GeometryType.CIRCLE) {\n                // Update a circle object in the R* bush:\n                var coordinates = geometry.getCenter();\n                var centerSegmentData = segmentData.featureSegments[0];\n                var circumferenceSegmentData = segmentData.featureSegments[1];\n                centerSegmentData.segment[0] = coordinates;\n                centerSegmentData.segment[1] = coordinates;\n                circumferenceSegmentData.segment[0] = coordinates;\n                circumferenceSegmentData.segment[1] = coordinates;\n                this.rBush_.update(createExtent(coordinates), centerSegmentData);\n                var circleGeometry = geometry;\n                var userProjection = getUserProjection();\n                if (userProjection) {\n                    var projection = evt.map.getView().getProjection();\n                    circleGeometry = circleGeometry\n                        .clone()\n                        .transform(userProjection, projection);\n                    circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n                }\n                this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n            }\n            else {\n                this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n            }\n        }\n        if (this.featuresBeingModified_) {\n            this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n            this.featuresBeingModified_ = null;\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @private\n     */\n    Modify.prototype.handlePointerMove_ = function (evt) {\n        this.lastPixel_ = evt.pixel;\n        this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n    };\n    /**\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_coordinate] The pixel Coordinate.\n     * @private\n     */\n    Modify.prototype.handlePointerAtPixel_ = function (pixel, map, opt_coordinate) {\n        var _this = this;\n        var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n        var projection = map.getView().getProjection();\n        var sortByDistance = function (a, b) {\n            return (projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -\n                projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection));\n        };\n        /** @type {Array<SegmentData>|undefined} */\n        var nodes;\n        var hitPointGeometry;\n        if (this.hitDetection_) {\n            var layerFilter = typeof this.hitDetection_ === 'object'\n                ? function (layer) { return layer === _this.hitDetection_; }\n                : undefined;\n            map.forEachFeatureAtPixel(pixel, function (feature, layer, geometry) {\n                geometry = geometry || feature.getGeometry();\n                if (geometry.getType() === GeometryType.POINT &&\n                    includes(_this.features_.getArray(), feature)) {\n                    hitPointGeometry = geometry;\n                    var coordinate = geometry.getFlatCoordinates().slice(0, 2);\n                    nodes = [\n                        {\n                            feature: feature,\n                            geometry: geometry,\n                            segment: [coordinate, coordinate],\n                        },\n                    ];\n                }\n                return true;\n            }, { layerFilter: layerFilter });\n        }\n        if (!nodes) {\n            var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n            var buffer = map.getView().getResolution() * this.pixelTolerance_;\n            var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n            nodes = this.rBush_.getInExtent(box);\n        }\n        if (nodes && nodes.length > 0) {\n            var node = nodes.sort(sortByDistance)[0];\n            var closestSegment = node.segment;\n            var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n            var vertexPixel = map.getPixelFromCoordinate(vertex);\n            var dist = coordinateDistance(pixel, vertexPixel);\n            if (hitPointGeometry || dist <= this.pixelTolerance_) {\n                /** @type {Object<string, boolean>} */\n                var vertexSegments = {};\n                vertexSegments[getUid(closestSegment)] = true;\n                if (!this.snapToPointer_) {\n                    this.delta_[0] = vertex[0] - pixelCoordinate[0];\n                    this.delta_[1] = vertex[1] - pixelCoordinate[1];\n                }\n                if (node.geometry.getType() === GeometryType.CIRCLE &&\n                    node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n                    this.snappedToVertex_ = true;\n                    this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n                }\n                else {\n                    var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n                    var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n                    var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n                    var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n                    dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n                    this.snappedToVertex_ = dist <= this.pixelTolerance_;\n                    if (this.snappedToVertex_) {\n                        vertex =\n                            squaredDist1 > squaredDist2\n                                ? closestSegment[1]\n                                : closestSegment[0];\n                    }\n                    this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n                    var geometries = {};\n                    geometries[getUid(node.geometry)] = true;\n                    for (var i = 1, ii = nodes.length; i < ii; ++i) {\n                        var segment = nodes[i].segment;\n                        if ((coordinatesEqual(closestSegment[0], segment[0]) &&\n                            coordinatesEqual(closestSegment[1], segment[1])) ||\n                            (coordinatesEqual(closestSegment[0], segment[1]) &&\n                                coordinatesEqual(closestSegment[1], segment[0]))) {\n                            var geometryUid = getUid(nodes[i].geometry);\n                            if (!(geometryUid in geometries)) {\n                                geometries[geometryUid] = true;\n                                vertexSegments[getUid(segment)] = true;\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n                this.vertexSegments_ = vertexSegments;\n                return;\n            }\n        }\n        if (this.vertexFeature_) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n    };\n    /**\n     * @param {SegmentData} segmentData Segment data.\n     * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n     * @private\n     */\n    Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n        var segment = segmentData.segment;\n        var feature = segmentData.feature;\n        var geometry = segmentData.geometry;\n        var depth = segmentData.depth;\n        var index = segmentData.index;\n        var coordinates;\n        while (vertex.length < geometry.getStride()) {\n            vertex.push(0);\n        }\n        switch (geometry.getType()) {\n            case GeometryType.MULTI_LINE_STRING:\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case GeometryType.POLYGON:\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case GeometryType.MULTI_POLYGON:\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case GeometryType.LINE_STRING:\n                coordinates = geometry.getCoordinates();\n                coordinates.splice(index + 1, 0, vertex);\n                break;\n            default:\n                return;\n        }\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var rTree = this.rBush_;\n        rTree.remove(segmentData);\n        this.updateSegmentIndices_(geometry, index, depth, 1);\n        /** @type {SegmentData} */\n        var newSegmentData = {\n            segment: [segment[0], vertex],\n            feature: feature,\n            geometry: geometry,\n            depth: depth,\n            index: index,\n        };\n        rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        this.dragSegments_.push([newSegmentData, 1]);\n        /** @type {SegmentData} */\n        var newSegmentData2 = {\n            segment: [vertex, segment[1]],\n            feature: feature,\n            geometry: geometry,\n            depth: depth,\n            index: index + 1,\n        };\n        rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n        this.dragSegments_.push([newSegmentData2, 0]);\n        this.ignoreNextSingleClick_ = true;\n    };\n    /**\n     * Removes the vertex currently being pointed.\n     * @return {boolean} True when a vertex was removed.\n     * @api\n     */\n    Modify.prototype.removePoint = function () {\n        if (this.lastPointerEvent_ &&\n            this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n            var evt = this.lastPointerEvent_;\n            this.willModifyFeatures_(evt, this.dragSegments_);\n            var removed = this.removeVertex_();\n            this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n            this.featuresBeingModified_ = null;\n            return removed;\n        }\n        return false;\n    };\n    /**\n     * Removes a vertex from all matching features.\n     * @return {boolean} True when a vertex was removed.\n     * @private\n     */\n    Modify.prototype.removeVertex_ = function () {\n        var dragSegments = this.dragSegments_;\n        var segmentsByFeature = {};\n        var deleted = false;\n        var component, coordinates, dragSegment, geometry, i, index, left;\n        var newIndex, right, segmentData, uid;\n        for (i = dragSegments.length - 1; i >= 0; --i) {\n            dragSegment = dragSegments[i];\n            segmentData = dragSegment[0];\n            uid = getUid(segmentData.feature);\n            if (segmentData.depth) {\n                // separate feature components\n                uid += '-' + segmentData.depth.join('-');\n            }\n            if (!(uid in segmentsByFeature)) {\n                segmentsByFeature[uid] = {};\n            }\n            if (dragSegment[1] === 0) {\n                segmentsByFeature[uid].right = segmentData;\n                segmentsByFeature[uid].index = segmentData.index;\n            }\n            else if (dragSegment[1] == 1) {\n                segmentsByFeature[uid].left = segmentData;\n                segmentsByFeature[uid].index = segmentData.index + 1;\n            }\n        }\n        for (uid in segmentsByFeature) {\n            right = segmentsByFeature[uid].right;\n            left = segmentsByFeature[uid].left;\n            index = segmentsByFeature[uid].index;\n            newIndex = index - 1;\n            if (left !== undefined) {\n                segmentData = left;\n            }\n            else {\n                segmentData = right;\n            }\n            if (newIndex < 0) {\n                newIndex = 0;\n            }\n            geometry = segmentData.geometry;\n            coordinates = geometry.getCoordinates();\n            component = coordinates;\n            deleted = false;\n            switch (geometry.getType()) {\n                case GeometryType.MULTI_LINE_STRING:\n                    if (coordinates[segmentData.depth[0]].length > 2) {\n                        coordinates[segmentData.depth[0]].splice(index, 1);\n                        deleted = true;\n                    }\n                    break;\n                case GeometryType.LINE_STRING:\n                    if (coordinates.length > 2) {\n                        coordinates.splice(index, 1);\n                        deleted = true;\n                    }\n                    break;\n                case GeometryType.MULTI_POLYGON:\n                    component = component[segmentData.depth[1]];\n                /* falls through */\n                case GeometryType.POLYGON:\n                    component = component[segmentData.depth[0]];\n                    if (component.length > 4) {\n                        if (index == component.length - 1) {\n                            index = 0;\n                        }\n                        component.splice(index, 1);\n                        deleted = true;\n                        if (index === 0) {\n                            // close the ring again\n                            component.pop();\n                            component.push(component[0]);\n                            newIndex = component.length - 1;\n                        }\n                    }\n                    break;\n                default:\n                // pass\n            }\n            if (deleted) {\n                this.setGeometryCoordinates_(geometry, coordinates);\n                var segments = [];\n                if (left !== undefined) {\n                    this.rBush_.remove(left);\n                    segments.push(left.segment[0]);\n                }\n                if (right !== undefined) {\n                    this.rBush_.remove(right);\n                    segments.push(right.segment[1]);\n                }\n                if (left !== undefined && right !== undefined) {\n                    /** @type {SegmentData} */\n                    var newSegmentData = {\n                        depth: segmentData.depth,\n                        feature: segmentData.feature,\n                        geometry: segmentData.geometry,\n                        index: newIndex,\n                        segment: segments,\n                    };\n                    this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n                }\n                this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n                if (this.vertexFeature_) {\n                    this.overlay_.getSource().removeFeature(this.vertexFeature_);\n                    this.vertexFeature_ = null;\n                }\n                dragSegments.length = 0;\n            }\n        }\n        return deleted;\n    };\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {Array} coordinates Coordinates.\n     * @private\n     */\n    Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n        this.changingFeature_ = true;\n        geometry.setCoordinates(coordinates);\n        this.changingFeature_ = false;\n    };\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} index Index.\n     * @param {Array<number>|undefined} depth Depth.\n     * @param {number} delta Delta (1 or -1).\n     * @private\n     */\n    Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n        this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n            if (segmentDataMatch.geometry === geometry &&\n                (depth === undefined ||\n                    segmentDataMatch.depth === undefined ||\n                    equals(segmentDataMatch.depth, depth)) &&\n                segmentDataMatch.index > index) {\n                segmentDataMatch.index += delta;\n            }\n        });\n    };\n    return Modify;\n}(PointerInteraction));\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n    return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n    var geometry = segmentData.geometry;\n    if (geometry.getType() === GeometryType.CIRCLE) {\n        var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n        if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n            var userProjection = getUserProjection();\n            if (userProjection) {\n                circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry.clone().transform(userProjection, projection));\n            }\n            var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n            var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n            return distanceToCircumference * distanceToCircumference;\n        }\n    }\n    var coordinate = fromUserCoordinate(pointCoordinates, projection);\n    tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n    tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n    return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n    var geometry = segmentData.geometry;\n    if (geometry.getType() === GeometryType.CIRCLE &&\n        segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n        var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n        var userProjection = getUserProjection();\n        if (userProjection) {\n            circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry.clone().transform(userProjection, projection));\n        }\n        return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n    }\n    var coordinate = fromUserCoordinate(pointCoordinates, projection);\n    tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n    tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n    return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n    var style = createEditingStyle();\n    return function (feature, resolution) {\n        return style[GeometryType.POINT];\n    };\n}\nexport default Modify;\n//# sourceMappingURL=Modify.js.map"]},"metadata":{},"sourceType":"module"}