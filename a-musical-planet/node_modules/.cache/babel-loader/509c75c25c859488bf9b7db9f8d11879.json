{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Snap\n */\n\n\nimport CollectionEventType from '../CollectionEventType.js';\nimport EventType from '../events/EventType.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { boundingExtent, createEmpty } from '../extent.js';\nimport { closestOnCircle, closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment } from '../coordinate.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, getUserProjection, toUserCoordinate } from '../proj.js';\nimport { getUid } from '../util.js';\nimport { getValues } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {Object} Result\n * @property {boolean} snapped Snapped.\n * @property {import(\"../coordinate.js\").Coordinate|null} vertex Vertex.\n * @property {import(\"../pixel.js\").Pixel|null} vertexPixel VertexPixel.\n */\n\n/**\n * @typedef {Object} SegmentData\n * @property {import(\"../Feature.js\").default} feature Feature.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} segment Segment.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../Collection.js\").default<import(\"../Feature.js\").default>} [features] Snap to these features. Either this option or source should be provided.\n * @property {boolean} [edge=true] Snap to edges.\n * @property {boolean} [vertex=true] Snap to vertices.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the pointer close enough to a segment or\n * vertex for snapping.\n * @property {import(\"../source/Vector.js\").default} [source] Snap to features from this source. Either this option or features should be provided\n */\n\n/**\n * @param  {import(\"../source/Vector.js\").VectorSourceEvent|import(\"../Collection.js\").CollectionEvent} evt Event.\n * @return {import(\"../Feature.js\").default} Feature.\n */\n\nfunction getFeatureFromEvent(evt) {\n  if (\n  /** @type {import(\"../source/Vector.js\").VectorSourceEvent} */\n  evt.feature) {\n    return (\n      /** @type {import(\"../source/Vector.js\").VectorSourceEvent} */\n      evt.feature\n    );\n  } else if (\n  /** @type {import(\"../Collection.js\").CollectionEvent} */\n  evt.element) {\n    return (\n      /** @type {import(\"../Collection.js\").CollectionEvent} */\n      evt.element\n    );\n  }\n}\n\nvar tempSegment = [];\n/**\n * @classdesc\n * Handles snapping of vector features while modifying or drawing them.  The\n * features can come from a {@link module:ol/source/Vector} or {@link module:ol/Collection~Collection}\n * Any interaction object that allows the user to interact\n * with the features using the mouse can benefit from the snapping, as long\n * as it is added before.\n *\n * The snap interaction modifies map browser event `coordinate` and `pixel`\n * properties to force the snap to occur to any interaction that them.\n *\n * Example:\n *\n *     import Snap from 'ol/interaction/Snap';\n *\n *     const snap = new Snap({\n *       source: source\n *     });\n *\n *     map.addInteraction(snap);\n *\n * @api\n */\n\nvar Snap = function (_super) {\n  __extends(Snap, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function Snap(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var pointerOptions = options;\n\n    if (!pointerOptions.handleDownEvent) {\n      pointerOptions.handleDownEvent = TRUE;\n    }\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    _this = _super.call(this, pointerOptions) || this;\n    /**\n     * @type {import(\"../source/Vector.js\").default}\n     * @private\n     */\n\n    _this.source_ = options.source ? options.source : null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.vertex_ = options.vertex !== undefined ? options.vertex : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.edge_ = options.edge !== undefined ? options.edge : true;\n    /**\n     * @type {import(\"../Collection.js\").default<import(\"../Feature.js\").default>}\n     * @private\n     */\n\n    _this.features_ = options.features ? options.features : null;\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     * @private\n     */\n\n    _this.featuresListenerKeys_ = [];\n    /**\n     * @type {Object<string, import(\"../events.js\").EventsKey>}\n     * @private\n     */\n\n    _this.featureChangeListenerKeys_ = {};\n    /**\n     * Extents are preserved so indexed segment can be quickly removed\n     * when its feature geometry changes\n     * @type {Object<string, import(\"../extent.js\").Extent>}\n     * @private\n     */\n\n    _this.indexedFeaturesExtents_ = {};\n    /**\n     * If a feature geometry changes while a pointer drag|move event occurs, the\n     * feature doesn't get updated right away.  It will be at the next 'pointerup'\n     * event fired.\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     * @private\n     */\n\n    _this.pendingFeatures_ = {};\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * Segment RTree for each layer\n     * @type {import(\"../structs/RBush.js\").default<SegmentData>}\n     * @private\n     */\n\n    _this.rBush_ = new RBush();\n    /**\n     * @const\n     * @private\n     * @type {Object<string, function(import(\"../Feature.js\").default, import(\"../geom/Geometry.js\").default): void>}\n     */\n\n    _this.SEGMENT_WRITERS_ = {\n      'Point': _this.writePointGeometry_.bind(_this),\n      'LineString': _this.writeLineStringGeometry_.bind(_this),\n      'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n      'Polygon': _this.writePolygonGeometry_.bind(_this),\n      'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n      'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n      'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n      'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this),\n      'Circle': _this.writeCircleGeometry_.bind(_this)\n    };\n    return _this;\n  }\n  /**\n   * Add a feature to the collection of features that we may snap to.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {boolean} [opt_listen] Whether to listen to the feature change or not\n   *     Defaults to `true`.\n   * @api\n   */\n\n\n  Snap.prototype.addFeature = function (feature, opt_listen) {\n    var register = opt_listen !== undefined ? opt_listen : true;\n    var feature_uid = getUid(feature);\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      var segmentWriter = this.SEGMENT_WRITERS_[geometry.getType()];\n\n      if (segmentWriter) {\n        this.indexedFeaturesExtents_[feature_uid] = geometry.getExtent(createEmpty());\n        segmentWriter(feature, geometry);\n      }\n    }\n\n    if (register) {\n      this.featureChangeListenerKeys_[feature_uid] = listen(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n    }\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @private\n   */\n\n\n  Snap.prototype.forEachFeatureAdd_ = function (feature) {\n    this.addFeature(feature);\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @private\n   */\n\n\n  Snap.prototype.forEachFeatureRemove_ = function (feature) {\n    this.removeFeature(feature);\n  };\n  /**\n   * @return {import(\"../Collection.js\").default<import(\"../Feature.js\").default>|Array<import(\"../Feature.js\").default>} Features.\n   * @private\n   */\n\n\n  Snap.prototype.getFeatures_ = function () {\n    var features;\n\n    if (this.features_) {\n      features = this.features_;\n    } else if (this.source_) {\n      features = this.source_.getFeatures();\n    }\n\n    return features;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n\n\n  Snap.prototype.handleEvent = function (evt) {\n    var result = this.snapTo(evt.pixel, evt.coordinate, evt.map);\n\n    if (result.snapped) {\n      evt.coordinate = result.vertex.slice(0, 2);\n      evt.pixel = result.vertexPixel;\n    }\n\n    return _super.prototype.handleEvent.call(this, evt);\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent|import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Snap.prototype.handleFeatureAdd_ = function (evt) {\n    var feature = getFeatureFromEvent(evt);\n    this.addFeature(feature);\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent|import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Snap.prototype.handleFeatureRemove_ = function (evt) {\n    var feature = getFeatureFromEvent(evt);\n    this.removeFeature(feature);\n  };\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n\n\n  Snap.prototype.handleFeatureChange_ = function (evt) {\n    var feature = evt.target;\n\n    if (this.handlingDownUpSequence) {\n      var uid = getUid(feature);\n\n      if (!(uid in this.pendingFeatures_)) {\n        this.pendingFeatures_[uid] = feature;\n      }\n    } else {\n      this.updateFeature_(feature);\n    }\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  Snap.prototype.handleUpEvent = function (evt) {\n    var featuresToUpdate = getValues(this.pendingFeatures_);\n\n    if (featuresToUpdate.length) {\n      featuresToUpdate.forEach(this.updateFeature_.bind(this));\n      this.pendingFeatures_ = {};\n    }\n\n    return false;\n  };\n  /**\n   * Remove a feature from the collection of features that we may snap to.\n   * @param {import(\"../Feature.js\").default} feature Feature\n   * @param {boolean} [opt_unlisten] Whether to unlisten to the feature change\n   *     or not. Defaults to `true`.\n   * @api\n   */\n\n\n  Snap.prototype.removeFeature = function (feature, opt_unlisten) {\n    var unregister = opt_unlisten !== undefined ? opt_unlisten : true;\n    var feature_uid = getUid(feature);\n    var extent = this.indexedFeaturesExtents_[feature_uid];\n\n    if (extent) {\n      var rBush = this.rBush_;\n      var nodesToRemove_1 = [];\n      rBush.forEachInExtent(extent, function (node) {\n        if (feature === node.feature) {\n          nodesToRemove_1.push(node);\n        }\n      });\n\n      for (var i = nodesToRemove_1.length - 1; i >= 0; --i) {\n        rBush.remove(nodesToRemove_1[i]);\n      }\n    }\n\n    if (unregister) {\n      unlistenByKey(this.featureChangeListenerKeys_[feature_uid]);\n      delete this.featureChangeListenerKeys_[feature_uid];\n    }\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n\n\n  Snap.prototype.setMap = function (map) {\n    var currentMap = this.getMap();\n    var keys = this.featuresListenerKeys_;\n    var features = this.getFeatures_();\n\n    if (currentMap) {\n      keys.forEach(unlistenByKey);\n      keys.length = 0;\n      features.forEach(this.forEachFeatureRemove_.bind(this));\n    }\n\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      if (this.features_) {\n        keys.push(listen(this.features_, CollectionEventType.ADD, this.handleFeatureAdd_, this), listen(this.features_, CollectionEventType.REMOVE, this.handleFeatureRemove_, this));\n      } else if (this.source_) {\n        keys.push(listen(this.source_, VectorEventType.ADDFEATURE, this.handleFeatureAdd_, this), listen(this.source_, VectorEventType.REMOVEFEATURE, this.handleFeatureRemove_, this));\n      }\n\n      features.forEach(this.forEachFeatureAdd_.bind(this));\n    }\n  };\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../coordinate.js\").Coordinate} pixelCoordinate Coordinate\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @return {Result} Snap result\n   */\n\n\n  Snap.prototype.snapTo = function (pixel, pixelCoordinate, map) {\n    var lowerLeft = map.getCoordinateFromPixel([pixel[0] - this.pixelTolerance_, pixel[1] + this.pixelTolerance_]);\n    var upperRight = map.getCoordinateFromPixel([pixel[0] + this.pixelTolerance_, pixel[1] - this.pixelTolerance_]);\n    var box = boundingExtent([lowerLeft, upperRight]);\n    var segments = this.rBush_.getInExtent(box); // If snapping on vertices only, don't consider circles\n\n    if (this.vertex_ && !this.edge_) {\n      segments = segments.filter(function (segment) {\n        return segment.feature.getGeometry().getType() !== GeometryType.CIRCLE;\n      });\n    }\n\n    var snapped = false;\n    var vertex = null;\n    var vertexPixel = null;\n\n    if (segments.length === 0) {\n      return {\n        snapped: snapped,\n        vertex: vertex,\n        vertexPixel: vertexPixel\n      };\n    }\n\n    var projection = map.getView().getProjection();\n    var projectedCoordinate = fromUserCoordinate(pixelCoordinate, projection);\n    var closestSegmentData;\n    var minSquaredDistance = Infinity;\n\n    for (var i = 0; i < segments.length; ++i) {\n      var segmentData = segments[i];\n      tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n      tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n      var delta = squaredDistanceToSegment(projectedCoordinate, tempSegment);\n\n      if (delta < minSquaredDistance) {\n        closestSegmentData = segmentData;\n        minSquaredDistance = delta;\n      }\n    }\n\n    var closestSegment = closestSegmentData.segment;\n\n    if (this.vertex_ && !this.edge_) {\n      var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n      var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n      var squaredDist1 = squaredCoordinateDistance(pixel, pixel1);\n      var squaredDist2 = squaredCoordinateDistance(pixel, pixel2);\n      var dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n\n      if (dist <= this.pixelTolerance_) {\n        snapped = true;\n        vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n        vertexPixel = map.getPixelFromCoordinate(vertex);\n      }\n    } else if (this.edge_) {\n      var isCircle = closestSegmentData.feature.getGeometry().getType() === GeometryType.CIRCLE;\n\n      if (isCircle) {\n        var circleGeometry = closestSegmentData.feature.getGeometry();\n        var userProjection = getUserProjection();\n\n        if (userProjection) {\n          circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n        }\n\n        vertex = toUserCoordinate(closestOnCircle(projectedCoordinate, circleGeometry), projection);\n      } else {\n        tempSegment[0] = fromUserCoordinate(closestSegment[0], projection);\n        tempSegment[1] = fromUserCoordinate(closestSegment[1], projection);\n        vertex = toUserCoordinate(closestOnSegment(projectedCoordinate, tempSegment), projection);\n      }\n\n      vertexPixel = map.getPixelFromCoordinate(vertex);\n\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        snapped = true;\n\n        if (this.vertex_ && !isCircle) {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          var dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n\n          if (dist <= this.pixelTolerance_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n            vertexPixel = map.getPixelFromCoordinate(vertex);\n          }\n        }\n      }\n    }\n\n    if (snapped) {\n      vertexPixel = [Math.round(vertexPixel[0]), Math.round(vertexPixel[1])];\n    }\n\n    return {\n      snapped: snapped,\n      vertex: vertex,\n      vertexPixel: vertexPixel\n    };\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature\n   * @private\n   */\n\n\n  Snap.prototype.updateFeature_ = function (feature) {\n    this.removeFeature(feature, false);\n    this.addFeature(feature, false);\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Snap.prototype.writeCircleGeometry_ = function (feature, geometry) {\n    var projection = this.getMap().getView().getProjection();\n    var circleGeometry = geometry;\n    var userProjection = getUserProjection();\n\n    if (userProjection) {\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n    }\n\n    var polygon = fromCircle(circleGeometry);\n\n    if (userProjection) {\n      polygon.transform(projection, userProjection);\n    }\n\n    var coordinates = polygon.getCoordinates()[0];\n\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      var segmentData = {\n        feature: feature,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Snap.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n    var geometries = geometry.getGeometriesArray();\n\n    for (var i = 0; i < geometries.length; ++i) {\n      var segmentWriter = this.SEGMENT_WRITERS_[geometries[i].getType()];\n\n      if (segmentWriter) {\n        segmentWriter(feature, geometries[i]);\n      }\n    }\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Snap.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      var segmentData = {\n        feature: feature,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Snap.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n    var lines = geometry.getCoordinates();\n\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData = {\n          feature: feature,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Snap.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n    var points = geometry.getCoordinates();\n\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      var segmentData = {\n        feature: feature,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Snap.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n    var polygons = geometry.getCoordinates();\n\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          var segmentData = {\n            feature: feature,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature\n   * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Snap.prototype.writePointGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    var segmentData = {\n      feature: feature,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Snap.prototype.writePolygonGeometry_ = function (feature, geometry) {\n    var rings = geometry.getCoordinates();\n\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData = {\n          feature: feature,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n\n  return Snap;\n}(PointerInteraction);\n\nexport default Snap;","map":{"version":3,"sources":["../src/interaction/Snap.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/Snap\n */\nimport CollectionEventType from '../CollectionEventType.js';\nimport EventType from '../events/EventType.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { boundingExtent, createEmpty } from '../extent.js';\nimport { closestOnCircle, closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, } from '../coordinate.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, getUserProjection, toUserCoordinate, } from '../proj.js';\nimport { getUid } from '../util.js';\nimport { getValues } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {Object} Result\n * @property {boolean} snapped Snapped.\n * @property {import(\"../coordinate.js\").Coordinate|null} vertex Vertex.\n * @property {import(\"../pixel.js\").Pixel|null} vertexPixel VertexPixel.\n */\n/**\n * @typedef {Object} SegmentData\n * @property {import(\"../Feature.js\").default} feature Feature.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} segment Segment.\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../Collection.js\").default<import(\"../Feature.js\").default>} [features] Snap to these features. Either this option or source should be provided.\n * @property {boolean} [edge=true] Snap to edges.\n * @property {boolean} [vertex=true] Snap to vertices.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the pointer close enough to a segment or\n * vertex for snapping.\n * @property {import(\"../source/Vector.js\").default} [source] Snap to features from this source. Either this option or features should be provided\n */\n/**\n * @param  {import(\"../source/Vector.js\").VectorSourceEvent|import(\"../Collection.js\").CollectionEvent} evt Event.\n * @return {import(\"../Feature.js\").default} Feature.\n */\nfunction getFeatureFromEvent(evt) {\n    if (\n    /** @type {import(\"../source/Vector.js\").VectorSourceEvent} */ (evt).feature) {\n        return /** @type {import(\"../source/Vector.js\").VectorSourceEvent} */ (evt)\n            .feature;\n    }\n    else if (\n    /** @type {import(\"../Collection.js\").CollectionEvent} */ (evt).element) {\n        return /** @type {import(\"../Feature.js\").default} */ (\n        /** @type {import(\"../Collection.js\").CollectionEvent} */ (evt).element);\n    }\n}\nvar tempSegment = [];\n/**\n * @classdesc\n * Handles snapping of vector features while modifying or drawing them.  The\n * features can come from a {@link module:ol/source/Vector} or {@link module:ol/Collection~Collection}\n * Any interaction object that allows the user to interact\n * with the features using the mouse can benefit from the snapping, as long\n * as it is added before.\n *\n * The snap interaction modifies map browser event `coordinate` and `pixel`\n * properties to force the snap to occur to any interaction that them.\n *\n * Example:\n *\n *     import Snap from 'ol/interaction/Snap';\n *\n *     const snap = new Snap({\n *       source: source\n *     });\n *\n *     map.addInteraction(snap);\n *\n * @api\n */\nvar Snap = /** @class */ (function (_super) {\n    __extends(Snap, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Snap(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n        if (!pointerOptions.handleDownEvent) {\n            pointerOptions.handleDownEvent = TRUE;\n        }\n        if (!pointerOptions.stopDown) {\n            pointerOptions.stopDown = FALSE;\n        }\n        _this = _super.call(this, pointerOptions) || this;\n        /**\n         * @type {import(\"../source/Vector.js\").default}\n         * @private\n         */\n        _this.source_ = options.source ? options.source : null;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.vertex_ = options.vertex !== undefined ? options.vertex : true;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.edge_ = options.edge !== undefined ? options.edge : true;\n        /**\n         * @type {import(\"../Collection.js\").default<import(\"../Feature.js\").default>}\n         * @private\n         */\n        _this.features_ = options.features ? options.features : null;\n        /**\n         * @type {Array<import(\"../events.js\").EventsKey>}\n         * @private\n         */\n        _this.featuresListenerKeys_ = [];\n        /**\n         * @type {Object<string, import(\"../events.js\").EventsKey>}\n         * @private\n         */\n        _this.featureChangeListenerKeys_ = {};\n        /**\n         * Extents are preserved so indexed segment can be quickly removed\n         * when its feature geometry changes\n         * @type {Object<string, import(\"../extent.js\").Extent>}\n         * @private\n         */\n        _this.indexedFeaturesExtents_ = {};\n        /**\n         * If a feature geometry changes while a pointer drag|move event occurs, the\n         * feature doesn't get updated right away.  It will be at the next 'pointerup'\n         * event fired.\n         * @type {!Object<string, import(\"../Feature.js\").default>}\n         * @private\n         */\n        _this.pendingFeatures_ = {};\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.pixelTolerance_ =\n            options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n        /**\n         * Segment RTree for each layer\n         * @type {import(\"../structs/RBush.js\").default<SegmentData>}\n         * @private\n         */\n        _this.rBush_ = new RBush();\n        /**\n         * @const\n         * @private\n         * @type {Object<string, function(import(\"../Feature.js\").default, import(\"../geom/Geometry.js\").default): void>}\n         */\n        _this.SEGMENT_WRITERS_ = {\n            'Point': _this.writePointGeometry_.bind(_this),\n            'LineString': _this.writeLineStringGeometry_.bind(_this),\n            'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n            'Polygon': _this.writePolygonGeometry_.bind(_this),\n            'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n            'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n            'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n            'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this),\n            'Circle': _this.writeCircleGeometry_.bind(_this),\n        };\n        return _this;\n    }\n    /**\n     * Add a feature to the collection of features that we may snap to.\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {boolean} [opt_listen] Whether to listen to the feature change or not\n     *     Defaults to `true`.\n     * @api\n     */\n    Snap.prototype.addFeature = function (feature, opt_listen) {\n        var register = opt_listen !== undefined ? opt_listen : true;\n        var feature_uid = getUid(feature);\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            var segmentWriter = this.SEGMENT_WRITERS_[geometry.getType()];\n            if (segmentWriter) {\n                this.indexedFeaturesExtents_[feature_uid] = geometry.getExtent(createEmpty());\n                segmentWriter(feature, geometry);\n            }\n        }\n        if (register) {\n            this.featureChangeListenerKeys_[feature_uid] = listen(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n        }\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @private\n     */\n    Snap.prototype.forEachFeatureAdd_ = function (feature) {\n        this.addFeature(feature);\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @private\n     */\n    Snap.prototype.forEachFeatureRemove_ = function (feature) {\n        this.removeFeature(feature);\n    };\n    /**\n     * @return {import(\"../Collection.js\").default<import(\"../Feature.js\").default>|Array<import(\"../Feature.js\").default>} Features.\n     * @private\n     */\n    Snap.prototype.getFeatures_ = function () {\n        var features;\n        if (this.features_) {\n            features = this.features_;\n        }\n        else if (this.source_) {\n            features = this.source_.getFeatures();\n        }\n        return features;\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     */\n    Snap.prototype.handleEvent = function (evt) {\n        var result = this.snapTo(evt.pixel, evt.coordinate, evt.map);\n        if (result.snapped) {\n            evt.coordinate = result.vertex.slice(0, 2);\n            evt.pixel = result.vertexPixel;\n        }\n        return _super.prototype.handleEvent.call(this, evt);\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent|import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Snap.prototype.handleFeatureAdd_ = function (evt) {\n        var feature = getFeatureFromEvent(evt);\n        this.addFeature(feature);\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent|import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Snap.prototype.handleFeatureRemove_ = function (evt) {\n        var feature = getFeatureFromEvent(evt);\n        this.removeFeature(feature);\n    };\n    /**\n     * @param {import(\"../events/Event.js\").default} evt Event.\n     * @private\n     */\n    Snap.prototype.handleFeatureChange_ = function (evt) {\n        var feature = /** @type {import(\"../Feature.js\").default} */ (evt.target);\n        if (this.handlingDownUpSequence) {\n            var uid = getUid(feature);\n            if (!(uid in this.pendingFeatures_)) {\n                this.pendingFeatures_[uid] = feature;\n            }\n        }\n        else {\n            this.updateFeature_(feature);\n        }\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Snap.prototype.handleUpEvent = function (evt) {\n        var featuresToUpdate = getValues(this.pendingFeatures_);\n        if (featuresToUpdate.length) {\n            featuresToUpdate.forEach(this.updateFeature_.bind(this));\n            this.pendingFeatures_ = {};\n        }\n        return false;\n    };\n    /**\n     * Remove a feature from the collection of features that we may snap to.\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @param {boolean} [opt_unlisten] Whether to unlisten to the feature change\n     *     or not. Defaults to `true`.\n     * @api\n     */\n    Snap.prototype.removeFeature = function (feature, opt_unlisten) {\n        var unregister = opt_unlisten !== undefined ? opt_unlisten : true;\n        var feature_uid = getUid(feature);\n        var extent = this.indexedFeaturesExtents_[feature_uid];\n        if (extent) {\n            var rBush = this.rBush_;\n            var nodesToRemove_1 = [];\n            rBush.forEachInExtent(extent, function (node) {\n                if (feature === node.feature) {\n                    nodesToRemove_1.push(node);\n                }\n            });\n            for (var i = nodesToRemove_1.length - 1; i >= 0; --i) {\n                rBush.remove(nodesToRemove_1[i]);\n            }\n        }\n        if (unregister) {\n            unlistenByKey(this.featureChangeListenerKeys_[feature_uid]);\n            delete this.featureChangeListenerKeys_[feature_uid];\n        }\n    };\n    /**\n     * Remove the interaction from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    Snap.prototype.setMap = function (map) {\n        var currentMap = this.getMap();\n        var keys = this.featuresListenerKeys_;\n        var features = /** @type {Array<import(\"../Feature.js\").default>} */ (this.getFeatures_());\n        if (currentMap) {\n            keys.forEach(unlistenByKey);\n            keys.length = 0;\n            features.forEach(this.forEachFeatureRemove_.bind(this));\n        }\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            if (this.features_) {\n                keys.push(listen(this.features_, CollectionEventType.ADD, this.handleFeatureAdd_, this), listen(this.features_, CollectionEventType.REMOVE, this.handleFeatureRemove_, this));\n            }\n            else if (this.source_) {\n                keys.push(listen(this.source_, VectorEventType.ADDFEATURE, this.handleFeatureAdd_, this), listen(this.source_, VectorEventType.REMOVEFEATURE, this.handleFeatureRemove_, this));\n            }\n            features.forEach(this.forEachFeatureAdd_.bind(this));\n        }\n    };\n    /**\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n     * @param {import(\"../coordinate.js\").Coordinate} pixelCoordinate Coordinate\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @return {Result} Snap result\n     */\n    Snap.prototype.snapTo = function (pixel, pixelCoordinate, map) {\n        var lowerLeft = map.getCoordinateFromPixel([\n            pixel[0] - this.pixelTolerance_,\n            pixel[1] + this.pixelTolerance_,\n        ]);\n        var upperRight = map.getCoordinateFromPixel([\n            pixel[0] + this.pixelTolerance_,\n            pixel[1] - this.pixelTolerance_,\n        ]);\n        var box = boundingExtent([lowerLeft, upperRight]);\n        var segments = this.rBush_.getInExtent(box);\n        // If snapping on vertices only, don't consider circles\n        if (this.vertex_ && !this.edge_) {\n            segments = segments.filter(function (segment) {\n                return segment.feature.getGeometry().getType() !== GeometryType.CIRCLE;\n            });\n        }\n        var snapped = false;\n        var vertex = null;\n        var vertexPixel = null;\n        if (segments.length === 0) {\n            return {\n                snapped: snapped,\n                vertex: vertex,\n                vertexPixel: vertexPixel,\n            };\n        }\n        var projection = map.getView().getProjection();\n        var projectedCoordinate = fromUserCoordinate(pixelCoordinate, projection);\n        var closestSegmentData;\n        var minSquaredDistance = Infinity;\n        for (var i = 0; i < segments.length; ++i) {\n            var segmentData = segments[i];\n            tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n            tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n            var delta = squaredDistanceToSegment(projectedCoordinate, tempSegment);\n            if (delta < minSquaredDistance) {\n                closestSegmentData = segmentData;\n                minSquaredDistance = delta;\n            }\n        }\n        var closestSegment = closestSegmentData.segment;\n        if (this.vertex_ && !this.edge_) {\n            var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n            var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n            var squaredDist1 = squaredCoordinateDistance(pixel, pixel1);\n            var squaredDist2 = squaredCoordinateDistance(pixel, pixel2);\n            var dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n            if (dist <= this.pixelTolerance_) {\n                snapped = true;\n                vertex =\n                    squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n                vertexPixel = map.getPixelFromCoordinate(vertex);\n            }\n        }\n        else if (this.edge_) {\n            var isCircle = closestSegmentData.feature.getGeometry().getType() ===\n                GeometryType.CIRCLE;\n            if (isCircle) {\n                var circleGeometry = closestSegmentData.feature.getGeometry();\n                var userProjection = getUserProjection();\n                if (userProjection) {\n                    circleGeometry = circleGeometry\n                        .clone()\n                        .transform(userProjection, projection);\n                }\n                vertex = toUserCoordinate(closestOnCircle(projectedCoordinate, \n                /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry)), projection);\n            }\n            else {\n                tempSegment[0] = fromUserCoordinate(closestSegment[0], projection);\n                tempSegment[1] = fromUserCoordinate(closestSegment[1], projection);\n                vertex = toUserCoordinate(closestOnSegment(projectedCoordinate, tempSegment), projection);\n            }\n            vertexPixel = map.getPixelFromCoordinate(vertex);\n            if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n                snapped = true;\n                if (this.vertex_ && !isCircle) {\n                    var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n                    var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n                    var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n                    var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n                    var dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n                    if (dist <= this.pixelTolerance_) {\n                        vertex =\n                            squaredDist1 > squaredDist2\n                                ? closestSegment[1]\n                                : closestSegment[0];\n                        vertexPixel = map.getPixelFromCoordinate(vertex);\n                    }\n                }\n            }\n        }\n        if (snapped) {\n            vertexPixel = [Math.round(vertexPixel[0]), Math.round(vertexPixel[1])];\n        }\n        return {\n            snapped: snapped,\n            vertex: vertex,\n            vertexPixel: vertexPixel,\n        };\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @private\n     */\n    Snap.prototype.updateFeature_ = function (feature) {\n        this.removeFeature(feature, false);\n        this.addFeature(feature, false);\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n     * @private\n     */\n    Snap.prototype.writeCircleGeometry_ = function (feature, geometry) {\n        var projection = this.getMap().getView().getProjection();\n        var circleGeometry = geometry;\n        var userProjection = getUserProjection();\n        if (userProjection) {\n            circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry.clone().transform(userProjection, projection));\n        }\n        var polygon = fromCircle(circleGeometry);\n        if (userProjection) {\n            polygon.transform(projection, userProjection);\n        }\n        var coordinates = polygon.getCoordinates()[0];\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n            var segment = coordinates.slice(i, i + 2);\n            var segmentData = {\n                feature: feature,\n                segment: segment,\n            };\n            this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n     * @private\n     */\n    Snap.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n        var geometries = geometry.getGeometriesArray();\n        for (var i = 0; i < geometries.length; ++i) {\n            var segmentWriter = this.SEGMENT_WRITERS_[geometries[i].getType()];\n            if (segmentWriter) {\n                segmentWriter(feature, geometries[i]);\n            }\n        }\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Snap.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n            var segment = coordinates.slice(i, i + 2);\n            var segmentData = {\n                feature: feature,\n                segment: segment,\n            };\n            this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Snap.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n        var lines = geometry.getCoordinates();\n        for (var j = 0, jj = lines.length; j < jj; ++j) {\n            var coordinates = lines[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                var segmentData = {\n                    feature: feature,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n     * @private\n     */\n    Snap.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n        var points = geometry.getCoordinates();\n        for (var i = 0, ii = points.length; i < ii; ++i) {\n            var coordinates = points[i];\n            var segmentData = {\n                feature: feature,\n                segment: [coordinates, coordinates],\n            };\n            this.rBush_.insert(geometry.getExtent(), segmentData);\n        }\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Snap.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n        var polygons = geometry.getCoordinates();\n        for (var k = 0, kk = polygons.length; k < kk; ++k) {\n            var rings = polygons[k];\n            for (var j = 0, jj = rings.length; j < jj; ++j) {\n                var coordinates = rings[j];\n                for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                    var segment = coordinates.slice(i, i + 2);\n                    var segmentData = {\n                        feature: feature,\n                        segment: segment,\n                    };\n                    this.rBush_.insert(boundingExtent(segment), segmentData);\n                }\n            }\n        }\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n     * @private\n     */\n    Snap.prototype.writePointGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        var segmentData = {\n            feature: feature,\n            segment: [coordinates, coordinates],\n        };\n        this.rBush_.insert(geometry.getExtent(), segmentData);\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Snap.prototype.writePolygonGeometry_ = function (feature, geometry) {\n        var rings = geometry.getCoordinates();\n        for (var j = 0, jj = rings.length; j < jj; ++j) {\n            var coordinates = rings[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                var segmentData = {\n                    feature: feature,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    return Snap;\n}(PointerInteraction));\nexport default Snap;\n//# sourceMappingURL=Snap.js.map"]},"metadata":{},"sourceType":"module"}