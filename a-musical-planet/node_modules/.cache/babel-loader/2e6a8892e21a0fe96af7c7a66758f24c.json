{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/Attribution\n */\n\n\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { equals } from '../array.js';\nimport { inView } from '../layer/Layer.js';\nimport { removeChildren, replaceNode } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='Â»'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\n\nvar Attribution = function (_super) {\n  __extends(Attribution, _super);\n  /**\n   * @param {Options} [opt_options] Attribution options.\n   */\n\n\n  function Attribution(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    }) || this;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    _this.ulElement_ = document.createElement('ul');\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.userCollapsed_ = _this.collapsed_;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.overrideCollapsible_ = options.collapsible !== undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n\n    var className = options.className !== undefined ? options.className : 'ol-attribution';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n    var expandClassName = options.expandClassName !== undefined ? options.expandClassName : className + '-expand';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\n    var collapseClassName = options.collapseClassName !== undefined ? options.collapseClassName : className + '-collpase';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n      _this.collapseLabel_.className = collapseClassName;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n\n    var label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n      _this.label_.className = expandClassName;\n    } else {\n      _this.label_ = label;\n    }\n\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    _this.toggleButton_ = document.createElement('button');\n\n    _this.toggleButton_.setAttribute('type', 'button');\n\n    _this.toggleButton_.setAttribute('aria-expanded', String(!_this.collapsed_));\n\n    _this.toggleButton_.title = tipLabel;\n\n    _this.toggleButton_.appendChild(activeLabel);\n\n    _this.toggleButton_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.toggleButton_);\n    element.appendChild(_this.ulElement_);\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n\n    _this.renderedAttributions_ = [];\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.renderedVisible_ = true;\n    return _this;\n  }\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n\n\n  Attribution.prototype.collectSourceAttributions_ = function (frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    var lookup = {};\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n\n    var visibleAttributions = [];\n    var collapsible = true;\n    var layerStatesArray = frameState.layerStatesArray;\n\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var layerState = layerStatesArray[i];\n\n      if (!inView(layerState, frameState.viewState)) {\n        continue;\n      }\n\n      var source =\n      /** @type {import(\"../layer/Layer.js\").default} */\n      layerState.layer.getSource();\n\n      if (!source) {\n        continue;\n      }\n\n      var attributionGetter = source.getAttributions();\n\n      if (!attributionGetter) {\n        continue;\n      }\n\n      var attributions = attributionGetter(frameState);\n\n      if (!attributions) {\n        continue;\n      }\n\n      collapsible = collapsible && source.getAttributionsCollapsible() !== false;\n\n      if (Array.isArray(attributions)) {\n        for (var j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n\n    if (!this.overrideCollapsible_) {\n      this.setCollapsible(collapsible);\n    }\n\n    return visibleAttributions;\n  };\n  /**\n   * @private\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n\n\n  Attribution.prototype.updateElement_ = function (frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n\n      return;\n    }\n\n    var attributions = this.collectSourceAttributions_(frameState);\n    var visible = attributions.length > 0;\n\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_); // append the attributions\n\n    for (var i = 0, ii = attributions.length; i < ii; ++i) {\n      var element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  Attribution.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleToggle_();\n    this.userCollapsed_ = this.collapsed_;\n  };\n  /**\n   * @private\n   */\n\n\n  Attribution.prototype.handleToggle_ = function () {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n\n    this.collapsed_ = !this.collapsed_;\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n  };\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n\n\n  Attribution.prototype.getCollapsible = function () {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n\n\n  Attribution.prototype.setCollapsible = function (collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n\n    if (this.userCollapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n\n\n  Attribution.prototype.setCollapsed = function (collapsed) {\n    this.userCollapsed_ = collapsed;\n\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n\n    this.handleToggle_();\n  };\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n\n\n  Attribution.prototype.getCollapsed = function () {\n    return this.collapsed_;\n  };\n  /**\n   * Update the attribution element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n\n\n  Attribution.prototype.render = function (mapEvent) {\n    this.updateElement_(mapEvent.frameState);\n  };\n\n  return Attribution;\n}(Control);\n\nexport default Attribution;","map":{"version":3,"sources":["../src/control/Attribution.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { equals } from '../array.js';\nimport { inView } from '../layer/Layer.js';\nimport { removeChildren, replaceNode } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='Â»'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nvar Attribution = /** @class */ (function (_super) {\n    __extends(Attribution, _super);\n    /**\n     * @param {Options} [opt_options] Attribution options.\n     */\n    function Attribution(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            render: options.render,\n            target: options.target,\n        }) || this;\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.ulElement_ = document.createElement('ul');\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.collapsed_ =\n            options.collapsed !== undefined ? options.collapsed : true;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.userCollapsed_ = _this.collapsed_;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.overrideCollapsible_ = options.collapsible !== undefined;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.collapsible_ =\n            options.collapsible !== undefined ? options.collapsible : true;\n        if (!_this.collapsible_) {\n            _this.collapsed_ = false;\n        }\n        var className = options.className !== undefined ? options.className : 'ol-attribution';\n        var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n        var expandClassName = options.expandClassName !== undefined\n            ? options.expandClassName\n            : className + '-expand';\n        var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\n        var collapseClassName = options.collapseClassName !== undefined\n            ? options.collapseClassName\n            : className + '-collpase';\n        if (typeof collapseLabel === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.collapseLabel_ = document.createElement('span');\n            _this.collapseLabel_.textContent = collapseLabel;\n            _this.collapseLabel_.className = collapseClassName;\n        }\n        else {\n            _this.collapseLabel_ = collapseLabel;\n        }\n        var label = options.label !== undefined ? options.label : 'i';\n        if (typeof label === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.label_ = document.createElement('span');\n            _this.label_.textContent = label;\n            _this.label_.className = expandClassName;\n        }\n        else {\n            _this.label_ = label;\n        }\n        var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.toggleButton_ = document.createElement('button');\n        _this.toggleButton_.setAttribute('type', 'button');\n        _this.toggleButton_.setAttribute('aria-expanded', String(!_this.collapsed_));\n        _this.toggleButton_.title = tipLabel;\n        _this.toggleButton_.appendChild(activeLabel);\n        _this.toggleButton_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        var cssClasses = className +\n            ' ' +\n            CLASS_UNSELECTABLE +\n            ' ' +\n            CLASS_CONTROL +\n            (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n            (_this.collapsible_ ? '' : ' ol-uncollapsible');\n        var element = _this.element;\n        element.className = cssClasses;\n        element.appendChild(_this.toggleButton_);\n        element.appendChild(_this.ulElement_);\n        /**\n         * A list of currently rendered resolutions.\n         * @type {Array<string>}\n         * @private\n         */\n        _this.renderedAttributions_ = [];\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.renderedVisible_ = true;\n        return _this;\n    }\n    /**\n     * Collect a list of visible attributions and set the collapsible state.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {Array<string>} Attributions.\n     * @private\n     */\n    Attribution.prototype.collectSourceAttributions_ = function (frameState) {\n        /**\n         * Used to determine if an attribution already exists.\n         * @type {!Object<string, boolean>}\n         */\n        var lookup = {};\n        /**\n         * A list of visible attributions.\n         * @type {Array<string>}\n         */\n        var visibleAttributions = [];\n        var collapsible = true;\n        var layerStatesArray = frameState.layerStatesArray;\n        for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n            var layerState = layerStatesArray[i];\n            if (!inView(layerState, frameState.viewState)) {\n                continue;\n            }\n            var source = /** @type {import(\"../layer/Layer.js\").default} */ (layerState.layer).getSource();\n            if (!source) {\n                continue;\n            }\n            var attributionGetter = source.getAttributions();\n            if (!attributionGetter) {\n                continue;\n            }\n            var attributions = attributionGetter(frameState);\n            if (!attributions) {\n                continue;\n            }\n            collapsible =\n                collapsible && source.getAttributionsCollapsible() !== false;\n            if (Array.isArray(attributions)) {\n                for (var j = 0, jj = attributions.length; j < jj; ++j) {\n                    if (!(attributions[j] in lookup)) {\n                        visibleAttributions.push(attributions[j]);\n                        lookup[attributions[j]] = true;\n                    }\n                }\n            }\n            else {\n                if (!(attributions in lookup)) {\n                    visibleAttributions.push(attributions);\n                    lookup[attributions] = true;\n                }\n            }\n        }\n        if (!this.overrideCollapsible_) {\n            this.setCollapsible(collapsible);\n        }\n        return visibleAttributions;\n    };\n    /**\n     * @private\n     * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    Attribution.prototype.updateElement_ = function (frameState) {\n        if (!frameState) {\n            if (this.renderedVisible_) {\n                this.element.style.display = 'none';\n                this.renderedVisible_ = false;\n            }\n            return;\n        }\n        var attributions = this.collectSourceAttributions_(frameState);\n        var visible = attributions.length > 0;\n        if (this.renderedVisible_ != visible) {\n            this.element.style.display = visible ? '' : 'none';\n            this.renderedVisible_ = visible;\n        }\n        if (equals(attributions, this.renderedAttributions_)) {\n            return;\n        }\n        removeChildren(this.ulElement_);\n        // append the attributions\n        for (var i = 0, ii = attributions.length; i < ii; ++i) {\n            var element = document.createElement('li');\n            element.innerHTML = attributions[i];\n            this.ulElement_.appendChild(element);\n        }\n        this.renderedAttributions_ = attributions;\n    };\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    Attribution.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleToggle_();\n        this.userCollapsed_ = this.collapsed_;\n    };\n    /**\n     * @private\n     */\n    Attribution.prototype.handleToggle_ = function () {\n        this.element.classList.toggle(CLASS_COLLAPSED);\n        if (this.collapsed_) {\n            replaceNode(this.collapseLabel_, this.label_);\n        }\n        else {\n            replaceNode(this.label_, this.collapseLabel_);\n        }\n        this.collapsed_ = !this.collapsed_;\n        this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n    };\n    /**\n     * Return `true` if the attribution is collapsible, `false` otherwise.\n     * @return {boolean} True if the widget is collapsible.\n     * @api\n     */\n    Attribution.prototype.getCollapsible = function () {\n        return this.collapsible_;\n    };\n    /**\n     * Set whether the attribution should be collapsible.\n     * @param {boolean} collapsible True if the widget is collapsible.\n     * @api\n     */\n    Attribution.prototype.setCollapsible = function (collapsible) {\n        if (this.collapsible_ === collapsible) {\n            return;\n        }\n        this.collapsible_ = collapsible;\n        this.element.classList.toggle('ol-uncollapsible');\n        if (this.userCollapsed_) {\n            this.handleToggle_();\n        }\n    };\n    /**\n     * Collapse or expand the attribution according to the passed parameter. Will\n     * not do anything if the attribution isn't collapsible or if the current\n     * collapsed state is already the one requested.\n     * @param {boolean} collapsed True if the widget is collapsed.\n     * @api\n     */\n    Attribution.prototype.setCollapsed = function (collapsed) {\n        this.userCollapsed_ = collapsed;\n        if (!this.collapsible_ || this.collapsed_ === collapsed) {\n            return;\n        }\n        this.handleToggle_();\n    };\n    /**\n     * Return `true` when the attribution is currently collapsed or `false`\n     * otherwise.\n     * @return {boolean} True if the widget is collapsed.\n     * @api\n     */\n    Attribution.prototype.getCollapsed = function () {\n        return this.collapsed_;\n    };\n    /**\n     * Update the attribution element.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @override\n     */\n    Attribution.prototype.render = function (mapEvent) {\n        this.updateElement_(mapEvent.frameState);\n    };\n    return Attribution;\n}(Control));\nexport default Attribution;\n//# sourceMappingURL=Attribution.js.map"]},"metadata":{},"sourceType":"module"}