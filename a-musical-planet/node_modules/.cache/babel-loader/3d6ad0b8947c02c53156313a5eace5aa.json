{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst countries = require(\"./countriesInfo.json\");\n\nconst geoSVG = require(\"./countriesSVG.json\");\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst colors = {\n  Asia: \"#E5B961\",\n  Europe: \"#D4A29C\",\n  Africa: \"#EDCC8B\",\n  SouthAmerica: \"#E8B298\",\n  //NorthAmerica: \"#A26360\",\n  NorthAmerica: \"#C7877F\",\n  Oceania: \"#7FC6A4\",\n  Water: \"#BDD1C5\",\n  Russia: \"#DDAE7F\",\n  Selected: \"#FFAAFA\"\n};\n\nconst MapChart = props => {\n  _s();\n\n  const selectedStyle = {\n    fill: colors.Selected,\n    stroke: \"yellow\",\n    strokeWidth: 1,\n    outline: \"none\"\n  };\n  const [currPos, setCurrPos] = useState({\n    zoom: 1,\n    coordinates: [0, 0]\n  });\n\n  const renderStyle = country => {\n    if (!country.area) return [{\n      fontSize: \"0px\"\n    }, 0];\n    let adjustedFont = country.area > 500000 ? country.area / 800000 + 3.5 : country.area / 800000 + 1.3;\n    adjustedFont += 1;\n    if (adjustedFont <= country.name.length) adjustedFont = adjustedFont / 1.3; //const rightOffset = adjustedFont;\n\n    return [{\n      fontSize: `${adjustedFont}px`,\n      //stroke: \"#FFF\",\n      stroke: colors[country.CONTINENT],\n      strokeWidth: `${adjustedFont / 50}px`\n    }, adjustedFont - 1];\n  };\n\n  const projection = geoMercator().scale(153).center([40, 50]);\n  const [currCountry, setCurrCountry] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      \"data-tip\": \"\",\n      projection: projection,\n      style: {\n        width: \"100%\",\n        height: \"auto\",\n        outline: \"none\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        width: \"100%\",\n        height: \"100%\",\n        style: {\n          fill: colors.Water\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        translateExtent: [[-100, -50], [860, 600]],\n        onMoveEnd: props => {\n          setCurrPos({\n            zoom: props.zoom,\n            coordinates: props.coordinates\n          });\n        },\n        maxZoom: 12,\n        zoom: currPos.zoom,\n        center: currPos.coordinates,\n        children: [/*#__PURE__*/_jsxDEV(Geographies, {\n          geography: geoSVG,\n          children: ({\n            geographies\n          }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            onFocus: () => {\n              setCurrCountry(geo.properties.NAME);\n            },\n            onClick: () => {\n              props.setCurrChosen(geo.properties.NAME);\n            },\n            onMouseEnter: () => {\n              props.setTooltipContent(geo.properties.NAME);\n            },\n            onMouseLeave: () => {\n              props.setTooltipContent(\"\");\n            },\n            style: {\n              default: currCountry === geo.properties.NAME ? selectedStyle : {\n                fill: colors[geo.properties.CONTINENT],\n                stroke: \"#000000\",\n                strokeWidth: 0.3,\n                outline: \"none\"\n              },\n              hover: currCountry === geo.properties.NAME ? selectedStyle : {\n                fill: colors[geo.properties.CONTINENT],\n                stroke: \"#000000\",\n                strokeWidth: 0.3,\n                outline: \"none\"\n              }\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), countries.map(country => {\n          return /*#__PURE__*/_jsxDEV(Marker //markerHeight=\"5\"\n          , {\n            scale: 5,\n            coordinates: [country.latlng[1], country.latlng[0]],\n            fill: \"#000\",\n            children: currPos.zoom * 2 + renderStyle(country)[1] > 9 ? renderStyle(country)[1] > country.name.length ? /*#__PURE__*/_jsxDEV(\"text\", {\n              textAnchor: \"middle\",\n              pointerEvents: \"none\",\n              style: renderStyle(country)[0],\n              children: country.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 21\n            }, this) : country.name.split(\" \").map((word, index) => {\n              return /*#__PURE__*/_jsxDEV(\"text\", {\n                textAnchor: \"middle\",\n                pointerEvents: \"none\",\n                y: (renderStyle(country)[1] / 1.3 + 1.3) * index,\n                style: renderStyle(country)[0],\n                children: word\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 25\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MapChart, \"8QxmiGXbhISpoTNPgZud4YqtD6M=\");\n\n_c = MapChart;\nexport default _c2 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js"],"names":["React","memo","useState","ZoomableGroup","ComposableMap","Geographies","Geography","Marker","geoMercator","countries","require","geoSVG","rounded","num","Math","round","colors","Asia","Europe","Africa","SouthAmerica","NorthAmerica","Oceania","Water","Russia","Selected","MapChart","props","selectedStyle","fill","stroke","strokeWidth","outline","currPos","setCurrPos","zoom","coordinates","renderStyle","country","area","fontSize","adjustedFont","name","length","CONTINENT","projection","scale","center","currCountry","setCurrCountry","width","height","geographies","map","geo","properties","NAME","setCurrChosen","setTooltipContent","default","hover","rsmKey","latlng","split","word","index"],"mappings":"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","sourcesContent":["import React, { memo, useState } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\n\nimport \"./Map.css\";\n\nconst countries = require(\"./countriesInfo.json\");\n\nconst geoSVG = require(\"./countriesSVG.json\");\n\nconst rounded = (num) => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst colors = {\n  Asia: \"#E5B961\",\n  Europe: \"#D4A29C\",\n  Africa: \"#EDCC8B\",\n  SouthAmerica: \"#E8B298\",\n  //NorthAmerica: \"#A26360\",\n  NorthAmerica: \"#C7877F\",\n  Oceania: \"#7FC6A4\",\n  Water: \"#BDD1C5\",\n  Russia: \"#DDAE7F\",\n  Selected: \"#FFAAFA\",\n};\n\nconst MapChart = (props) => {\n  const selectedStyle = {\n    fill: colors.Selected,\n    stroke: \"yellow\",\n    strokeWidth: 1,\n    outline: \"none\",\n  };\n\n  const [currPos, setCurrPos] = useState({ zoom: 1, coordinates: [0, 0] });\n  const renderStyle = (country) => {\n    if (!country.area) return [{ fontSize: \"0px\" }, 0];\n    let adjustedFont =\n      country.area > 500000\n        ? country.area / 800000 + 3.5\n        : country.area / 800000 + 1.3;\n    adjustedFont += 1;\n    if (adjustedFont <= country.name.length) adjustedFont = adjustedFont / 1.3;\n    //const rightOffset = adjustedFont;\n    return [\n      {\n        fontSize: `${adjustedFont}px`,\n        //stroke: \"#FFF\",\n        stroke: colors[country.CONTINENT],\n        strokeWidth: `${adjustedFont / 50}px`,\n      },\n      adjustedFont - 1,\n    ];\n  };\n  const projection = geoMercator().scale(153).center([40, 50]);\n\n  const [currCountry, setCurrCountry] = useState(\"\");\n\n  return (\n    <>\n      <ComposableMap\n        data-tip=\"\"\n        projection={projection}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n          outline: \"none\",\n        }}\n      >\n        <rect width=\"100%\" height=\"100%\" style={{ fill: colors.Water }}></rect>\n        <ZoomableGroup\n          translateExtent={[\n            [-100, -50],\n            [860, 600],\n          ]}\n          onMoveEnd={(props) => {\n            setCurrPos({\n              zoom: props.zoom,\n              coordinates: props.coordinates,\n            });\n          }}\n          maxZoom={12}\n          zoom={currPos.zoom}\n          center={currPos.coordinates}\n        >\n          <Geographies geography={geoSVG}>\n            {({ geographies }) =>\n              geographies.map((geo) => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onFocus={() => {\n                    setCurrCountry(geo.properties.NAME);\n                  }}\n                  onClick={() => {\n                    props.setCurrChosen(geo.properties.NAME);\n                  }}\n                  onMouseEnter={() => {\n                    props.setTooltipContent(geo.properties.NAME);\n                  }}\n                  onMouseLeave={() => {\n                    props.setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default:\n                      currCountry === geo.properties.NAME\n                        ? selectedStyle\n                        : {\n                            fill: colors[geo.properties.CONTINENT],\n                            stroke: \"#000000\",\n                            strokeWidth: 0.3,\n                            outline: \"none\",\n                          },\n                    hover:\n                      currCountry === geo.properties.NAME\n                        ? selectedStyle\n                        : {\n                            fill: colors[geo.properties.CONTINENT],\n                            stroke: \"#000000\",\n                            strokeWidth: 0.3,\n                            outline: \"none\",\n                          },\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n          {countries.map((country) => {\n            return (\n              <Marker\n                //markerHeight=\"5\"\n                scale={5}\n                coordinates={[country.latlng[1], country.latlng[0]]}\n                fill=\"#000\"\n              >\n                {currPos.zoom * 2 + renderStyle(country)[1] > 9 ? (\n                  renderStyle(country)[1] > country.name.length ? (\n                    <text\n                      textAnchor=\"middle\"\n                      pointerEvents=\"none\"\n                      style={renderStyle(country)[0]}\n                    >\n                      {country.name}\n                    </text>\n                  ) : (\n                    country.name.split(\" \").map((word, index) => {\n                      return (\n                        <text\n                          textAnchor=\"middle\"\n                          pointerEvents=\"none\"\n                          y={(renderStyle(country)[1] / 1.3 + 1.3) * index}\n                          style={renderStyle(country)[0]}\n                        >\n                          {word}\n                        </text>\n                      );\n                    })\n                  )\n                ) : (\n                  <></>\n                )}\n              </Marker>\n            );\n          })}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}