{"ast":null,"code":"import { ticks } from \"d3-array\";\nimport { format } from \"d3-format\";\nimport nice from \"./nice.js\";\nimport { copy, transformer } from \"./continuous.js\";\nimport { initRange } from \"./init.js\";\n\nfunction transformLog(x) {\n  return Math.log(x);\n}\n\nfunction transformExp(x) {\n  return Math.exp(x);\n}\n\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\n\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {\n    return Math.pow(base, x);\n  };\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {\n    return Math.log(x) / base;\n  });\n}\n\nfunction reflect(f) {\n  return function (x) {\n    return -f(-x);\n  };\n}\n\nexport function loggish(transform) {\n  var scale = transform(transformLog, transformExp),\n      domain = scale.domain,\n      base = 10,\n      logs,\n      pows;\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n\n    return scale;\n  }\n\n  scale.base = function (_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function (_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = function (count) {\n    var d = domain(),\n        u = d[0],\n        v = d[d.length - 1],\n        r;\n    if (r = v < u) i = u, u = v, v = i;\n    var i = logs(u),\n        j = logs(v),\n        p,\n        k,\n        t,\n        n = count == null ? 10 : +count,\n        z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.floor(i), j = Math.ceil(j);\n      if (u > 0) for (; i <= j; ++i) {\n        for (k = 1, p = pows(i); k < base; ++k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i <= j; ++i) {\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n      if (z.length * 2 < n) z = ticks(u, v, n);\n    } else {\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = function (count, specifier) {\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n    if (typeof specifier !== \"function\") specifier = format(specifier);\n    if (count === Infinity) return specifier;\n    if (count == null) count = 10;\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n\n    return function (d) {\n      var i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = function () {\n    return domain(nice(domain(), {\n      floor: function (x) {\n        return pows(Math.floor(logs(x)));\n      },\n      ceil: function (x) {\n        return pows(Math.ceil(logs(x)));\n      }\n    }));\n  };\n\n  return scale;\n}\nexport default function log() {\n  var scale = loggish(transformer()).domain([1, 10]);\n\n  scale.copy = function () {\n    return copy(scale, log()).base(scale.base());\n  };\n\n  initRange.apply(scale, arguments);\n  return scale;\n}","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/node_modules/d3-scale/src/log.js"],"names":["ticks","format","nice","copy","transformer","initRange","transformLog","x","Math","log","transformExp","exp","transformLogn","transformExpn","pow10","isFinite","powp","base","E","pow","logp","log10","log2","reflect","f","loggish","transform","scale","domain","logs","pows","rescale","_","arguments","length","count","d","u","v","r","i","j","p","k","t","n","z","floor","ceil","push","min","map","reverse","tickFormat","specifier","Infinity","max","round","apply"],"mappings":"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","sourcesContent":["import {ticks} from \"d3-array\";\nimport {format} from \"d3-format\";\nimport nice from \"./nice.js\";\nimport {copy, transformer} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\n\nfunction transformLog(x) {\n  return Math.log(x);\n}\n\nfunction transformExp(x) {\n  return Math.exp(x);\n}\n\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\n\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : function(x) { return Math.pow(base, x); };\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n}\n\nfunction reflect(f) {\n  return function(x) {\n    return -f(-x);\n  };\n}\n\nexport function loggish(transform) {\n  var scale = transform(transformLog, transformExp),\n      domain = scale.domain,\n      base = 10,\n      logs,\n      pows;\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = function(count) {\n    var d = domain(),\n        u = d[0],\n        v = d[d.length - 1],\n        r;\n\n    if (r = v < u) i = u, u = v, v = i;\n\n    var i = logs(u),\n        j = logs(v),\n        p,\n        k,\n        t,\n        n = count == null ? 10 : +count,\n        z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.floor(i), j = Math.ceil(j);\n      if (u > 0) for (; i <= j; ++i) {\n        for (k = 1, p = pows(i); k < base; ++k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i <= j; ++i) {\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n      if (z.length * 2 < n) z = ticks(u, v, n);\n    } else {\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n    if (typeof specifier !== \"function\") specifier = format(specifier);\n    if (count === Infinity) return specifier;\n    if (count == null) count = 10;\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return function(d) {\n      var i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = function() {\n    return domain(nice(domain(), {\n      floor: function(x) { return pows(Math.floor(logs(x))); },\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\n    }));\n  };\n\n  return scale;\n}\n\nexport default function log() {\n  var scale = loggish(transformer()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, log()).base(scale.base());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n"]},"metadata":{},"sourceType":"module"}