{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/Play.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport MapPage from \"./MapPage\";\nimport GuessPopup from \"./GuessPopup\";\nimport CountryGuessInfo from \"./CountryGuessInfo.js\";\nimport \"./Play.scss\";\nimport haversine from \"haversine-distance\";\nimport getCookie from \"./GetCookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\n\nconst countries = require(\"./WorldInfo.json\");\n\nconst mapProps = require(\"./MapProps.json\");\n\nconst colors = require(\"./colors.json\");\n\nconst Play = ({\n  accessToken,\n  setAccessTokenHandler,\n  setTokenFromCookie,\n  currMap,\n  sendScoreToServer\n}) => {\n  _s();\n\n  const [currTrack, setCurrTrack] = useState({\n    round: 0\n  });\n  const [redirect, setRedirect] = useState(\"\");\n  const [currChosen, setCurrChosen] = useState(\"\");\n  const handleNewChosen = useCallback(newChosen => {\n    setCurrChosen(newChosen);\n  }, []); //first value is a bool on whether to show popup,\n  //second is the score to show\n\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0,\n    sessionInfo: []\n  });\n  const audioRef = useRef(null);\n\n  const newGame = () => {\n    nextTrack();\n    setPopup({\n      show: false,\n      roundScore: 0,\n      sessionScore: 0,\n      sessionInfo: []\n    });\n  };\n\n  const nextTrack = () => {\n    setPopup({ ...popup,\n      show: false,\n      roundScore: 0\n    });\n    setCurrChosen(\"\");\n\n    if (accessToken === null || accessToken === \"\") {\n      const accessTokenCookie = getCookie(\"accessToken\"); // const refreshTokenCookie = getCookie(\"refreshToken\");\n\n      if (!setTokenFromCookie()) {\n        console.log(\"Could not find cookie\");\n        return setRedirect(\"login\");\n      } // if (refreshTokenCookie !== \"\") {\n      //   refreshTokens(refreshTokenCookie);\n      // }\n\n    }\n\n    let relevantPlaylists = Playlists[currMap];\n\n    if (currMap.slice(0, 5) === \"world\") {\n      if (currMap.slice(5) === \"Easy\") relevantPlaylists = Playlists.world.filter(country => country.difficulty === \"Easy\");else if (currMap.slice(5) === \"Medium\") {\n        relevantPlaylists = Playlists.world.filter(country => country.difficulty === \"Easy\" || country.difficulty === \"Medium\");\n      } else relevantPlaylists = Playlists.world;\n    }\n\n    let currPlaylistIndex = Math.floor(Math.random() * relevantPlaylists.length);\n\n    if (relevantPlaylists[currPlaylistIndex].country === currTrack.location) {\n      nextTrack();\n      return; // if (currPlaylistIndex > 0) currPlaylistIndex--;\n      // else currPlaylistIndex++;\n    }\n\n    fetch(`https://api.spotify.com/v1/playlists/${relevantPlaylists[currPlaylistIndex].playlistId}`, {\n      headers: {\n        Authorization: \"Bearer \" + accessToken\n      }\n    }).then(response => {\n      console.log(response.status);\n      if (response.status >= 400) throw response;\n      return response.json();\n    }).then(data => {\n      let track = \"\";\n      let trackIndex = 0;\n\n      while (track === \"\") {\n        trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n        track = data.tracks.items[trackIndex].track;\n\n        if (track.preview_url === null) {\n          console.log(\"Track\", data.tracks.items[trackIndex].track.name, \"in country\", data.name, \"has no preview url\");\n          track = \"\";\n        }\n      }\n\n      console.log(track);\n      setCurrTrack({\n        url: track.preview_url,\n        artist: data.tracks.items[trackIndex].track.artists[0].name,\n        album: data.tracks.items[trackIndex].track.album.name,\n        image: data.tracks.items[trackIndex].track.album.images[0].url,\n        location: data.name,\n        name: data.tracks.items[trackIndex].track.name,\n        round: currTrack.round < 5 ? currTrack.round + 1 : 1,\n        id: data.tracks.items[trackIndex].track.id\n      });\n      audioRef.current.load();\n      audioRef.current.play();\n    }).catch(err => {\n      console.log(\"ERROR LOADING TRACK FROM COUNTRY\", relevantPlaylists[currPlaylistIndex].country);\n      console.log(\"err\", err);\n      console.log(\"err status\", err.status);\n      if (err.status === 400) return window.location.replace(\"http://localhost:8888/getNewToken\");\n\n      if (err.status === 401) {\n        return refreshToken();\n      }\n\n      if (err.status === 404) return nextTrack(); //this is only really for error 401, meaning\n\n      return setRedirect(\"maps\");\n    });\n  };\n\n  const refreshToken = () => {\n    console.log(\"OLD ACCESS TOKEN:\", accessToken);\n    fetch(\"http://localhost:8888/refreshToken\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(newAccessToken => newAccessToken.json()).then(data => {\n      if (data && data.access_token) {\n        console.log(\"RETURNING NEW ACCESS TOKEN:\", data.access_token);\n        setAccessTokenHandler(data.access_token);\n        return nextTrack();\n      }\n\n      console.log(\"Could not refresh! Going to server's /getNewToken...\");\n      return window.location.replace(\"http://localhost:8888/getNewToken\");\n    });\n  };\n\n  const guessGiven = () => {\n    audioRef.current.pause();\n    const currChosenCountryDOM = document.querySelector(`#${currChosen[0].toLowerCase() + currChosen.slice(1).replaceAll(\" \", \"\")}`);\n\n    if (currChosenCountryDOM) {\n      currChosenCountryDOM.classList.remove(\"pressed\");\n      currChosenCountryDOM.style.fill = colors[currChosenCountryDOM.getAttribute(\"continent\")];\n    }\n\n    const currTrackCountry = countries.filter(function (country) {\n      return country.name.common === currTrack.location;\n    })[0];\n\n    if (currChosen === currTrack.location) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore,\n        sessionInfo: [...popup.sessionInfo, {\n          country: currTrack.location,\n          songId: currTrack.id,\n          correct: true,\n          score: 5000,\n          code: currTrackCountry.cca2.toLowerCase()\n        }]\n      });\n      return;\n    }\n\n    const currTrackCountryCoords = currTrackCountry.latlng;\n    const chosenCountryCoords = countries.filter(function (country) {\n      return country.name.common === currChosen;\n    })[0].latlng;\n    let scoreDeduction = Math.ceil(haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2);\n    console.log(\"Initial deduction\", scoreDeduction);\n\n    switch (currMap) {\n      case \"Europe\":\n        scoreDeduction *= 4;\n        break;\n\n      case \"SouthAmerica\":\n        scoreDeduction *= 4;\n        break;\n\n      case \"NorthAmerica\":\n        scoreDeduction *= 3;\n        break;\n\n      case \"Asia\":\n        scoreDeduction *= 2;\n        break;\n\n      case \"Oceania\":\n        scoreDeduction *= 2;\n        break;\n\n      case \"Africa\":\n        scoreDeduction *= 2;\n        break;\n\n      default:\n        break;\n    }\n\n    console.log(\"Final deduction\", scoreDeduction);\n    let score = maxScore - scoreDeduction;\n    if (score < 0) score = 0;\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score,\n      sessionInfo: [...popup.sessionInfo, {\n        country: currTrack.location,\n        songId: currTrack.id,\n        correct: false,\n        score: score,\n        code: currTrackCountry.cca2.toLowerCase()\n      }]\n    }); // if (currTrack.location === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.location}!`);\n    // }\n    // getNewArtist();\n  };\n\n  useEffect(() => {\n    nextTrack();\n  }, []);\n\n  if (redirect !== \"\") {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `/${redirect}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 12\n    }, this);\n  } // if (redirect === \"login\") {\n  //   return <Redirect to=\"/login\" />;\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\",\n        children: /*#__PURE__*/_jsxDEV(CountryGuessInfo, {\n          currChosen: currChosen,\n          guessGiven: guessGiven,\n          audioRef: audioRef,\n          trackURL: currTrack.url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-div\",\n        children: /*#__PURE__*/_jsxDEV(MapPage, {\n          handleNewChosen: handleNewChosen,\n          currMap: currMap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GuessPopup, {\n        show: popup.show,\n        currMap: currMap,\n        currTrack: currTrack,\n        currChosen: currChosen,\n        nextTrack: nextTrack,\n        roundScore: popup.roundScore,\n        sessionScore: popup.sessionScore,\n        sessionInfo: popup.sessionInfo,\n        sendScoreToServer: sendScoreToServer,\n        newGame: newGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Play, \"LBqI4MthfZCQmMl8HfVlVyCuthM=\");\n\n_c = Play;\nexport default Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/Play.js"],"names":["React","useState","useEffect","useRef","useCallback","Redirect","MapPage","GuessPopup","CountryGuessInfo","haversine","getCookie","maxScore","Playlists","require","countries","mapProps","colors","Play","accessToken","setAccessTokenHandler","setTokenFromCookie","currMap","sendScoreToServer","currTrack","setCurrTrack","round","redirect","setRedirect","currChosen","setCurrChosen","handleNewChosen","newChosen","popup","setPopup","show","roundScore","sessionScore","sessionInfo","audioRef","newGame","nextTrack","accessTokenCookie","console","log","relevantPlaylists","slice","world","filter","country","difficulty","currPlaylistIndex","Math","floor","random","length","location","fetch","playlistId","headers","Authorization","then","response","status","json","data","track","trackIndex","tracks","items","preview_url","name","url","artist","artists","album","image","images","id","current","load","play","catch","err","window","replace","refreshToken","method","credentials","Accept","newAccessToken","access_token","guessGiven","pause","currChosenCountryDOM","document","querySelector","toLowerCase","replaceAll","classList","remove","style","fill","getAttribute","currTrackCountry","common","songId","correct","score","code","cca2","currTrackCountryCoords","latlng","chosenCountryCoords","scoreDeduction","ceil"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport MapPage from \"./MapPage\";\nimport GuessPopup from \"./GuessPopup\";\nimport CountryGuessInfo from \"./CountryGuessInfo.js\";\nimport \"./Play.scss\";\nimport haversine from \"haversine-distance\";\n\nimport getCookie from \"./GetCookie\";\n\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\nconst countries = require(\"./WorldInfo.json\");\nconst mapProps = require(\"./MapProps.json\");\nconst colors = require(\"./colors.json\");\n\nconst Play = ({\n  accessToken,\n  setAccessTokenHandler,\n  setTokenFromCookie,\n  currMap,\n  sendScoreToServer,\n}) => {\n  const [currTrack, setCurrTrack] = useState({ round: 0 });\n  const [redirect, setRedirect] = useState(\"\");\n\n  const [currChosen, setCurrChosen] = useState(\"\");\n\n  const handleNewChosen = useCallback((newChosen) => {\n    setCurrChosen(newChosen);\n  }, []);\n\n  //first value is a bool on whether to show popup,\n  //second is the score to show\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0,\n    sessionInfo: [],\n  });\n\n  const audioRef = useRef(null);\n\n  const newGame = () => {\n    nextTrack();\n    setPopup({\n      show: false,\n      roundScore: 0,\n      sessionScore: 0,\n      sessionInfo: [],\n    });\n  };\n\n  const nextTrack = () => {\n    setPopup({\n      ...popup,\n      show: false,\n      roundScore: 0,\n    });\n    setCurrChosen(\"\");\n    if (accessToken === null || accessToken === \"\") {\n      const accessTokenCookie = getCookie(\"accessToken\");\n      // const refreshTokenCookie = getCookie(\"refreshToken\");\n      if (!setTokenFromCookie()) {\n        console.log(\"Could not find cookie\");\n        return setRedirect(\"login\");\n      }\n      // if (refreshTokenCookie !== \"\") {\n      //   refreshTokens(refreshTokenCookie);\n      // }\n    }\n\n    let relevantPlaylists = Playlists[currMap];\n    if (currMap.slice(0, 5) === \"world\") {\n      if (currMap.slice(5) === \"Easy\")\n        relevantPlaylists = Playlists.world.filter(\n          (country) => country.difficulty === \"Easy\"\n        );\n      else if (currMap.slice(5) === \"Medium\") {\n        relevantPlaylists = Playlists.world.filter(\n          (country) =>\n            country.difficulty === \"Easy\" || country.difficulty === \"Medium\"\n        );\n      } else relevantPlaylists = Playlists.world;\n    }\n\n    let currPlaylistIndex = Math.floor(\n      Math.random() * relevantPlaylists.length\n    );\n\n    if (relevantPlaylists[currPlaylistIndex].country === currTrack.location) {\n      nextTrack();\n      return;\n      // if (currPlaylistIndex > 0) currPlaylistIndex--;\n      // else currPlaylistIndex++;\n    }\n    fetch(\n      `https://api.spotify.com/v1/playlists/${relevantPlaylists[currPlaylistIndex].playlistId}`,\n      {\n        headers: { Authorization: \"Bearer \" + accessToken },\n      }\n    )\n      .then((response) => {\n        console.log(response.status);\n        if (response.status >= 400) throw response;\n        return response.json();\n      })\n      .then((data) => {\n        let track = \"\";\n        let trackIndex = 0;\n        while (track === \"\") {\n          trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n          track = data.tracks.items[trackIndex].track;\n          if (track.preview_url === null) {\n            console.log(\n              \"Track\",\n              data.tracks.items[trackIndex].track.name,\n              \"in country\",\n              data.name,\n              \"has no preview url\"\n            );\n            track = \"\";\n          }\n        }\n        console.log(track);\n        setCurrTrack({\n          url: track.preview_url,\n          artist: data.tracks.items[trackIndex].track.artists[0].name,\n          album: data.tracks.items[trackIndex].track.album.name,\n          image: data.tracks.items[trackIndex].track.album.images[0].url,\n          location: data.name,\n          name: data.tracks.items[trackIndex].track.name,\n          round: currTrack.round < 5 ? currTrack.round + 1 : 1,\n          id: data.tracks.items[trackIndex].track.id,\n        });\n        audioRef.current.load();\n        audioRef.current.play();\n      })\n      .catch((err) => {\n        console.log(\n          \"ERROR LOADING TRACK FROM COUNTRY\",\n          relevantPlaylists[currPlaylistIndex].country\n        );\n        console.log(\"err\", err);\n        console.log(\"err status\", err.status);\n        if (err.status === 400)\n          return window.location.replace(\"http://localhost:8888/getNewToken\");\n        if (err.status === 401) {\n          return refreshToken();\n        }\n        if (err.status === 404) return nextTrack();\n        //this is only really for error 401, meaning\n        return setRedirect(\"maps\");\n      });\n  };\n\n  const refreshToken = () => {\n    console.log(\"OLD ACCESS TOKEN:\", accessToken);\n    fetch(\"http://localhost:8888/refreshToken\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((newAccessToken) => newAccessToken.json())\n      .then((data) => {\n        if (data && data.access_token) {\n          console.log(\"RETURNING NEW ACCESS TOKEN:\", data.access_token);\n          setAccessTokenHandler(data.access_token);\n          return nextTrack();\n        }\n        console.log(\"Could not refresh! Going to server's /getNewToken...\");\n        return window.location.replace(\"http://localhost:8888/getNewToken\");\n      });\n  };\n\n  const guessGiven = () => {\n    audioRef.current.pause();\n    const currChosenCountryDOM = document.querySelector(\n      `#${\n        currChosen[0].toLowerCase() + currChosen.slice(1).replaceAll(\" \", \"\")\n      }`\n    );\n    if (currChosenCountryDOM) {\n      currChosenCountryDOM.classList.remove(\"pressed\");\n      currChosenCountryDOM.style.fill =\n        colors[currChosenCountryDOM.getAttribute(\"continent\")];\n    }\n    const currTrackCountry = countries.filter(function (country) {\n      return country.name.common === currTrack.location;\n    })[0];\n    if (currChosen === currTrack.location) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore,\n        sessionInfo: [\n          ...popup.sessionInfo,\n          {\n            country: currTrack.location,\n            songId: currTrack.id,\n            correct: true,\n            score: 5000,\n            code: currTrackCountry.cca2.toLowerCase(),\n          },\n        ],\n      });\n      return;\n    }\n\n    const currTrackCountryCoords = currTrackCountry.latlng;\n\n    const chosenCountryCoords = countries.filter(function (country) {\n      return country.name.common === currChosen;\n    })[0].latlng;\n\n    let scoreDeduction = Math.ceil(\n      haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2\n    );\n\n    console.log(\"Initial deduction\", scoreDeduction);\n\n    switch (currMap) {\n      case \"Europe\":\n        scoreDeduction *= 4;\n        break;\n      case \"SouthAmerica\":\n        scoreDeduction *= 4;\n        break;\n      case \"NorthAmerica\":\n        scoreDeduction *= 3;\n        break;\n      case \"Asia\":\n        scoreDeduction *= 2;\n        break;\n      case \"Oceania\":\n        scoreDeduction *= 2;\n        break;\n      case \"Africa\":\n        scoreDeduction *= 2;\n        break;\n      default:\n        break;\n    }\n\n    console.log(\"Final deduction\", scoreDeduction);\n\n    let score = maxScore - scoreDeduction;\n    if (score < 0) score = 0;\n\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score,\n      sessionInfo: [\n        ...popup.sessionInfo,\n        {\n          country: currTrack.location,\n          songId: currTrack.id,\n          correct: false,\n          score: score,\n          code: currTrackCountry.cca2.toLowerCase(),\n        },\n      ],\n    });\n    // if (currTrack.location === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.location}!`);\n    // }\n    // getNewArtist();\n  };\n\n  useEffect(() => {\n    nextTrack();\n  }, []);\n\n  if (redirect !== \"\") {\n    return <Redirect to={`/${redirect}`} />;\n  }\n  // if (redirect === \"login\") {\n  //   return <Redirect to=\"/login\" />;\n  // }\n  return (\n    <>\n      <div className=\"play-section\">\n        <div className=\"overlay\">\n          <CountryGuessInfo\n            currChosen={currChosen}\n            guessGiven={guessGiven}\n            audioRef={audioRef}\n            trackURL={currTrack.url}\n          />\n          {/* <button onClick={refreshToken}>Refresh</button> */}\n        </div>\n        <div className=\"map-div\">\n          <MapPage handleNewChosen={handleNewChosen} currMap={currMap} />\n        </div>\n        <GuessPopup\n          show={popup.show}\n          currMap={currMap}\n          currTrack={currTrack}\n          currChosen={currChosen}\n          nextTrack={nextTrack}\n          roundScore={popup.roundScore}\n          sessionScore={popup.sessionScore}\n          sessionInfo={popup.sessionInfo}\n          sendScoreToServer={sendScoreToServer}\n          newGame={newGame}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}