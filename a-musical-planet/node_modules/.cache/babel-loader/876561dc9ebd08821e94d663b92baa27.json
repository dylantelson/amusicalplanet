{"ast":null,"code":"/**\n * @module ol/geom/flat/contains\n */\nimport { forEachCorner } from '../../extent.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} Contains extent.\n */\n\nexport function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {\n  var outside = forEachCorner(extent,\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains (x, y).\n   */\n  function (coordinate) {\n    return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);\n  });\n  return !outside;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\n\nexport function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {\n  // https://geomalgorithms.com/a03-_inclusion.html\n  // Copyright 2000 softSurfer, 2012 Dan Sunday\n  // This code may be freely used and modified for any purpose\n  // providing that this copyright notice is included with it.\n  // SoftSurfer makes no warranty for this code, and cannot be held\n  // liable for any real or imagined damage resulting from its use.\n  // Users of this code must verify correctness for their application.\n  var wn = 0;\n  var x1 = flatCoordinates[end - stride];\n  var y1 = flatCoordinates[end - stride + 1];\n\n  for (; offset < end; offset += stride) {\n    var x2 = flatCoordinates[offset];\n    var y2 = flatCoordinates[offset + 1];\n\n    if (y1 <= y) {\n      if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\n        wn++;\n      }\n    } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\n      wn--;\n    }\n\n    x1 = x2;\n    y1 = y2;\n  }\n\n  return wn !== 0;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\n\nexport function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {\n  if (ends.length === 0) {\n    return false;\n  }\n\n  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\n    return false;\n  }\n\n  for (var i = 1, ii = ends.length; i < ii; ++i) {\n    if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\n\nexport function linearRingssContainsXY(flatCoordinates, offset, endss, stride, x, y) {\n  if (endss.length === 0) {\n    return false;\n  }\n\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n\n    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n      return true;\n    }\n\n    offset = ends[ends.length - 1];\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../src/geom/flat/contains.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/geom/flat/contains\n */\nimport { forEachCorner } from '../../extent.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} Contains extent.\n */\nexport function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {\n    var outside = forEachCorner(extent, \n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains (x, y).\n     */\n    function (coordinate) {\n        return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);\n    });\n    return !outside;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {\n    // https://geomalgorithms.com/a03-_inclusion.html\n    // Copyright 2000 softSurfer, 2012 Dan Sunday\n    // This code may be freely used and modified for any purpose\n    // providing that this copyright notice is included with it.\n    // SoftSurfer makes no warranty for this code, and cannot be held\n    // liable for any real or imagined damage resulting from its use.\n    // Users of this code must verify correctness for their application.\n    var wn = 0;\n    var x1 = flatCoordinates[end - stride];\n    var y1 = flatCoordinates[end - stride + 1];\n    for (; offset < end; offset += stride) {\n        var x2 = flatCoordinates[offset];\n        var y2 = flatCoordinates[offset + 1];\n        if (y1 <= y) {\n            if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\n                wn++;\n            }\n        }\n        else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\n            wn--;\n        }\n        x1 = x2;\n        y1 = y2;\n    }\n    return wn !== 0;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {\n    if (ends.length === 0) {\n        return false;\n    }\n    if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\n        return false;\n    }\n    for (var i = 1, ii = ends.length; i < ii; ++i) {\n        if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingssContainsXY(flatCoordinates, offset, endss, stride, x, y) {\n    if (endss.length === 0) {\n        return false;\n    }\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n            return true;\n        }\n        offset = ends[ends.length - 1];\n    }\n    return false;\n}\n//# sourceMappingURL=contains.js.map"]},"metadata":{},"sourceType":"module"}