{"ast":null,"code":"\"use strict\";\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n/**\n * Expose `ResponseBase`.\n */\n\n\nmodule.exports = ResponseBase;\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    if (Object.prototype.hasOwnProperty.call(ResponseBase.prototype, key)) obj[key] = ResponseBase.prototype[key];\n  }\n\n  return obj;\n}\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n  // content-type\n  var ct = header['content-type'] || '';\n  this.type = utils.type(ct); // params\n\n  var params = utils.params(ct);\n\n  for (var key in params) {\n    if (Object.prototype.hasOwnProperty.call(params, key)) this[key] = params[key];\n  }\n\n  this.links = {}; // links\n\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch (_unused) {// ignore\n  }\n};\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  var type = status / 100 | 0; // status / class\n\n  this.statusCode = status;\n  this.status = this.statusCode;\n  this.statusType = type; // basics\n\n  this.info = type === 1;\n  this.ok = type === 2;\n  this.redirect = type === 3;\n  this.clientError = type === 4;\n  this.serverError = type === 5;\n  this.error = type === 4 || type === 5 ? this.toError() : false; // sugar\n\n  this.created = status === 201;\n  this.accepted = status === 202;\n  this.noContent = status === 204;\n  this.badRequest = status === 400;\n  this.unauthorized = status === 401;\n  this.notAcceptable = status === 406;\n  this.forbidden = status === 403;\n  this.notFound = status === 404;\n  this.unprocessableEntity = status === 422;\n};","map":{"version":3,"sources":["../src/response-base.js"],"names":["utils","require","module","mixin","ResponseBase","Object","obj","field","ct","header","params","type","status"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\n\nconst utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (const key in ResponseBase.prototype) {\n    if (Object.prototype.hasOwnProperty.call(ResponseBase.prototype, key))\n      obj[key] = ResponseBase.prototype[key];\n  }\n\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n\n  // content-type\n  const ct = header['content-type'] || '';\n  this.type = utils.type(ct);\n\n  // params\n  const params = utils.params(ct);\n  for (const key in params) {\n    if (Object.prototype.hasOwnProperty.call(params, key))\n      this[key] = params[key];\n  }\n\n  this.links = {};\n\n  // links\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch {\n    // ignore\n  }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  const type = (status / 100) | 0;\n\n  // status / class\n  this.statusCode = status;\n  this.status = this.statusCode;\n  this.statusType = type;\n\n  // basics\n  this.info = type === 1;\n  this.ok = type === 2;\n  this.redirect = type === 3;\n  this.clientError = type === 4;\n  this.serverError = type === 5;\n  this.error = type === 4 || type === 5 ? this.toError() : false;\n\n  // sugar\n  this.created = status === 201;\n  this.accepted = status === 202;\n  this.noContent = status === 204;\n  this.badRequest = status === 400;\n  this.unauthorized = status === 401;\n  this.notAcceptable = status === 406;\n  this.forbidden = status === 403;\n  this.notFound = status === 404;\n  this.unprocessableEntity = status === 422;\n};\n"]},"metadata":{},"sourceType":"script"}