{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Layer\n */\n\n\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {function(import(\"../PluggableMap.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:source'|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} SourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {import(\"../source/State.js\").default} sourceState SourceState.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is be added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * Please note that for performance reasons several layers might get rendered to\n * the same HTML element, which will cause {@link import(\"../PluggableMap.js\").default#forEachLayerAtPixel map.forEachLayerAtPixel()} to\n * give false positives. To avoid this, apply different `className` properties to the\n * layers at creation time.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} SourceType\n * @api\n */\n\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n\n\n  function Layer(options) {\n    var _this = this;\n\n    var baseOptions = assign({}, options);\n    delete baseOptions.source;\n    _this = _super.call(this, baseOptions) || this;\n    /***\n     * @type {LayerOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n\n    _this.on;\n    /***\n     * @type {LayerOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n\n    _this.once;\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    _this.mapPrecomposeKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    _this.mapRenderKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    _this.sourceChangeKey_ = null;\n    /**\n     * @private\n     * @type {import(\"../renderer/Layer.js\").default}\n     */\n\n    _this.renderer_ = null; // Overwrite default render method with a custom one\n\n    if (options.render) {\n      _this.render = options.render;\n    }\n\n    if (options.map) {\n      _this.setMap(options.map);\n    }\n\n    _this.addChangeListener(LayerProperty.SOURCE, _this.handleSourcePropertyChange_);\n\n    var source = options.source ? options.source : null;\n\n    _this.setSource(source);\n\n    return _this;\n  }\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n\n\n  Layer.prototype.getLayersArray = function (opt_array) {\n    var array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  };\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n\n\n  Layer.prototype.getLayerStatesArray = function (opt_states) {\n    var states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  };\n  /**\n   * Get the layer source.\n   * @return {SourceType} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n\n\n  Layer.prototype.getSource = function () {\n    return (\n      /** @type {SourceType} */\n      this.get(LayerProperty.SOURCE) || null\n    );\n  };\n  /**\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n\n\n  Layer.prototype.getSourceState = function () {\n    var source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  };\n  /**\n   * @private\n   */\n\n\n  Layer.prototype.handleSourceChange_ = function () {\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  Layer.prototype.handleSourcePropertyChange_ = function () {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n\n    var source = this.getSource();\n\n    if (source) {\n      this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n    }\n\n    this.changed();\n  };\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n   * an array of features.\n   */\n\n\n  Layer.prototype.getFeatures = function (pixel) {\n    if (!this.renderer_) {\n      return new Promise(function (resolve) {\n        return resolve([]);\n      });\n    }\n\n    return this.renderer_.getFeatures(pixel);\n  };\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n\n\n  Layer.prototype.render = function (frameState, target) {\n    var layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  };\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map~Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n\n\n  Layer.prototype.setMap = function (map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n\n    if (!map) {\n      this.changed();\n    }\n\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n        var renderEvent = evt;\n        var layerStatesArray = renderEvent.frameState.layerStatesArray;\n        var layerState = this.getLayerState(false); // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n\n        assert(!layerStatesArray.some(function (arrayLayerState) {\n          return arrayLayerState.layer === layerState.layer;\n        }), 67);\n        layerStatesArray.push(layerState);\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  };\n  /**\n   * Set the layer source.\n   * @param {SourceType} source The layer source.\n   * @observable\n   * @api\n   */\n\n\n  Layer.prototype.setSource = function (source) {\n    this.set(LayerProperty.SOURCE, source);\n  };\n  /**\n   * Get the renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} The layer renderer.\n   */\n\n\n  Layer.prototype.getRenderer = function () {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n\n    return this.renderer_;\n  };\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n\n\n  Layer.prototype.hasRenderer = function () {\n    return !!this.renderer_;\n  };\n  /**\n   * Create a renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} A layer renderer.\n   * @protected\n   */\n\n\n  Layer.prototype.createRenderer = function () {\n    return null;\n  };\n  /**\n   * Clean up.\n   */\n\n\n  Layer.prototype.disposeInternal = function () {\n    this.setSource(null);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return Layer;\n}(BaseLayer);\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\n\n\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n\n  var resolution = viewState.resolution;\n\n  if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {\n    return false;\n  }\n\n  var zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;","map":{"version":3,"sources":["../src/layer/Layer.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {function(import(\"../PluggableMap.js\").FrameState):HTMLElement} RenderFunction\n */\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:source'|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n/**\n * @template {import(\"../source/Source.js\").default} SourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {import(\"../source/State.js\").default} sourceState SourceState.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is be added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * Please note that for performance reasons several layers might get rendered to\n * the same HTML element, which will cause {@link import(\"../PluggableMap.js\").default#forEachLayerAtPixel map.forEachLayerAtPixel()} to\n * give false positives. To avoid this, apply different `className` properties to the\n * layers at creation time.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} SourceType\n * @api\n */\nvar Layer = /** @class */ (function (_super) {\n    __extends(Layer, _super);\n    /**\n     * @param {Options<SourceType>} options Layer options.\n     */\n    function Layer(options) {\n        var _this = this;\n        var baseOptions = assign({}, options);\n        delete baseOptions.source;\n        _this = _super.call(this, baseOptions) || this;\n        /***\n         * @type {LayerOnSignature<import(\"../Observable.js\").OnReturn>}\n         */\n        _this.on;\n        /***\n         * @type {LayerOnSignature<import(\"../Observable.js\").OnReturn>}\n         */\n        _this.once;\n        /***\n         * @type {LayerOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @private\n         * @type {?import(\"../events.js\").EventsKey}\n         */\n        _this.mapPrecomposeKey_ = null;\n        /**\n         * @private\n         * @type {?import(\"../events.js\").EventsKey}\n         */\n        _this.mapRenderKey_ = null;\n        /**\n         * @private\n         * @type {?import(\"../events.js\").EventsKey}\n         */\n        _this.sourceChangeKey_ = null;\n        /**\n         * @private\n         * @type {import(\"../renderer/Layer.js\").default}\n         */\n        _this.renderer_ = null;\n        // Overwrite default render method with a custom one\n        if (options.render) {\n            _this.render = options.render;\n        }\n        if (options.map) {\n            _this.setMap(options.map);\n        }\n        _this.addChangeListener(LayerProperty.SOURCE, _this.handleSourcePropertyChange_);\n        var source = options.source\n            ? /** @type {SourceType} */ (options.source)\n            : null;\n        _this.setSource(source);\n        return _this;\n    }\n    /**\n     * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be modified in place).\n     * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n     */\n    Layer.prototype.getLayersArray = function (opt_array) {\n        var array = opt_array ? opt_array : [];\n        array.push(this);\n        return array;\n    };\n    /**\n     * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list of layer states (to be modified in place).\n     * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n     */\n    Layer.prototype.getLayerStatesArray = function (opt_states) {\n        var states = opt_states ? opt_states : [];\n        states.push(this.getLayerState());\n        return states;\n    };\n    /**\n     * Get the layer source.\n     * @return {SourceType} The layer source (or `null` if not yet set).\n     * @observable\n     * @api\n     */\n    Layer.prototype.getSource = function () {\n        return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n    };\n    /**\n     * @return {import(\"../source/State.js\").default} Source state.\n     */\n    Layer.prototype.getSourceState = function () {\n        var source = this.getSource();\n        return !source ? SourceState.UNDEFINED : source.getState();\n    };\n    /**\n     * @private\n     */\n    Layer.prototype.handleSourceChange_ = function () {\n        this.changed();\n    };\n    /**\n     * @private\n     */\n    Layer.prototype.handleSourcePropertyChange_ = function () {\n        if (this.sourceChangeKey_) {\n            unlistenByKey(this.sourceChangeKey_);\n            this.sourceChangeKey_ = null;\n        }\n        var source = this.getSource();\n        if (source) {\n            this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n        }\n        this.changed();\n    };\n    /**\n     * @param {import(\"../pixel\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n     * an array of features.\n     */\n    Layer.prototype.getFeatures = function (pixel) {\n        if (!this.renderer_) {\n            return new Promise(function (resolve) { return resolve([]); });\n        }\n        return this.renderer_.getFeatures(pixel);\n    };\n    /**\n     * In charge to manage the rendering of the layer. One layer type is\n     * bounded with one layer renderer.\n     * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target which the renderer may (but need not) use\n     * for rendering its content.\n     * @return {HTMLElement} The rendered element.\n     */\n    Layer.prototype.render = function (frameState, target) {\n        var layerRenderer = this.getRenderer();\n        if (layerRenderer.prepareFrame(frameState)) {\n            return layerRenderer.renderFrame(frameState, target);\n        }\n    };\n    /**\n     * Sets the layer to be rendered on top of other layers on a map. The map will\n     * not manage this layer in its layers collection, and the callback in\n     * {@link module:ol/Map~Map#forEachLayerAtPixel} will receive `null` as layer. This\n     * is useful for temporary layers. To remove an unmanaged layer from the map,\n     * use `#setMap(null)`.\n     *\n     * To add the layer to a map and have it managed by the map, use\n     * {@link module:ol/Map~Map#addLayer} instead.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @api\n     */\n    Layer.prototype.setMap = function (map) {\n        if (this.mapPrecomposeKey_) {\n            unlistenByKey(this.mapPrecomposeKey_);\n            this.mapPrecomposeKey_ = null;\n        }\n        if (!map) {\n            this.changed();\n        }\n        if (this.mapRenderKey_) {\n            unlistenByKey(this.mapRenderKey_);\n            this.mapRenderKey_ = null;\n        }\n        if (map) {\n            this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n                var renderEvent = \n                /** @type {import(\"../render/Event.js\").default} */ (evt);\n                var layerStatesArray = renderEvent.frameState.layerStatesArray;\n                var layerState = this.getLayerState(false);\n                // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n                assert(!layerStatesArray.some(function (arrayLayerState) {\n                    return arrayLayerState.layer === layerState.layer;\n                }), 67);\n                layerStatesArray.push(layerState);\n            }, this);\n            this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n            this.changed();\n        }\n    };\n    /**\n     * Set the layer source.\n     * @param {SourceType} source The layer source.\n     * @observable\n     * @api\n     */\n    Layer.prototype.setSource = function (source) {\n        this.set(LayerProperty.SOURCE, source);\n    };\n    /**\n     * Get the renderer for this layer.\n     * @return {import(\"../renderer/Layer.js\").default} The layer renderer.\n     */\n    Layer.prototype.getRenderer = function () {\n        if (!this.renderer_) {\n            this.renderer_ = this.createRenderer();\n        }\n        return this.renderer_;\n    };\n    /**\n     * @return {boolean} The layer has a renderer.\n     */\n    Layer.prototype.hasRenderer = function () {\n        return !!this.renderer_;\n    };\n    /**\n     * Create a renderer for this layer.\n     * @return {import(\"../renderer/Layer.js\").default} A layer renderer.\n     * @protected\n     */\n    Layer.prototype.createRenderer = function () {\n        return null;\n    };\n    /**\n     * Clean up.\n     */\n    Layer.prototype.disposeInternal = function () {\n        this.setSource(null);\n        _super.prototype.disposeInternal.call(this);\n    };\n    return Layer;\n}(BaseLayer));\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n    if (!layerState.visible) {\n        return false;\n    }\n    var resolution = viewState.resolution;\n    if (resolution < layerState.minResolution ||\n        resolution >= layerState.maxResolution) {\n        return false;\n    }\n    var zoom = viewState.zoom;\n    return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;\n//# sourceMappingURL=Layer.js.map"]},"metadata":{},"sourceType":"module"}