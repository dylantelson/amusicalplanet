{"ast":null,"code":"/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\n\nvar RBush = function () {\n  /**\n   * @param {number} [opt_maxEntries] Max entries.\n   */\n  function RBush(opt_maxEntries) {\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(opt_maxEntries);\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n\n    this.items_ = {};\n  }\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n\n\n  RBush.prototype.insert = function (extent, value) {\n    /** @type {Entry} */\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  };\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n\n\n  RBush.prototype.load = function (extents, values) {\n    var items = new Array(values.length);\n\n    for (var i = 0, l = values.length; i < l; i++) {\n      var extent = extents[i];\n      var value = values[i];\n      /** @type {Entry} */\n\n      var item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n\n    this.rbush_.load(items);\n  };\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n\n\n  RBush.prototype.remove = function (value) {\n    var uid = getUid(value); // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n\n    var item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  };\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n\n\n  RBush.prototype.update = function (extent, value) {\n    var item = this.items_[getUid(value)];\n    var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  };\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n\n\n  RBush.prototype.getAll = function () {\n    var items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n\n\n  RBush.prototype.getInExtent = function (extent) {\n    /** @type {Entry} */\n    var bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3]\n    };\n    var items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEach = function (callback) {\n    return this.forEach_(this.getAll(), callback);\n  };\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEachInExtent = function (extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  };\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEach_ = function (values, callback) {\n    var result;\n\n    for (var i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return result;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  RBush.prototype.isEmpty = function () {\n    return isEmpty(this.items_);\n  };\n  /**\n   * Remove all values from the RBush.\n   */\n\n\n  RBush.prototype.clear = function () {\n    this.rbush_.clear();\n    this.items_ = {};\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n\n\n  RBush.prototype.getExtent = function (opt_extent) {\n    var data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n  };\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n\n\n  RBush.prototype.concat = function (rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n\n    for (var i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  };\n\n  return RBush;\n}();\n\nexport default RBush;","map":{"version":3,"sources":["../src/structs/RBush.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nvar RBush = /** @class */ (function () {\n    /**\n     * @param {number} [opt_maxEntries] Max entries.\n     */\n    function RBush(opt_maxEntries) {\n        /**\n         * @private\n         */\n        this.rbush_ = new RBush_(opt_maxEntries);\n        /**\n         * A mapping between the objects added to this rbush wrapper\n         * and the objects that are actually added to the internal rbush.\n         * @private\n         * @type {Object<string, Entry>}\n         */\n        this.items_ = {};\n    }\n    /**\n     * Insert a value into the RBush.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {T} value Value.\n     */\n    RBush.prototype.insert = function (extent, value) {\n        /** @type {Entry} */\n        var item = {\n            minX: extent[0],\n            minY: extent[1],\n            maxX: extent[2],\n            maxY: extent[3],\n            value: value,\n        };\n        this.rbush_.insert(item);\n        this.items_[getUid(value)] = item;\n    };\n    /**\n     * Bulk-insert values into the RBush.\n     * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n     * @param {Array<T>} values Values.\n     */\n    RBush.prototype.load = function (extents, values) {\n        var items = new Array(values.length);\n        for (var i = 0, l = values.length; i < l; i++) {\n            var extent = extents[i];\n            var value = values[i];\n            /** @type {Entry} */\n            var item = {\n                minX: extent[0],\n                minY: extent[1],\n                maxX: extent[2],\n                maxY: extent[3],\n                value: value,\n            };\n            items[i] = item;\n            this.items_[getUid(value)] = item;\n        }\n        this.rbush_.load(items);\n    };\n    /**\n     * Remove a value from the RBush.\n     * @param {T} value Value.\n     * @return {boolean} Removed.\n     */\n    RBush.prototype.remove = function (value) {\n        var uid = getUid(value);\n        // get the object in which the value was wrapped when adding to the\n        // internal rbush. then use that object to do the removal.\n        var item = this.items_[uid];\n        delete this.items_[uid];\n        return this.rbush_.remove(item) !== null;\n    };\n    /**\n     * Update the extent of a value in the RBush.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {T} value Value.\n     */\n    RBush.prototype.update = function (extent, value) {\n        var item = this.items_[getUid(value)];\n        var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n        if (!equals(bbox, extent)) {\n            this.remove(value);\n            this.insert(extent, value);\n        }\n    };\n    /**\n     * Return all values in the RBush.\n     * @return {Array<T>} All.\n     */\n    RBush.prototype.getAll = function () {\n        var items = this.rbush_.all();\n        return items.map(function (item) {\n            return item.value;\n        });\n    };\n    /**\n     * Return all values in the given extent.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {Array<T>} All in extent.\n     */\n    RBush.prototype.getInExtent = function (extent) {\n        /** @type {Entry} */\n        var bbox = {\n            minX: extent[0],\n            minY: extent[1],\n            maxX: extent[2],\n            maxY: extent[3],\n        };\n        var items = this.rbush_.search(bbox);\n        return items.map(function (item) {\n            return item.value;\n        });\n    };\n    /**\n     * Calls a callback function with each value in the tree.\n     * If the callback returns a truthy value, this value is returned without\n     * checking the rest of the tree.\n     * @param {function(T): *} callback Callback.\n     * @return {*} Callback return value.\n     */\n    RBush.prototype.forEach = function (callback) {\n        return this.forEach_(this.getAll(), callback);\n    };\n    /**\n     * Calls a callback function with each value in the provided extent.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {function(T): *} callback Callback.\n     * @return {*} Callback return value.\n     */\n    RBush.prototype.forEachInExtent = function (extent, callback) {\n        return this.forEach_(this.getInExtent(extent), callback);\n    };\n    /**\n     * @param {Array<T>} values Values.\n     * @param {function(T): *} callback Callback.\n     * @private\n     * @return {*} Callback return value.\n     */\n    RBush.prototype.forEach_ = function (values, callback) {\n        var result;\n        for (var i = 0, l = values.length; i < l; i++) {\n            result = callback(values[i]);\n            if (result) {\n                return result;\n            }\n        }\n        return result;\n    };\n    /**\n     * @return {boolean} Is empty.\n     */\n    RBush.prototype.isEmpty = function () {\n        return isEmpty(this.items_);\n    };\n    /**\n     * Remove all values from the RBush.\n     */\n    RBush.prototype.clear = function () {\n        this.rbush_.clear();\n        this.items_ = {};\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     */\n    RBush.prototype.getExtent = function (opt_extent) {\n        var data = this.rbush_.toJSON();\n        return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n    };\n    /**\n     * @param {RBush} rbush R-Tree.\n     */\n    RBush.prototype.concat = function (rbush) {\n        this.rbush_.load(rbush.rbush_.all());\n        for (var i in rbush.items_) {\n            this.items_[i] = rbush.items_[i];\n        }\n    };\n    return RBush;\n}());\nexport default RBush;\n//# sourceMappingURL=RBush.js.map"]},"metadata":{},"sourceType":"module"}