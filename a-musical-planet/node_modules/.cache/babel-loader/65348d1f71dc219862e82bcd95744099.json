{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/Map.js\";\nimport React from \"react\";\nimport \"ol/ol.css\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport MyMap from \"ol/Map\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport View from \"ol/View\";\nimport { Fill, Stroke, Style, Text } from \"ol/style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Map = () => {\n  const style = new Style({\n    fill: new Fill({\n      color: \"rgba(255, 255, 255, 0.6)\"\n    }),\n    stroke: new Stroke({\n      color: \"#319FD3\",\n      width: 1\n    }),\n    text: new Text({\n      font: \"12px Calibri,sans-serif\",\n      fill: new Fill({\n        color: \"#000\"\n      }),\n      stroke: new Stroke({\n        color: \"#fff\",\n        width: 3\n      })\n    })\n  });\n  const vectorLayer = new VectorLayer({\n    source: new VectorSource({\n      url: \"data/geojson/countries.geojson\",\n      format: new GeoJSON()\n    }),\n    style: function (feature) {\n      style.getText().setText(feature.get(\"name\"));\n      return style;\n    }\n  });\n  const map = new MyMap({\n    layers: [vectorLayer],\n    target: \"map\",\n    view: new View({\n      center: [0, 0],\n      zoom: 1\n    })\n  });\n  const highlightStyle = new Style({\n    stroke: new Stroke({\n      color: \"#f00\",\n      width: 1\n    }),\n    fill: new Fill({\n      color: \"rgba(255,0,0,0.1)\"\n    }),\n    text: new Text({\n      font: \"12px Calibri,sans-serif\",\n      fill: new Fill({\n        color: \"#000\"\n      }),\n      stroke: new Stroke({\n        color: \"#f00\",\n        width: 3\n      })\n    })\n  });\n  const featureOverlay = new VectorLayer({\n    source: new VectorSource(),\n    map: map,\n    style: function (feature) {\n      highlightStyle.getText().setText(feature.get(\"name\"));\n      return highlightStyle;\n    }\n  });\n  let highlight;\n\n  const displayFeatureInfo = function (pixel) {\n    vectorLayer.getFeatures(pixel).then(function (features) {\n      const feature = features.length ? features[0] : undefined;\n      const info = document.getElementById(\"info\");\n\n      if (features.length) {\n        info.innerHTML = feature.getId() + \": \" + feature.get(\"name\");\n      } else {\n        info.innerHTML = \"&nbsp;\";\n      }\n\n      if (feature !== highlight) {\n        if (highlight) {\n          featureOverlay.getSource().removeFeature(highlight);\n        }\n\n        if (feature) {\n          featureOverlay.getSource().addFeature(feature);\n        }\n\n        highlight = feature;\n      }\n    });\n  };\n\n  map.on(\"pointermove\", function (evt) {\n    if (evt.dragging) {\n      return;\n    }\n\n    const pixel = map.getEventPixel(evt.originalEvent);\n    displayFeatureInfo(pixel);\n  });\n  map.on(\"click\", function (evt) {\n    displayFeatureInfo(evt.pixel);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      class: \"map\",\n      children: map\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/Map.js"],"names":["React","GeoJSON","MyMap","VectorLayer","VectorSource","View","Fill","Stroke","Style","Text","Map","style","fill","color","stroke","width","text","font","vectorLayer","source","url","format","feature","getText","setText","get","map","layers","target","view","center","zoom","highlightStyle","featureOverlay","highlight","displayFeatureInfo","pixel","getFeatures","then","features","length","undefined","info","document","getElementById","innerHTML","getId","getSource","removeFeature","addFeature","on","evt","dragging","getEventPixel","originalEvent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,KAAP,MAAkB,QAAlB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,IAA9B,QAA0C,UAA1C;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAMC,KAAK,GAAG,IAAIH,KAAJ,CAAU;AACtBI,IAAAA,IAAI,EAAE,IAAIN,IAAJ,CAAS;AACbO,MAAAA,KAAK,EAAE;AADM,KAAT,CADgB;AAItBC,IAAAA,MAAM,EAAE,IAAIP,MAAJ,CAAW;AACjBM,MAAAA,KAAK,EAAE,SADU;AAEjBE,MAAAA,KAAK,EAAE;AAFU,KAAX,CAJc;AAQtBC,IAAAA,IAAI,EAAE,IAAIP,IAAJ,CAAS;AACbQ,MAAAA,IAAI,EAAE,yBADO;AAEbL,MAAAA,IAAI,EAAE,IAAIN,IAAJ,CAAS;AACbO,QAAAA,KAAK,EAAE;AADM,OAAT,CAFO;AAKbC,MAAAA,MAAM,EAAE,IAAIP,MAAJ,CAAW;AACjBM,QAAAA,KAAK,EAAE,MADU;AAEjBE,QAAAA,KAAK,EAAE;AAFU,OAAX;AALK,KAAT;AARgB,GAAV,CAAd;AAoBA,QAAMG,WAAW,GAAG,IAAIf,WAAJ,CAAgB;AAClCgB,IAAAA,MAAM,EAAE,IAAIf,YAAJ,CAAiB;AACvBgB,MAAAA,GAAG,EAAE,gCADkB;AAEvBC,MAAAA,MAAM,EAAE,IAAIpB,OAAJ;AAFe,KAAjB,CAD0B;AAKlCU,IAAAA,KAAK,EAAE,UAAUW,OAAV,EAAmB;AACxBX,MAAAA,KAAK,CAACY,OAAN,GAAgBC,OAAhB,CAAwBF,OAAO,CAACG,GAAR,CAAY,MAAZ,CAAxB;AACA,aAAOd,KAAP;AACD;AARiC,GAAhB,CAApB;AAWA,QAAMe,GAAG,GAAG,IAAIxB,KAAJ,CAAU;AACpByB,IAAAA,MAAM,EAAE,CAACT,WAAD,CADY;AAEpBU,IAAAA,MAAM,EAAE,KAFY;AAGpBC,IAAAA,IAAI,EAAE,IAAIxB,IAAJ,CAAS;AACbyB,MAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CADK;AAEbC,MAAAA,IAAI,EAAE;AAFO,KAAT;AAHc,GAAV,CAAZ;AASA,QAAMC,cAAc,GAAG,IAAIxB,KAAJ,CAAU;AAC/BM,IAAAA,MAAM,EAAE,IAAIP,MAAJ,CAAW;AACjBM,MAAAA,KAAK,EAAE,MADU;AAEjBE,MAAAA,KAAK,EAAE;AAFU,KAAX,CADuB;AAK/BH,IAAAA,IAAI,EAAE,IAAIN,IAAJ,CAAS;AACbO,MAAAA,KAAK,EAAE;AADM,KAAT,CALyB;AAQ/BG,IAAAA,IAAI,EAAE,IAAIP,IAAJ,CAAS;AACbQ,MAAAA,IAAI,EAAE,yBADO;AAEbL,MAAAA,IAAI,EAAE,IAAIN,IAAJ,CAAS;AACbO,QAAAA,KAAK,EAAE;AADM,OAAT,CAFO;AAKbC,MAAAA,MAAM,EAAE,IAAIP,MAAJ,CAAW;AACjBM,QAAAA,KAAK,EAAE,MADU;AAEjBE,QAAAA,KAAK,EAAE;AAFU,OAAX;AALK,KAAT;AARyB,GAAV,CAAvB;AAoBA,QAAMkB,cAAc,GAAG,IAAI9B,WAAJ,CAAgB;AACrCgB,IAAAA,MAAM,EAAE,IAAIf,YAAJ,EAD6B;AAErCsB,IAAAA,GAAG,EAAEA,GAFgC;AAGrCf,IAAAA,KAAK,EAAE,UAAUW,OAAV,EAAmB;AACxBU,MAAAA,cAAc,CAACT,OAAf,GAAyBC,OAAzB,CAAiCF,OAAO,CAACG,GAAR,CAAY,MAAZ,CAAjC;AACA,aAAOO,cAAP;AACD;AANoC,GAAhB,CAAvB;AASA,MAAIE,SAAJ;;AACA,QAAMC,kBAAkB,GAAG,UAAUC,KAAV,EAAiB;AAC1ClB,IAAAA,WAAW,CAACmB,WAAZ,CAAwBD,KAAxB,EAA+BE,IAA/B,CAAoC,UAAUC,QAAV,EAAoB;AACtD,YAAMjB,OAAO,GAAGiB,QAAQ,CAACC,MAAT,GAAkBD,QAAQ,CAAC,CAAD,CAA1B,GAAgCE,SAAhD;AACA,YAAMC,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAb;;AACA,UAAIL,QAAQ,CAACC,MAAb,EAAqB;AACnBE,QAAAA,IAAI,CAACG,SAAL,GAAiBvB,OAAO,CAACwB,KAAR,KAAkB,IAAlB,GAAyBxB,OAAO,CAACG,GAAR,CAAY,MAAZ,CAA1C;AACD,OAFD,MAEO;AACLiB,QAAAA,IAAI,CAACG,SAAL,GAAiB,QAAjB;AACD;;AAED,UAAIvB,OAAO,KAAKY,SAAhB,EAA2B;AACzB,YAAIA,SAAJ,EAAe;AACbD,UAAAA,cAAc,CAACc,SAAf,GAA2BC,aAA3B,CAAyCd,SAAzC;AACD;;AACD,YAAIZ,OAAJ,EAAa;AACXW,UAAAA,cAAc,CAACc,SAAf,GAA2BE,UAA3B,CAAsC3B,OAAtC;AACD;;AACDY,QAAAA,SAAS,GAAGZ,OAAZ;AACD;AACF,KAlBD;AAmBD,GApBD;;AAsBAI,EAAAA,GAAG,CAACwB,EAAJ,CAAO,aAAP,EAAsB,UAAUC,GAAV,EAAe;AACnC,QAAIA,GAAG,CAACC,QAAR,EAAkB;AAChB;AACD;;AACD,UAAMhB,KAAK,GAAGV,GAAG,CAAC2B,aAAJ,CAAkBF,GAAG,CAACG,aAAtB,CAAd;AACAnB,IAAAA,kBAAkB,CAACC,KAAD,CAAlB;AACD,GAND;AAQAV,EAAAA,GAAG,CAACwB,EAAJ,CAAO,OAAP,EAAgB,UAAUC,GAAV,EAAe;AAC7BhB,IAAAA,kBAAkB,CAACgB,GAAG,CAACf,KAAL,CAAlB;AACD,GAFD;AAGA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,EAAE,EAAC,KAAR;AAAc,MAAA,KAAK,EAAC,KAApB;AAAA,gBACGV;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAQD,CAhHD;;KAAMhB,G;AAkHN,eAAeA,GAAf","sourcesContent":["import React from \"react\";\nimport \"ol/ol.css\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport MyMap from \"ol/Map\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport View from \"ol/View\";\nimport { Fill, Stroke, Style, Text } from \"ol/style\";\n\nconst Map = () => {\n  const style = new Style({\n    fill: new Fill({\n      color: \"rgba(255, 255, 255, 0.6)\",\n    }),\n    stroke: new Stroke({\n      color: \"#319FD3\",\n      width: 1,\n    }),\n    text: new Text({\n      font: \"12px Calibri,sans-serif\",\n      fill: new Fill({\n        color: \"#000\",\n      }),\n      stroke: new Stroke({\n        color: \"#fff\",\n        width: 3,\n      }),\n    }),\n  });\n\n  const vectorLayer = new VectorLayer({\n    source: new VectorSource({\n      url: \"data/geojson/countries.geojson\",\n      format: new GeoJSON(),\n    }),\n    style: function (feature) {\n      style.getText().setText(feature.get(\"name\"));\n      return style;\n    },\n  });\n\n  const map = new MyMap({\n    layers: [vectorLayer],\n    target: \"map\",\n    view: new View({\n      center: [0, 0],\n      zoom: 1,\n    }),\n  });\n\n  const highlightStyle = new Style({\n    stroke: new Stroke({\n      color: \"#f00\",\n      width: 1,\n    }),\n    fill: new Fill({\n      color: \"rgba(255,0,0,0.1)\",\n    }),\n    text: new Text({\n      font: \"12px Calibri,sans-serif\",\n      fill: new Fill({\n        color: \"#000\",\n      }),\n      stroke: new Stroke({\n        color: \"#f00\",\n        width: 3,\n      }),\n    }),\n  });\n\n  const featureOverlay = new VectorLayer({\n    source: new VectorSource(),\n    map: map,\n    style: function (feature) {\n      highlightStyle.getText().setText(feature.get(\"name\"));\n      return highlightStyle;\n    },\n  });\n\n  let highlight;\n  const displayFeatureInfo = function (pixel) {\n    vectorLayer.getFeatures(pixel).then(function (features) {\n      const feature = features.length ? features[0] : undefined;\n      const info = document.getElementById(\"info\");\n      if (features.length) {\n        info.innerHTML = feature.getId() + \": \" + feature.get(\"name\");\n      } else {\n        info.innerHTML = \"&nbsp;\";\n      }\n\n      if (feature !== highlight) {\n        if (highlight) {\n          featureOverlay.getSource().removeFeature(highlight);\n        }\n        if (feature) {\n          featureOverlay.getSource().addFeature(feature);\n        }\n        highlight = feature;\n      }\n    });\n  };\n\n  map.on(\"pointermove\", function (evt) {\n    if (evt.dragging) {\n      return;\n    }\n    const pixel = map.getEventPixel(evt.originalEvent);\n    displayFeatureInfo(pixel);\n  });\n\n  map.on(\"click\", function (evt) {\n    displayFeatureInfo(evt.pixel);\n  });\n  return (\n    <>\n      <h2>My Map</h2>\n      <div id=\"map\" class=\"map\">\n        {map}\n      </div>\n    </>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}