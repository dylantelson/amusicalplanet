{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState, useEffect } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\nimport Playlists from \"./Playlists\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst worldCountries = require(\"./WorldInfo.json\"); // const europeCountries = require(\"./EuropeInfo.json\");\n\n\nconst worldGeoSVG = require(\"./WorldSVG50m.json\");\n\nconst colors = require(\"./colors.json\"); // const europeGeoSVG = require(\"./EuropeInfo.json\");\n// const locationInfo = {\n//   world: worldCountries,\n//   // europe: europeCountries,\n// };\n// const locationGeoSVG = {\n//   world: worldGeoSVG,\n// };\n\n\nconst borderWidth = 0.2;\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n  var r = (num >> 16) + amt;\n  if (r > 255) r = 255;else if (r < 0) r = 0;\n  var b = (num >> 8 & 0x00ff) + amt;\n  if (b > 255) b = 255;else if (b < 0) b = 0;\n  var g = (num & 0x0000ff) + amt;\n  if (g > 255) g = 255;else if (g < 0) g = 0;\n  return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n}\n\n_c = LightenDarkenColor;\n\nconst camelize = word => {\n  return word[0].toLowerCase() + word.slice(1).replace(\" \", \"\");\n};\n\nconst checkDifficulty = (mapDifficulty, countryDifficulty) => {\n  if (mapDifficulty === \"Easy\") return countryDifficulty === \"Easy\";\n  if (mapDifficulty === \"Medium\") return countryDifficulty === \"Easy\" || countryDifficulty === \"Medium\"; //for some reason this necessary, otherwise it returns true even if mapDifficulty is Easy\n\n  if (mapDifficulty === \"Hard\") return true;\n  return false;\n};\n\nlet countriesToShow = [];\nlet currSelectedCountry = null;\n\nconst MapChart = ({\n  handleNewChosen,\n  mapProps,\n  currMap\n}) => {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    countriesToShow = [];\n    let currSelectedCountry = null;\n\n    if (currMap.slice(0, 5) === \"world\") {\n      for (const playlist of Playlists.world) {\n        if (checkDifficulty(currMap.slice(5), playlist.difficulty)) countriesToShow.push(camelize(playlist.country));\n      }\n    } else {\n      for (const playlist of Playlists[currMap]) {\n        countriesToShow.push(camelize(playlist.country));\n      }\n    }\n\n    var waitForMapLoad = setInterval(function () {\n      if (document.querySelectorAll(\".rsm-geography\").length !== 0) {\n        clearInterval(waitForMapLoad);\n        setLoading(false);\n      }\n    }, 500);\n  }, [currMap]);\n\n  if (!loading) {\n    const countries = document.querySelectorAll(\".rsm-geography\");\n\n    for (const country of countries) {\n      country.setAttribute(\"style\", countriesToShow.indexOf(country.id) >= 0 ? `fill: ${colors[country.getAttribute(\"continent\")]}; pointer-events: all; stroke: #000000; stroke-width: ${borderWidth}; outline: none; visibility: visible;` : `fill: #ccc; pointer-events: none; stroke: #000000; stroke-width: ${borderWidth}; outline: none; visibility: visible`);\n    }\n  } // style={{\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replace(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : countriesToShow.indexOf(geo.properties.NAME) >= 0\n  //                         ? {\n  //                             fill: colors[geo.properties.CONTINENT],\n  //                             pointerEvents: \"all\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           }\n  //                         : {\n  //                             fill: \"#ccc\",\n  //                             pointerEvents: \"none\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           },\n  //                     hover:\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replace(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : hoveredStyle(colors[geo.properties.CONTINENT]),\n  //                   }}\n\n\n  const setPressedStyle = (country, event) => {\n    if (currSelectedCountry) {\n      //if user clicked on already selected country, return\n      if (event.target.classList.contains(\"pressed\")) return;\n      const prevCountry = document.querySelector(`#${currSelectedCountry.element.id}`);\n      prevCountry.style.fill = colors[currSelectedCountry.props.CONTINENT];\n      prevCountry.classList.toggle(\"pressed\");\n    }\n\n    currSelectedCountry = {\n      element: event.target,\n      props: country\n    };\n    event.target.style.fill = selectedStyle(colors[country.CONTINENT]).fill;\n    event.target.classList.toggle(\"pressed\");\n  }; // const clearPressedStyle = () => {\n  //   if (currSelectedCountry) {\n  //     document.querySelector(`#${currSelectedCountry.element.id}`).style.fill =\n  //       colors[currSelectedCountry.props.CONTINENT];\n  //     currSelectedCountry = null;\n  //   }\n  // };\n  // const renderStyle = (country) => {\n  //   if (!country.area || country.area < 1500) return [{ fontSize: \"0px\" }, 0];\n  //   let adjustedFont =\n  //     country.area > 500000\n  //       ? country.area / 800000 + 4.5\n  //       : country.area / 800000 + 2.3;\n  //   if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n  //   if (country.name.common === \"Russia\" && currMap === \"europe\")\n  //     adjustedFont /= 2.5;\n  //   //const rightOffset = adjustedFont;\n  //   return [\n  //     {\n  //       fontSize: `${adjustedFont}px`,\n  //       // stroke: \"#FFF\",\n  //       // stroke: colors[country.CONTINENT],\n  //       // strokeWidth: `${adjustedFont / 50}px`,\n  //     },\n  //     adjustedFont - 1,\n  //   ];\n  // };\n\n\n  const renderStyle = area => {\n    if (area > 5000000) return {\n      fontSize: \"20px\"\n    };\n    if (area > 2500000) return {\n      fontSize: \"12px\"\n    };\n    if (area > 1000000) return {\n      fontSize: \"9px\"\n    };\n    if (area > 500000) return {\n      fontSize: \"7px\"\n    };\n    if (area > 300000) return {\n      fontSize: \"5px\"\n    };\n    if (area > 200000) return {\n      fontSize: \"4px\"\n    };\n    if (area > 100000) return {\n      fontSize: \"3px\"\n    };\n    if (area > 50000) return {\n      fontSize: \"2px\"\n    };\n    return {\n      fontSize: \"1px\"\n    };\n  };\n\n  const hoveredStyle = color => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\"\n    };\n  };\n\n  const selectedStyle = color => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\"\n    };\n  }; // const [currPos, setCurrPos] = useState({\n  //   zoom: mapProps.minZoom,\n  //   coordinates: mapProps.coordinates,\n  // });\n\n\n  const projection = geoMercator().scale(mapProps.scale).center(mapProps.center).rotate(mapProps.rotate); //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [currLocation]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      class: \"mapLoading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(ComposableMap, {\n      \"data-tip\": \"\",\n      projection: projection,\n      style: {\n        width: \"100%\",\n        height: \"auto\",\n        outline: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        translateExtent: mapProps.translateExtent,\n        minZoom: mapProps.minZoom,\n        maxZoom: mapProps.maxZoom,\n        zoom: mapProps.minZoom,\n        center: mapProps.coordinates,\n        children: [/*#__PURE__*/_jsxDEV(Geographies, {\n          geography: worldGeoSVG,\n          children: ({\n            geographies\n          }) => geographies.map(geo => {\n            return /*#__PURE__*/_jsxDEV(Geography, {\n              id: camelize(geo.properties.NAME),\n              continent: geo.properties.CONTINENT,\n              geography: geo,\n              onClick: event => {\n                setPressedStyle(geo.properties, event);\n                handleNewChosen(geo.properties.NAME);\n              },\n              onMouseEnter: event => {\n                if (!currSelectedCountry || currSelectedCountry.element.id !== event.target.id) {\n                  event.target.style.fill = hoveredStyle(colors[event.target.getAttribute(\"continent\")]).fill;\n                }\n              },\n              onMouseLeave: event => {\n                if (currSelectedCountry && currSelectedCountry.element.id === event.target.id && currSelectedCountry.element.classList.contains(\"pressed\")) {\n                  event.target.style.fill = selectedStyle(colors[event.target.getAttribute(\"continent\")]).fill;\n                } else {\n                  event.target.style.fill = colors[event.target.getAttribute(\"continent\")];\n                }\n              },\n              visibility: \"hidden\"\n            }, geo.rsmKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), worldCountries.map(country => {\n          if (loading || countriesToShow.indexOf(camelize(country.name.common)) < 0) return null; // const currStyle = renderStyle(country);\n\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            coordinates: country.name.common === \"Russia\" && currMap === \"europe\" ? [country.latlng[1] - 60, country.latlng[0] - 6] : [country.latlng[1], country.latlng[0]],\n            fill: \"#000\",\n            children: /*#__PURE__*/_jsxDEV(\"text\", {\n              textAnchor: \"middle\",\n              pointerEvents: \"none\",\n              style: renderStyle(country.area),\n              children: country.name.common\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 17\n            }, this)\n          }, country.name.common, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MapChart, \"J7PPXooW06IQ11rfabbvgk72KFw=\");\n\n_c2 = MapChart;\nexport default _c3 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LightenDarkenColor\");\n$RefreshReg$(_c2, \"MapChart\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js"],"names":["React","memo","useState","useEffect","ZoomableGroup","ComposableMap","Geographies","Geography","Marker","geoMercator","Playlists","worldCountries","require","worldGeoSVG","colors","borderWidth","LightenDarkenColor","col","amt","usePound","slice","num","parseInt","r","b","g","toString","camelize","word","toLowerCase","replace","checkDifficulty","mapDifficulty","countryDifficulty","countriesToShow","currSelectedCountry","MapChart","handleNewChosen","mapProps","currMap","loading","setLoading","playlist","world","difficulty","push","country","waitForMapLoad","setInterval","document","querySelectorAll","length","clearInterval","countries","setAttribute","indexOf","id","getAttribute","setPressedStyle","event","target","classList","contains","prevCountry","querySelector","element","style","fill","props","CONTINENT","toggle","selectedStyle","renderStyle","area","fontSize","hoveredStyle","color","stroke","strokeWidth","outline","projection","scale","center","rotate","width","height","translateExtent","minZoom","maxZoom","coordinates","geographies","map","geo","properties","NAME","rsmKey","name","common","latlng"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\n\nimport Playlists from \"./Playlists\";\nimport \"./Map.css\";\n\nconst worldCountries = require(\"./WorldInfo.json\");\n// const europeCountries = require(\"./EuropeInfo.json\");\n\nconst worldGeoSVG = require(\"./WorldSVG50m.json\");\nconst colors = require(\"./colors.json\");\n// const europeGeoSVG = require(\"./EuropeInfo.json\");\n\n// const locationInfo = {\n//   world: worldCountries,\n//   // europe: europeCountries,\n// };\n\n// const locationGeoSVG = {\n//   world: worldGeoSVG,\n// };\n\nconst borderWidth = 0.2;\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nconst camelize = (word) => {\n  return word[0].toLowerCase() + word.slice(1).replace(\" \", \"\");\n};\n\nconst checkDifficulty = (mapDifficulty, countryDifficulty) => {\n  if (mapDifficulty === \"Easy\") return countryDifficulty === \"Easy\";\n  if (mapDifficulty === \"Medium\")\n    return countryDifficulty === \"Easy\" || countryDifficulty === \"Medium\";\n  //for some reason this necessary, otherwise it returns true even if mapDifficulty is Easy\n  if (mapDifficulty === \"Hard\") return true;\n  return false;\n};\n\nlet countriesToShow = [];\nlet currSelectedCountry = null;\nconst MapChart = ({ handleNewChosen, mapProps, currMap }) => {\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    countriesToShow = [];\n    let currSelectedCountry = null;\n    if (currMap.slice(0, 5) === \"world\") {\n      for (const playlist of Playlists.world) {\n        if (checkDifficulty(currMap.slice(5), playlist.difficulty))\n          countriesToShow.push(camelize(playlist.country));\n      }\n    } else {\n      for (const playlist of Playlists[currMap]) {\n        countriesToShow.push(camelize(playlist.country));\n      }\n    }\n    var waitForMapLoad = setInterval(function () {\n      if (document.querySelectorAll(\".rsm-geography\").length !== 0) {\n        clearInterval(waitForMapLoad);\n        setLoading(false);\n      }\n    }, 500);\n  }, [currMap]);\n\n  if (!loading) {\n    const countries = document.querySelectorAll(\".rsm-geography\");\n    for (const country of countries) {\n      country.setAttribute(\n        \"style\",\n        countriesToShow.indexOf(country.id) >= 0\n          ? `fill: ${\n              colors[country.getAttribute(\"continent\")]\n            }; pointer-events: all; stroke: #000000; stroke-width: ${borderWidth}; outline: none; visibility: visible;`\n          : `fill: #ccc; pointer-events: none; stroke: #000000; stroke-width: ${borderWidth}; outline: none; visibility: visible`\n      );\n    }\n  }\n\n  // style={{\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replace(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : countriesToShow.indexOf(geo.properties.NAME) >= 0\n  //                         ? {\n  //                             fill: colors[geo.properties.CONTINENT],\n  //                             pointerEvents: \"all\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           }\n  //                         : {\n  //                             fill: \"#ccc\",\n  //                             pointerEvents: \"none\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           },\n  //                     hover:\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replace(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : hoveredStyle(colors[geo.properties.CONTINENT]),\n  //                   }}\n\n  const setPressedStyle = (country, event) => {\n    if (currSelectedCountry) {\n      //if user clicked on already selected country, return\n      if (event.target.classList.contains(\"pressed\")) return;\n      const prevCountry = document.querySelector(\n        `#${currSelectedCountry.element.id}`\n      );\n      prevCountry.style.fill = colors[currSelectedCountry.props.CONTINENT];\n      prevCountry.classList.toggle(\"pressed\");\n    }\n    currSelectedCountry = { element: event.target, props: country };\n    event.target.style.fill = selectedStyle(colors[country.CONTINENT]).fill;\n    event.target.classList.toggle(\"pressed\");\n  };\n\n  // const clearPressedStyle = () => {\n  //   if (currSelectedCountry) {\n  //     document.querySelector(`#${currSelectedCountry.element.id}`).style.fill =\n  //       colors[currSelectedCountry.props.CONTINENT];\n  //     currSelectedCountry = null;\n  //   }\n  // };\n\n  // const renderStyle = (country) => {\n  //   if (!country.area || country.area < 1500) return [{ fontSize: \"0px\" }, 0];\n  //   let adjustedFont =\n  //     country.area > 500000\n  //       ? country.area / 800000 + 4.5\n  //       : country.area / 800000 + 2.3;\n  //   if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n\n  //   if (country.name.common === \"Russia\" && currMap === \"europe\")\n  //     adjustedFont /= 2.5;\n  //   //const rightOffset = adjustedFont;\n  //   return [\n  //     {\n  //       fontSize: `${adjustedFont}px`,\n  //       // stroke: \"#FFF\",\n  //       // stroke: colors[country.CONTINENT],\n  //       // strokeWidth: `${adjustedFont / 50}px`,\n  //     },\n  //     adjustedFont - 1,\n  //   ];\n  // };\n\n  const renderStyle = (area) => {\n    if (area > 5000000) return { fontSize: \"20px\" };\n    if (area > 2500000) return { fontSize: \"12px\" };\n    if (area > 1000000) return { fontSize: \"9px\" };\n    if (area > 500000) return { fontSize: \"7px\" };\n    if (area > 300000) return { fontSize: \"5px\" };\n    if (area > 200000) return { fontSize: \"4px\" };\n    if (area > 100000) return { fontSize: \"3px\" };\n    if (area > 50000) return { fontSize: \"2px\" };\n    return { fontSize: \"1px\" };\n  };\n\n  const hoveredStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n  const selectedStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n\n  // const [currPos, setCurrPos] = useState({\n  //   zoom: mapProps.minZoom,\n  //   coordinates: mapProps.coordinates,\n  // });\n  const projection = geoMercator()\n    .scale(mapProps.scale)\n    .center(mapProps.center)\n    .rotate(mapProps.rotate);\n\n  //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [currLocation]);\n\n  return (\n    <>\n      {loading ? <h1 class=\"mapLoading\">Loading...</h1> : <></>}\n      <ComposableMap\n        data-tip=\"\"\n        projection={projection}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n          outline: \"none\",\n        }}\n      >\n        <ZoomableGroup\n          translateExtent={mapProps.translateExtent}\n          minZoom={mapProps.minZoom}\n          maxZoom={mapProps.maxZoom}\n          zoom={mapProps.minZoom}\n          center={mapProps.coordinates}\n        >\n          <Geographies geography={worldGeoSVG}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                return (\n                  <Geography\n                    id={camelize(geo.properties.NAME)}\n                    continent={geo.properties.CONTINENT}\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onClick={(event) => {\n                      setPressedStyle(geo.properties, event);\n                      handleNewChosen(geo.properties.NAME);\n                    }}\n                    onMouseEnter={(event) => {\n                      if (\n                        !currSelectedCountry ||\n                        currSelectedCountry.element.id !== event.target.id\n                      ) {\n                        event.target.style.fill = hoveredStyle(\n                          colors[event.target.getAttribute(\"continent\")]\n                        ).fill;\n                      }\n                    }}\n                    onMouseLeave={(event) => {\n                      if (\n                        currSelectedCountry &&\n                        currSelectedCountry.element.id === event.target.id &&\n                        currSelectedCountry.element.classList.contains(\n                          \"pressed\"\n                        )\n                      ) {\n                        event.target.style.fill = selectedStyle(\n                          colors[event.target.getAttribute(\"continent\")]\n                        ).fill;\n                      } else {\n                        event.target.style.fill =\n                          colors[event.target.getAttribute(\"continent\")];\n                      }\n                    }}\n                    visibility={\"hidden\"}\n                  />\n                );\n              })\n            }\n          </Geographies>\n          {worldCountries.map((country) => {\n            if (\n              loading ||\n              countriesToShow.indexOf(camelize(country.name.common)) < 0\n            )\n              return null;\n            // const currStyle = renderStyle(country);\n            return (\n              <Marker\n                key={country.name.common}\n                coordinates={\n                  country.name.common === \"Russia\" && currMap === \"europe\"\n                    ? [country.latlng[1] - 60, country.latlng[0] - 6]\n                    : [country.latlng[1], country.latlng[0]]\n                }\n                fill=\"#000\"\n              >\n                <text\n                  textAnchor=\"middle\"\n                  pointerEvents=\"none\"\n                  style={renderStyle(country.area)}\n                >\n                  {country.name.common}\n                </text>\n                {/* {currPos.zoom * 2 + currStyle[1] > 9 ? (\n                  currStyle[1] > country.name.common.length ? (\n                    <text\n                      textAnchor=\"middle\"\n                      pointerEvents=\"none\"\n                      style={currStyle[0]}\n                    >\n                      {country.name.common}\n                    </text>\n                  ) : (\n                    country.name.common.split(\" \").map((word, index) => {\n                      return (\n                        <text\n                          key={word + index}\n                          textRendering=\"optimizeSpeed\"\n                          textAnchor=\"middle\"\n                          pointerEvents=\"none\"\n                          y={(currStyle[1] / 1.3 + 1.3) * index}\n                          style={currStyle[0]}\n                        >\n                          {word}\n                        </text>\n                      );\n                    })\n                  )\n                ) : (\n                  <></>\n                )} */}\n              </Marker>\n            );\n          })}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}