{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/FullScreen\n */\n\n\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];\n/**\n * @enum {string}\n */\n\nvar FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen'\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\n\nvar FullScreen = function (_super) {\n  __extends(FullScreen, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function FullScreen(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      target: options.target\n    }) || this;\n    /***\n     * @type {FullScreenOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n\n    _this.on;\n    /***\n     * @type {FullScreenOnSignature<import(\"../Observable.js\").OnReturn>}\n     */\n\n    _this.once;\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.cssClassName_ = options.className !== undefined ? options.className : 'ol-full-screen';\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.activeClassName_ = options.activeClassName !== undefined ? options.activeClassName.split(' ') : [_this.cssClassName_ + '-true'];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.inactiveClassName_ = options.inactiveClassName !== undefined ? options.inactiveClassName.split(' ') : [_this.cssClassName_ + '-false'];\n    var label = options.label !== undefined ? options.label : '\\u2922';\n    /**\n     * @private\n     * @type {Text}\n     */\n\n    _this.labelNode_ = typeof label === 'string' ? document.createTextNode(label) : label;\n    var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n    /**\n     * @private\n     * @type {Text}\n     */\n\n    _this.labelActiveNode_ = typeof labelActive === 'string' ? document.createTextNode(labelActive) : labelActive;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    _this.button_ = document.createElement('button');\n    var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n\n    _this.setClassName_(_this.button_, isFullScreen());\n\n    _this.button_.setAttribute('type', 'button');\n\n    _this.button_.title = tipLabel;\n\n    _this.button_.appendChild(_this.labelNode_);\n\n    _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n\n    var cssClasses = _this.cssClassName_ + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + ' ' + (!isFullScreenSupported() ? CLASS_UNSUPPORTED : '');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.button_);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.keys_ = options.keys !== undefined ? options.keys : false;\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n\n    _this.source_ = options.source;\n    return _this;\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  FullScreen.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreen_ = function () {\n    if (!isFullScreenSupported()) {\n      return;\n    }\n\n    var map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    if (isFullScreen()) {\n      exitFullScreen();\n    } else {\n      var element = void 0;\n\n      if (this.source_) {\n        element = typeof this.source_ === 'string' ? document.getElementById(this.source_) : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreenChange_ = function () {\n    var map = this.getMap();\n\n    if (isFullScreen()) {\n      this.setClassName_(this.button_, true);\n      replaceNode(this.labelActiveNode_, this.labelNode_);\n      this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n    } else {\n      this.setClassName_(this.button_, false);\n      replaceNode(this.labelNode_, this.labelActiveNode_);\n      this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n    }\n\n    if (map) {\n      map.updateSize();\n    }\n  };\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n\n\n  FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n    var _a, _b, _c;\n\n    var activeClassName = this.activeClassName_;\n    var inactiveClassName = this.inactiveClassName_;\n    var nextClassName = fullscreen ? activeClassName : inactiveClassName;\n\n    (_a = element.classList).remove.apply(_a, activeClassName);\n\n    (_b = element.classList).remove.apply(_b, inactiveClassName);\n\n    (_c = element.classList).add.apply(_c, nextClassName);\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n\n\n  FullScreen.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      for (var i = 0, ii = events.length; i < ii; ++i) {\n        this.listenerKeys.push(listen(document, events[i], this.handleFullScreenChange_, this));\n      }\n    }\n  };\n\n  return FullScreen;\n}(Control);\n/**\n * @return {boolean} Fullscreen is supported by the current platform.\n */\n\n\nfunction isFullScreenSupported() {\n  var body = document.body;\n  return !!(body['webkitRequestFullscreen'] || body['msRequestFullscreen'] && document['msFullscreenEnabled'] || body.requestFullscreen && document.fullscreenEnabled);\n}\n/**\n * @return {boolean} Element is currently in fullscreen.\n */\n\n\nfunction isFullScreen() {\n  return !!(document['webkitIsFullScreen'] || document['msFullscreenElement'] || document.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['msRequestFullscreen']) {\n    element['msRequestFullscreen']();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n/**\n * Exit fullscreen.\n */\n\n\nfunction exitFullScreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document['msExitFullscreen']) {\n    document['msExitFullscreen']();\n  } else if (document['webkitExitFullscreen']) {\n    document['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;","map":{"version":3,"sources":["../src/control/FullScreen.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = [\n    'fullscreenchange',\n    'webkitfullscreenchange',\n    'MSFullscreenChange',\n];\n/**\n * @enum {string}\n */\nvar FullScreenEventType = {\n    /**\n     * Triggered after the map entered fullscreen.\n     * @event FullScreenEventType#enterfullscreen\n     * @api\n     */\n    ENTERFULLSCREEN: 'enterfullscreen',\n    /**\n     * Triggered after the map leave fullscreen.\n     * @event FullScreenEventType#leavefullscreen\n     * @api\n     */\n    LEAVEFULLSCREEN: 'leavefullscreen',\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nvar FullScreen = /** @class */ (function (_super) {\n    __extends(FullScreen, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function FullScreen(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            target: options.target,\n        }) || this;\n        /***\n         * @type {FullScreenOnSignature<import(\"../Observable.js\").OnReturn>}\n         */\n        _this.on;\n        /***\n         * @type {FullScreenOnSignature<import(\"../Observable.js\").OnReturn>}\n         */\n        _this.once;\n        /***\n         * @type {FullScreenOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.cssClassName_ =\n            options.className !== undefined ? options.className : 'ol-full-screen';\n        /**\n         * @private\n         * @type {Array<string>}\n         */\n        _this.activeClassName_ =\n            options.activeClassName !== undefined\n                ? options.activeClassName.split(' ')\n                : [_this.cssClassName_ + '-true'];\n        /**\n         * @private\n         * @type {Array<string>}\n         */\n        _this.inactiveClassName_ =\n            options.inactiveClassName !== undefined\n                ? options.inactiveClassName.split(' ')\n                : [_this.cssClassName_ + '-false'];\n        var label = options.label !== undefined ? options.label : '\\u2922';\n        /**\n         * @private\n         * @type {Text}\n         */\n        _this.labelNode_ =\n            typeof label === 'string' ? document.createTextNode(label) : label;\n        var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n        /**\n         * @private\n         * @type {Text}\n         */\n        _this.labelActiveNode_ =\n            typeof labelActive === 'string'\n                ? document.createTextNode(labelActive)\n                : labelActive;\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.button_ = document.createElement('button');\n        var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n        _this.setClassName_(_this.button_, isFullScreen());\n        _this.button_.setAttribute('type', 'button');\n        _this.button_.title = tipLabel;\n        _this.button_.appendChild(_this.labelNode_);\n        _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        var cssClasses = _this.cssClassName_ +\n            ' ' +\n            CLASS_UNSELECTABLE +\n            ' ' +\n            CLASS_CONTROL +\n            ' ' +\n            (!isFullScreenSupported() ? CLASS_UNSUPPORTED : '');\n        var element = _this.element;\n        element.className = cssClasses;\n        element.appendChild(_this.button_);\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.keys_ = options.keys !== undefined ? options.keys : false;\n        /**\n         * @private\n         * @type {HTMLElement|string|undefined}\n         */\n        _this.source_ = options.source;\n        return _this;\n    }\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    FullScreen.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleFullScreen_();\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleFullScreen_ = function () {\n        if (!isFullScreenSupported()) {\n            return;\n        }\n        var map = this.getMap();\n        if (!map) {\n            return;\n        }\n        if (isFullScreen()) {\n            exitFullScreen();\n        }\n        else {\n            var element = void 0;\n            if (this.source_) {\n                element =\n                    typeof this.source_ === 'string'\n                        ? document.getElementById(this.source_)\n                        : this.source_;\n            }\n            else {\n                element = map.getTargetElement();\n            }\n            if (this.keys_) {\n                requestFullScreenWithKeys(element);\n            }\n            else {\n                requestFullScreen(element);\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleFullScreenChange_ = function () {\n        var map = this.getMap();\n        if (isFullScreen()) {\n            this.setClassName_(this.button_, true);\n            replaceNode(this.labelActiveNode_, this.labelNode_);\n            this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n        }\n        else {\n            this.setClassName_(this.button_, false);\n            replaceNode(this.labelNode_, this.labelActiveNode_);\n            this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n        }\n        if (map) {\n            map.updateSize();\n        }\n    };\n    /**\n     * @param {HTMLElement} element Target element\n     * @param {boolean} fullscreen True if fullscreen class name should be active\n     * @private\n     */\n    FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n        var _a, _b, _c;\n        var activeClassName = this.activeClassName_;\n        var inactiveClassName = this.inactiveClassName_;\n        var nextClassName = fullscreen ? activeClassName : inactiveClassName;\n        (_a = element.classList).remove.apply(_a, activeClassName);\n        (_b = element.classList).remove.apply(_b, inactiveClassName);\n        (_c = element.classList).add.apply(_c, nextClassName);\n    };\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @api\n     */\n    FullScreen.prototype.setMap = function (map) {\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            for (var i = 0, ii = events.length; i < ii; ++i) {\n                this.listenerKeys.push(listen(document, events[i], this.handleFullScreenChange_, this));\n            }\n        }\n    };\n    return FullScreen;\n}(Control));\n/**\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported() {\n    var body = document.body;\n    return !!(body['webkitRequestFullscreen'] ||\n        (body['msRequestFullscreen'] && document['msFullscreenEnabled']) ||\n        (body.requestFullscreen && document.fullscreenEnabled));\n}\n/**\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen() {\n    return !!(document['webkitIsFullScreen'] ||\n        document['msFullscreenElement'] ||\n        document.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    }\n    else if (element['msRequestFullscreen']) {\n        element['msRequestFullscreen']();\n    }\n    else if (element['webkitRequestFullscreen']) {\n        element['webkitRequestFullscreen']();\n    }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n    if (element['webkitRequestFullscreen']) {\n        element['webkitRequestFullscreen']();\n    }\n    else {\n        requestFullScreen(element);\n    }\n}\n/**\n * Exit fullscreen.\n */\nfunction exitFullScreen() {\n    if (document.exitFullscreen) {\n        document.exitFullscreen();\n    }\n    else if (document['msExitFullscreen']) {\n        document['msExitFullscreen']();\n    }\n    else if (document['webkitExitFullscreen']) {\n        document['webkitExitFullscreen']();\n    }\n}\nexport default FullScreen;\n//# sourceMappingURL=FullScreen.js.map"]},"metadata":{},"sourceType":"module"}