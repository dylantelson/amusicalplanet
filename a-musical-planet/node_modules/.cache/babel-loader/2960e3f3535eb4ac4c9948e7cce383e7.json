{"ast":null,"code":"/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport FormatType from '../format/FormatType.js';\nimport Interaction from './Interaction.js';\nimport { TRUE } from '../functions.js';\nimport { get as getProjection } from '../proj.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {Object} Options\n * @property {Array<typeof import(\"../format/Feature.js\").default|import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors\n * (and/or formats pre-constructed with options).\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\n */\n\n/**\n * @enum {string}\n */\n\nvar DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\n\nvar DragAndDropEvent = function (_super) {\n  __extends(DragAndDropEvent, _super);\n  /**\n   * @param {DragAndDropEventType} type Type.\n   * @param {File} file File.\n   * @param {Array<import(\"../Feature.js\").default>} [opt_features] Features.\n   * @param {import(\"../proj/Projection.js\").default} [opt_projection] Projection.\n   */\n\n\n  function DragAndDropEvent(type, file, opt_features, opt_projection) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The features parsed from dropped data.\n     * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\n     * @api\n     */\n\n\n    _this.features = opt_features;\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n\n    _this.file = file;\n    /**\n     * The feature projection.\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     * @api\n     */\n\n    _this.projection = opt_projection;\n    return _this;\n  }\n\n  return DragAndDropEvent;\n}(Event);\n\nexport { DragAndDropEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'addfeatures', DragAndDropEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'addfeatures', Return>} DragAndDropOnSignature\n */\n\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n *\n * Note that the DragAndDrop interaction uses the TextDecoder() constructor if the supplied\n * combinnation of formats read both text string and ArrayBuffer sources. Older browsers such\n * as IE which do not support this will need a TextDecoder polyfill to be loaded before use.\n *\n * @api\n *\n * @fires DragAndDropEvent\n */\n\nvar DragAndDrop = function (_super) {\n  __extends(DragAndDrop, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function DragAndDrop(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      handleEvent: TRUE\n    }) || this;\n    /***\n     * @type {DragAndDropOnSignature<import(\"../Observable\").OnReturn>}\n     */\n\n    _this.on;\n    /***\n     * @type {DragAndDropOnSignature<import(\"../Observable\").OnReturn>}\n     */\n\n    _this.once;\n    /***\n     * @type {DragAndDropOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.readAsBuffer_ = false;\n    /**\n     * @private\n     * @type {Array<import(\"../format/Feature.js\").default>}\n     */\n\n    _this.formats_ = [];\n    var formatConstructors = options.formatConstructors ? options.formatConstructors : [];\n\n    for (var i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      var format = formatConstructors[i];\n\n      if (typeof format === 'function') {\n        format = new format();\n      }\n\n      _this.formats_.push(format);\n\n      _this.readAsBuffer_ = _this.readAsBuffer_ || format.getType() === FormatType.ARRAY_BUFFER;\n    }\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n\n    _this.projection_ = options.projection ? getProjection(options.projection) : null;\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n\n    _this.dropListenKeys_ = null;\n    /**\n     * @private\n     * @type {import(\"../source/Vector.js\").default}\n     */\n\n    _this.source_ = options.source || null;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    _this.target = options.target ? options.target : null;\n    return _this;\n  }\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n\n\n  DragAndDrop.prototype.handleResult_ = function (file, event) {\n    var result = event.target.result;\n    var map = this.getMap();\n    var projection = this.projection_;\n\n    if (!projection) {\n      var view = map.getView();\n      projection = view.getProjection();\n    }\n\n    var text;\n    var formats = this.formats_;\n\n    for (var i = 0, ii = formats.length; i < ii; ++i) {\n      var format = formats[i];\n      var input = result;\n\n      if (this.readAsBuffer_ && format.getType() !== FormatType.ARRAY_BUFFER) {\n        if (text === undefined) {\n          text = new TextDecoder().decode(result);\n        }\n\n        input = text;\n      }\n\n      var features = this.tryReadFeatures_(format, input, {\n        featureProjection: projection\n      });\n\n      if (features && features.length > 0) {\n        if (this.source_) {\n          this.source_.clear();\n          this.source_.addFeatures(features);\n        }\n\n        this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES, file, features, projection));\n        break;\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  DragAndDrop.prototype.registerListeners_ = function () {\n    var map = this.getMap();\n\n    if (map) {\n      var dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [listen(dropArea, EventType.DROP, this.handleDrop, this), listen(dropArea, EventType.DRAGENTER, this.handleStop, this), listen(dropArea, EventType.DRAGOVER, this.handleStop, this), listen(dropArea, EventType.DROP, this.handleStop, this)];\n    }\n  };\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n\n\n  DragAndDrop.prototype.setActive = function (active) {\n    if (!this.getActive() && active) {\n      this.registerListeners_();\n    }\n\n    if (this.getActive() && !active) {\n      this.unregisterListeners_();\n    }\n\n    _super.prototype.setActive.call(this, active);\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n\n\n  DragAndDrop.prototype.setMap = function (map) {\n    this.unregisterListeners_();\n\n    _super.prototype.setMap.call(this, map);\n\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  };\n  /**\n   * @param {import(\"../format/Feature.js\").default} format Format.\n   * @param {string} text Text.\n   * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\n   * @private\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  DragAndDrop.prototype.tryReadFeatures_ = function (format, text, options) {\n    try {\n      return format.readFeatures(text, options);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  DragAndDrop.prototype.unregisterListeners_ = function () {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  };\n  /**\n   * @param {DragEvent} event Event.\n   */\n\n\n  DragAndDrop.prototype.handleDrop = function (event) {\n    var files = event.dataTransfer.files;\n\n    for (var i = 0, ii = files.length; i < ii; ++i) {\n      var file = files.item(i);\n      var reader = new FileReader();\n      reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));\n\n      if (this.readAsBuffer_) {\n        reader.readAsArrayBuffer(file);\n      } else {\n        reader.readAsText(file);\n      }\n    }\n  };\n  /**\n   * @param {DragEvent} event Event.\n   */\n\n\n  DragAndDrop.prototype.handleStop = function (event) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  };\n\n  return DragAndDrop;\n}(Interaction);\n\nexport default DragAndDrop;","map":{"version":3,"sources":["../src/interaction/DragAndDrop.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport FormatType from '../format/FormatType.js';\nimport Interaction from './Interaction.js';\nimport { TRUE } from '../functions.js';\nimport { get as getProjection } from '../proj.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {Object} Options\n * @property {Array<typeof import(\"../format/Feature.js\").default|import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors\n * (and/or formats pre-constructed with options).\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\n */\n/**\n * @enum {string}\n */\nvar DragAndDropEventType = {\n    /**\n     * Triggered when features are added\n     * @event DragAndDropEvent#addfeatures\n     * @api\n     */\n    ADD_FEATURES: 'addfeatures',\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\nvar DragAndDropEvent = /** @class */ (function (_super) {\n    __extends(DragAndDropEvent, _super);\n    /**\n     * @param {DragAndDropEventType} type Type.\n     * @param {File} file File.\n     * @param {Array<import(\"../Feature.js\").default>} [opt_features] Features.\n     * @param {import(\"../proj/Projection.js\").default} [opt_projection] Projection.\n     */\n    function DragAndDropEvent(type, file, opt_features, opt_projection) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The features parsed from dropped data.\n         * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\n         * @api\n         */\n        _this.features = opt_features;\n        /**\n         * The dropped file.\n         * @type {File}\n         * @api\n         */\n        _this.file = file;\n        /**\n         * The feature projection.\n         * @type {import(\"../proj/Projection.js\").default|undefined}\n         * @api\n         */\n        _this.projection = opt_projection;\n        return _this;\n    }\n    return DragAndDropEvent;\n}(Event));\nexport { DragAndDropEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'addfeatures', DragAndDropEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'addfeatures', Return>} DragAndDropOnSignature\n */\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n *\n * Note that the DragAndDrop interaction uses the TextDecoder() constructor if the supplied\n * combinnation of formats read both text string and ArrayBuffer sources. Older browsers such\n * as IE which do not support this will need a TextDecoder polyfill to be loaded before use.\n *\n * @api\n *\n * @fires DragAndDropEvent\n */\nvar DragAndDrop = /** @class */ (function (_super) {\n    __extends(DragAndDrop, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function DragAndDrop(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            handleEvent: TRUE,\n        }) || this;\n        /***\n         * @type {DragAndDropOnSignature<import(\"../Observable\").OnReturn>}\n         */\n        _this.on;\n        /***\n         * @type {DragAndDropOnSignature<import(\"../Observable\").OnReturn>}\n         */\n        _this.once;\n        /***\n         * @type {DragAndDropOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.readAsBuffer_ = false;\n        /**\n         * @private\n         * @type {Array<import(\"../format/Feature.js\").default>}\n         */\n        _this.formats_ = [];\n        var formatConstructors = options.formatConstructors\n            ? options.formatConstructors\n            : [];\n        for (var i = 0, ii = formatConstructors.length; i < ii; ++i) {\n            var format = formatConstructors[i];\n            if (typeof format === 'function') {\n                format = new format();\n            }\n            _this.formats_.push(format);\n            _this.readAsBuffer_ =\n                _this.readAsBuffer_ || format.getType() === FormatType.ARRAY_BUFFER;\n        }\n        /**\n         * @private\n         * @type {import(\"../proj/Projection.js\").default}\n         */\n        _this.projection_ = options.projection\n            ? getProjection(options.projection)\n            : null;\n        /**\n         * @private\n         * @type {?Array<import(\"../events.js\").EventsKey>}\n         */\n        _this.dropListenKeys_ = null;\n        /**\n         * @private\n         * @type {import(\"../source/Vector.js\").default}\n         */\n        _this.source_ = options.source || null;\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.target = options.target ? options.target : null;\n        return _this;\n    }\n    /**\n     * @param {File} file File.\n     * @param {Event} event Load event.\n     * @private\n     */\n    DragAndDrop.prototype.handleResult_ = function (file, event) {\n        var result = event.target.result;\n        var map = this.getMap();\n        var projection = this.projection_;\n        if (!projection) {\n            var view = map.getView();\n            projection = view.getProjection();\n        }\n        var text;\n        var formats = this.formats_;\n        for (var i = 0, ii = formats.length; i < ii; ++i) {\n            var format = formats[i];\n            var input = result;\n            if (this.readAsBuffer_ && format.getType() !== FormatType.ARRAY_BUFFER) {\n                if (text === undefined) {\n                    text = new TextDecoder().decode(result);\n                }\n                input = text;\n            }\n            var features = this.tryReadFeatures_(format, input, {\n                featureProjection: projection,\n            });\n            if (features && features.length > 0) {\n                if (this.source_) {\n                    this.source_.clear();\n                    this.source_.addFeatures(features);\n                }\n                this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES, file, features, projection));\n                break;\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    DragAndDrop.prototype.registerListeners_ = function () {\n        var map = this.getMap();\n        if (map) {\n            var dropArea = this.target ? this.target : map.getViewport();\n            this.dropListenKeys_ = [\n                listen(dropArea, EventType.DROP, this.handleDrop, this),\n                listen(dropArea, EventType.DRAGENTER, this.handleStop, this),\n                listen(dropArea, EventType.DRAGOVER, this.handleStop, this),\n                listen(dropArea, EventType.DROP, this.handleStop, this),\n            ];\n        }\n    };\n    /**\n     * Activate or deactivate the interaction.\n     * @param {boolean} active Active.\n     * @observable\n     * @api\n     */\n    DragAndDrop.prototype.setActive = function (active) {\n        if (!this.getActive() && active) {\n            this.registerListeners_();\n        }\n        if (this.getActive() && !active) {\n            this.unregisterListeners_();\n        }\n        _super.prototype.setActive.call(this, active);\n    };\n    /**\n     * Remove the interaction from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    DragAndDrop.prototype.setMap = function (map) {\n        this.unregisterListeners_();\n        _super.prototype.setMap.call(this, map);\n        if (this.getActive()) {\n            this.registerListeners_();\n        }\n    };\n    /**\n     * @param {import(\"../format/Feature.js\").default} format Format.\n     * @param {string} text Text.\n     * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\n     * @private\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     */\n    DragAndDrop.prototype.tryReadFeatures_ = function (format, text, options) {\n        try {\n            return (\n            /** @type {Array<import(\"../Feature.js\").default>} */\n            (format.readFeatures(text, options)));\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    /**\n     * @private\n     */\n    DragAndDrop.prototype.unregisterListeners_ = function () {\n        if (this.dropListenKeys_) {\n            this.dropListenKeys_.forEach(unlistenByKey);\n            this.dropListenKeys_ = null;\n        }\n    };\n    /**\n     * @param {DragEvent} event Event.\n     */\n    DragAndDrop.prototype.handleDrop = function (event) {\n        var files = event.dataTransfer.files;\n        for (var i = 0, ii = files.length; i < ii; ++i) {\n            var file = files.item(i);\n            var reader = new FileReader();\n            reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));\n            if (this.readAsBuffer_) {\n                reader.readAsArrayBuffer(file);\n            }\n            else {\n                reader.readAsText(file);\n            }\n        }\n    };\n    /**\n     * @param {DragEvent} event Event.\n     */\n    DragAndDrop.prototype.handleStop = function (event) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'copy';\n    };\n    return DragAndDrop;\n}(Interaction));\nexport default DragAndDrop;\n//# sourceMappingURL=DragAndDrop.js.map"]},"metadata":{},"sourceType":"module"}