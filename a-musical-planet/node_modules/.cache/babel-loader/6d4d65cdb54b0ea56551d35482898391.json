{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/Play.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Playlists = [\"6m36M8JSof1zJr7T0dAUF0\", \"4RABU5Lx4c6u6Q28k74K6n\", \"34TPiPoIKgqXCwKcQm36yR\", \"7qQiRPJJuVmK2IfuBUEgG7\", \"3ToF3Jc1dps69OxQvZxX0r\", \"2oDF3FzMIhTPap9h8BIwre\", \"4oVqu9orWVe2EWm26fhpz1\"];\n\nconst Play = props => {\n  _s();\n\n  console.log(\"acctok: \", props.accessToken);\n  const [currArtist, setCurrArtist] = useState(\"\");\n  const [currCountry, setCurrCountry] = useState(\"\");\n  const [currTrack, setCurrTrack] = useState(\"\");\n  const [redirect, setRedirect] = useState(false);\n  const audioRef = useRef(null); //props.spotifyApi.setAccessToken(props.token);\n\n  console.log(\"tok: \", props.accessToken);\n\n  const getNewArtist = () => {\n    if (props.accessToken === null) {\n      console.log(\"REDIRECTING\");\n      setRedirect(true);\n    }\n\n    const currPlaylistIndex = Math.floor(Math.random() * Playlists.length);\n    fetch(`https://api.spotify.com/v1/playlists/${currPlaylistIndex}`, {\n      headers: {\n        Authorization: \"Bearer \" + props.accessToken\n      }\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      let track = \"\";\n      let artist = \"\";\n      let country = \"\";\n\n      while (track === \"\") {\n        const chosenIndex = Math.floor(Math.random() * data.tracks.items.length);\n        const possibleTrack = data.tracks.items[chosenIndex].track.preview_url;\n\n        if (possibleTrack != null) {\n          track = possibleTrack;\n          artist = data.tracks.items[chosenIndex].track.artists[0].name;\n          country = data.name;\n        }\n      }\n\n      setCurrArtist(artist);\n      setCurrTrack(track);\n      setCurrCountry(country);\n      audioRef.current.load();\n    });\n  };\n\n  useEffect(() => {\n    getNewArtist();\n  }, []);\n  if (redirect) return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Artist: \", currArtist]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Country: \", currCountry]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      id: \"music\",\n      ref: audioRef,\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        volume: \"2\",\n        allow: \"autoplay\",\n        src: currTrack,\n        type: \"audio/mpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getNewArtist,\n        children: \"New Song\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Play, \"O5X3NP+oaX+q0IHmtgXP84zFSCc=\");\n\n_c = Play;\nexport default Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/Play.js"],"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Switch","Route","Link","Redirect","Playlists","Play","props","console","log","accessToken","currArtist","setCurrArtist","currCountry","setCurrCountry","currTrack","setCurrTrack","redirect","setRedirect","audioRef","getNewArtist","currPlaylistIndex","Math","floor","random","length","fetch","headers","Authorization","then","response","json","data","track","artist","country","chosenIndex","tracks","items","possibleTrack","preview_url","artists","name","current","load"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\n\nconst Playlists = [\n  \"6m36M8JSof1zJr7T0dAUF0\",\n  \"4RABU5Lx4c6u6Q28k74K6n\",\n  \"34TPiPoIKgqXCwKcQm36yR\",\n  \"7qQiRPJJuVmK2IfuBUEgG7\",\n  \"3ToF3Jc1dps69OxQvZxX0r\",\n  \"2oDF3FzMIhTPap9h8BIwre\",\n  \"4oVqu9orWVe2EWm26fhpz1\",\n];\n\nconst Play = (props) => {\n  console.log(\"acctok: \", props.accessToken);\n  const [currArtist, setCurrArtist] = useState(\"\");\n  const [currCountry, setCurrCountry] = useState(\"\");\n  const [currTrack, setCurrTrack] = useState(\"\");\n  const [redirect, setRedirect] = useState(false);\n\n  const audioRef = useRef(null);\n  //props.spotifyApi.setAccessToken(props.token);\n  console.log(\"tok: \", props.accessToken);\n\n  const getNewArtist = () => {\n    if (props.accessToken === null) {\n      console.log(\"REDIRECTING\");\n      setRedirect(true);\n    }\n    const currPlaylistIndex = Math.floor(Math.random() * Playlists.length);\n    fetch(`https://api.spotify.com/v1/playlists/${currPlaylistIndex}`, {\n      headers: { Authorization: \"Bearer \" + props.accessToken },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        let track = \"\";\n        let artist = \"\";\n        let country = \"\";\n        while (track === \"\") {\n          const chosenIndex = Math.floor(\n            Math.random() * data.tracks.items.length\n          );\n          const possibleTrack =\n            data.tracks.items[chosenIndex].track.preview_url;\n          if (possibleTrack != null) {\n            track = possibleTrack;\n            artist = data.tracks.items[chosenIndex].track.artists[0].name;\n            country = data.name;\n          }\n        }\n        setCurrArtist(artist);\n        setCurrTrack(track);\n        setCurrCountry(country);\n        audioRef.current.load();\n      });\n  };\n\n  useEffect(() => {\n    getNewArtist();\n  }, []);\n\n  if (redirect) return <Redirect to=\"/\" />;\n  return (\n    <>\n      <h1>Artist: {currArtist}</h1>\n      <h1>Country: {currCountry}</h1>\n      <audio controls id=\"music\" ref={audioRef}>\n        <source\n          volume=\"2\"\n          allow=\"autoplay\"\n          src={currTrack}\n          type=\"audio/mpeg\"\n        ></source>\n        {/* Your browser does not support the audio element. */}\n      </audio>\n      <div>\n        <button onClick={getNewArtist}>New Song</button>\n      </div>\n    </>\n  );\n};\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}