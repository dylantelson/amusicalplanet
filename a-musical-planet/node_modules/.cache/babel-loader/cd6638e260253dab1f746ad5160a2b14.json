{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Geolocation\n */\n\n\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform } from './proj.js';\nimport { toRadians } from './math.js';\n/**\n * @enum {string}\n */\n\nvar Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions'\n};\n/**\n * @classdesc\n * Events emitted on Geolocation error.\n */\n\nvar GeolocationError = function (_super) {\n  __extends(GeolocationError, _super);\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n\n\n  function GeolocationError(error) {\n    var _this = _super.call(this, EventType.ERROR) || this;\n    /**\n     * @type {number}\n     */\n\n\n    _this.code = error.code;\n    /**\n     * @type {string}\n     */\n\n    _this.message = error.message;\n    return _this;\n  }\n\n  return GeolocationError;\n}(BaseEvent);\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes|\n *     'error', Return>} GeolocationOnSignature\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes, register a listener for the generic\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     var geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       window.console.log(geolocation.getPosition());\n *     });\n *\n * @fires module:ol/events/Event~BaseEvent#event:error\n * @api\n */\n\n\nvar Geolocation = function (_super) {\n  __extends(Geolocation, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function Geolocation(opt_options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {GeolocationOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {GeolocationOnSignature<import(\"./Observable.js\").OnReturn>}\n     */\n\n    _this.once;\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n\n    _this.un;\n    var options = opt_options || {};\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n\n    _this.position_ = null;\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n\n    _this.transform_ = identityTransform;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.watchId_ = undefined;\n\n    _this.addChangeListener(Property.PROJECTION, _this.handleProjectionChanged_);\n\n    _this.addChangeListener(Property.TRACKING, _this.handleTrackingChanged_);\n\n    if (options.projection !== undefined) {\n      _this.setProjection(options.projection);\n    }\n\n    if (options.trackingOptions !== undefined) {\n      _this.setTrackingOptions(options.trackingOptions);\n    }\n\n    _this.setTracking(options.tracking !== undefined ? options.tracking : false);\n\n    return _this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  Geolocation.prototype.disposeInternal = function () {\n    this.setTracking(false);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @private\n   */\n\n\n  Geolocation.prototype.handleProjectionChanged_ = function () {\n    var projection = this.getProjection();\n\n    if (projection) {\n      this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  Geolocation.prototype.handleTrackingChanged_ = function () {\n    if ('geolocation' in navigator) {\n      var tracking = this.getTracking();\n\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {GeolocationPosition} position position event.\n   */\n\n\n  Geolocation.prototype.positionChange_ = function (position) {\n    var coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n    this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n    this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n\n    var projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition);\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    var geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  };\n  /**\n   * @private\n   * @param {GeolocationPositionError} error error object.\n   */\n\n\n  Geolocation.prototype.positionError_ = function (error) {\n    this.dispatchEvent(new GeolocationError(error));\n  };\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAccuracy = function () {\n    return this.get(Property.ACCURACY);\n  };\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAccuracyGeometry = function () {\n    return this.get(Property.ACCURACY_GEOMETRY) || null;\n  };\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAltitude = function () {\n    return this.get(Property.ALTITUDE);\n  };\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAltitudeAccuracy = function () {\n    return this.get(Property.ALTITUDE_ACCURACY);\n  };\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getHeading = function () {\n    return this.get(Property.HEADING);\n  };\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getPosition = function () {\n    return this.get(Property.POSITION);\n  };\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getProjection = function () {\n    return this.get(Property.PROJECTION);\n  };\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getSpeed = function () {\n    return this.get(Property.SPEED);\n  };\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getTracking = function () {\n    return this.get(Property.TRACKING);\n  };\n  /**\n   * Get the tracking options.\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getTrackingOptions = function () {\n    return this.get(Property.TRACKING_OPTIONS);\n  };\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setProjection = function (projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  };\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setTracking = function (tracking) {\n    this.set(Property.TRACKING, tracking);\n  };\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setTrackingOptions = function (options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  };\n\n  return Geolocation;\n}(BaseObject);\n\nexport default Geolocation;","map":{"version":3,"sources":["src/Geolocation.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Geolocation\n */\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform, } from './proj.js';\nimport { toRadians } from './math.js';\n/**\n * @enum {string}\n */\nvar Property = {\n    ACCURACY: 'accuracy',\n    ACCURACY_GEOMETRY: 'accuracyGeometry',\n    ALTITUDE: 'altitude',\n    ALTITUDE_ACCURACY: 'altitudeAccuracy',\n    HEADING: 'heading',\n    POSITION: 'position',\n    PROJECTION: 'projection',\n    SPEED: 'speed',\n    TRACKING: 'tracking',\n    TRACKING_OPTIONS: 'trackingOptions',\n};\n/**\n * @classdesc\n * Events emitted on Geolocation error.\n */\nvar GeolocationError = /** @class */ (function (_super) {\n    __extends(GeolocationError, _super);\n    /**\n     * @param {GeolocationPositionError} error error object.\n     */\n    function GeolocationError(error) {\n        var _this = _super.call(this, EventType.ERROR) || this;\n        /**\n         * @type {number}\n         */\n        _this.code = error.code;\n        /**\n         * @type {string}\n         */\n        _this.message = error.message;\n        return _this;\n    }\n    return GeolocationError;\n}(BaseEvent));\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes|\n *     'error', Return>} GeolocationOnSignature\n */\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes, register a listener for the generic\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     var geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       window.console.log(geolocation.getPosition());\n *     });\n *\n * @fires module:ol/events/Event~BaseEvent#event:error\n * @api\n */\nvar Geolocation = /** @class */ (function (_super) {\n    __extends(Geolocation, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Geolocation(opt_options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {GeolocationOnSignature<import(\"./Observable.js\").OnReturn>}\n         */\n        _this.on;\n        /***\n         * @type {GeolocationOnSignature<import(\"./Observable.js\").OnReturn>}\n         */\n        _this.once;\n        /***\n         * @type {GeolocationOnSignature<void>}\n         */\n        _this.un;\n        var options = opt_options || {};\n        /**\n         * The unprojected (EPSG:4326) device position.\n         * @private\n         * @type {?import(\"./coordinate.js\").Coordinate}\n         */\n        _this.position_ = null;\n        /**\n         * @private\n         * @type {import(\"./proj.js\").TransformFunction}\n         */\n        _this.transform_ = identityTransform;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.watchId_ = undefined;\n        _this.addChangeListener(Property.PROJECTION, _this.handleProjectionChanged_);\n        _this.addChangeListener(Property.TRACKING, _this.handleTrackingChanged_);\n        if (options.projection !== undefined) {\n            _this.setProjection(options.projection);\n        }\n        if (options.trackingOptions !== undefined) {\n            _this.setTrackingOptions(options.trackingOptions);\n        }\n        _this.setTracking(options.tracking !== undefined ? options.tracking : false);\n        return _this;\n    }\n    /**\n     * Clean up.\n     */\n    Geolocation.prototype.disposeInternal = function () {\n        this.setTracking(false);\n        _super.prototype.disposeInternal.call(this);\n    };\n    /**\n     * @private\n     */\n    Geolocation.prototype.handleProjectionChanged_ = function () {\n        var projection = this.getProjection();\n        if (projection) {\n            this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n            if (this.position_) {\n                this.set(Property.POSITION, this.transform_(this.position_));\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Geolocation.prototype.handleTrackingChanged_ = function () {\n        if ('geolocation' in navigator) {\n            var tracking = this.getTracking();\n            if (tracking && this.watchId_ === undefined) {\n                this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n            }\n            else if (!tracking && this.watchId_ !== undefined) {\n                navigator.geolocation.clearWatch(this.watchId_);\n                this.watchId_ = undefined;\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {GeolocationPosition} position position event.\n     */\n    Geolocation.prototype.positionChange_ = function (position) {\n        var coords = position.coords;\n        this.set(Property.ACCURACY, coords.accuracy);\n        this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n        this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n        this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n        if (!this.position_) {\n            this.position_ = [coords.longitude, coords.latitude];\n        }\n        else {\n            this.position_[0] = coords.longitude;\n            this.position_[1] = coords.latitude;\n        }\n        var projectedPosition = this.transform_(this.position_);\n        this.set(Property.POSITION, projectedPosition);\n        this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n        var geometry = circularPolygon(this.position_, coords.accuracy);\n        geometry.applyTransform(this.transform_);\n        this.set(Property.ACCURACY_GEOMETRY, geometry);\n        this.changed();\n    };\n    /**\n     * @private\n     * @param {GeolocationPositionError} error error object.\n     */\n    Geolocation.prototype.positionError_ = function (error) {\n        this.dispatchEvent(new GeolocationError(error));\n    };\n    /**\n     * Get the accuracy of the position in meters.\n     * @return {number|undefined} The accuracy of the position measurement in\n     *     meters.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getAccuracy = function () {\n        return /** @type {number|undefined} */ (this.get(Property.ACCURACY));\n    };\n    /**\n     * Get a geometry of the position accuracy.\n     * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getAccuracyGeometry = function () {\n        return /** @type {?import(\"./geom/Polygon.js\").default} */ (this.get(Property.ACCURACY_GEOMETRY) || null);\n    };\n    /**\n     * Get the altitude associated with the position.\n     * @return {number|undefined} The altitude of the position in meters above mean\n     *     sea level.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getAltitude = function () {\n        return /** @type {number|undefined} */ (this.get(Property.ALTITUDE));\n    };\n    /**\n     * Get the altitude accuracy of the position.\n     * @return {number|undefined} The accuracy of the altitude measurement in\n     *     meters.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getAltitudeAccuracy = function () {\n        return /** @type {number|undefined} */ (this.get(Property.ALTITUDE_ACCURACY));\n    };\n    /**\n     * Get the heading as radians clockwise from North.\n     * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n     * is set to `true` in the tracking options.\n     * @return {number|undefined} The heading of the device in radians from north.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getHeading = function () {\n        return /** @type {number|undefined} */ (this.get(Property.HEADING));\n    };\n    /**\n     * Get the position of the device.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n     *     in the current projection.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getPosition = function () {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(Property.POSITION));\n    };\n    /**\n     * Get the projection associated with the position.\n     * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n     *     reported in.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getProjection = function () {\n        return /** @type {import(\"./proj/Projection.js\").default|undefined} */ (this.get(Property.PROJECTION));\n    };\n    /**\n     * Get the speed in meters per second.\n     * @return {number|undefined} The instantaneous speed of the device in meters\n     *     per second.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getSpeed = function () {\n        return /** @type {number|undefined} */ (this.get(Property.SPEED));\n    };\n    /**\n     * Determine if the device location is being tracked.\n     * @return {boolean} The device location is being tracked.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getTracking = function () {\n        return /** @type {boolean} */ (this.get(Property.TRACKING));\n    };\n    /**\n     * Get the tracking options.\n     * See https://www.w3.org/TR/geolocation-API/#position-options.\n     * @return {PositionOptions|undefined} PositionOptions as defined by\n     *     the [HTML5 Geolocation spec\n     *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getTrackingOptions = function () {\n        return /** @type {PositionOptions|undefined} */ (this.get(Property.TRACKING_OPTIONS));\n    };\n    /**\n     * Set the projection to use for transforming the coordinates.\n     * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n     *     reported in.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.setProjection = function (projection) {\n        this.set(Property.PROJECTION, getProjection(projection));\n    };\n    /**\n     * Enable or disable tracking.\n     * @param {boolean} tracking Enable tracking.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.setTracking = function (tracking) {\n        this.set(Property.TRACKING, tracking);\n    };\n    /**\n     * Set the tracking options.\n     * See http://www.w3.org/TR/geolocation-API/#position-options.\n     * @param {PositionOptions} options PositionOptions as defined by the\n     *     [HTML5 Geolocation spec\n     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.setTrackingOptions = function (options) {\n        this.set(Property.TRACKING_OPTIONS, options);\n    };\n    return Geolocation;\n}(BaseObject));\nexport default Geolocation;\n//# sourceMappingURL=Geolocation.js.map"]},"metadata":{},"sourceType":"module"}