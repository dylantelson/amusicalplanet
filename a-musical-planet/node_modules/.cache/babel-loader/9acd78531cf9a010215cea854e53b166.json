{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\n\n\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX } from '../../extent.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\n\nvar CanvasVectorLayerRenderer = function (_super) {\n  __extends(CanvasVectorLayerRenderer, _super);\n  /**\n   * @param {import(\"../../layer/Vector.js\").default} vectorLayer Vector layer.\n   */\n\n\n  function CanvasVectorLayerRenderer(vectorLayer) {\n    var _this = _super.call(this, vectorLayer) || this;\n    /** @private */\n\n\n    _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n    /**\n     * @type {boolean}\n     */\n\n    _this.animatingOrInteracting_;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.dirty_ = false;\n    /**\n     * @type {ImageData}\n     */\n\n    _this.hitDetectionImageData_ = null;\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n\n    _this.renderedFeatures_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedResolution_ = NaN;\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n    _this.renderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n    _this.wrappedRenderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRotation_;\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n\n    _this.renderedCenter_ = null;\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n\n    _this.renderedProjection_ = null;\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n\n    _this.renderedRenderOrder_ = null;\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n\n    _this.replayGroup_ = null;\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n\n    _this.replayGroupChanged = true;\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n\n    _this.declutterExecutorGroup = null;\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n\n    _this.clipping = true;\n    return _this;\n  }\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {number} opacity Opacity.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.useContainer = function (target, transform, opacity) {\n    if (opacity < 1) {\n      target = null;\n    }\n\n    _super.prototype.useContainer.call(this, target, transform, opacity);\n  };\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.renderWorlds = function (executorGroup, frameState, opt_declutterTree) {\n    var extent = frameState.extent;\n    var viewState = frameState.viewState;\n    var center = viewState.center;\n    var resolution = viewState.resolution;\n    var projection = viewState.projection;\n    var rotation = viewState.rotation;\n    var projectionExtent = projection.getExtent();\n    var vectorSource = this.getLayer().getSource();\n    var pixelRatio = frameState.pixelRatio;\n    var viewHints = frameState.viewHints;\n    var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    var context = this.context;\n    var width = Math.round(frameState.size[0] * pixelRatio);\n    var height = Math.round(frameState.size[1] * pixelRatio);\n    var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    var endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n    var world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n\n    do {\n      var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n      executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, opt_declutterTree);\n    } while (++world < endWorld);\n  };\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.renderDeclutter = function (frameState) {\n    if (this.declutterExecutorGroup) {\n      this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n    }\n  };\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {\n    var pixelRatio = frameState.pixelRatio;\n    var layerState = frameState.layerStatesArray[frameState.layerIndex]; // set forward and inverse pixel transforms\n\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n    var canvasTransform = transformToString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, layerState.opacity);\n    var context = this.context;\n    var canvas = context.canvas;\n    var replayGroup = this.replayGroup_;\n    var declutterExecutorGroup = this.declutterExecutorGroup;\n\n    if ((!replayGroup || replayGroup.isEmpty()) && (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n      if (!this.containerReused && canvas.width > 0) {\n        canvas.width = 0;\n      }\n\n      return this.container;\n    } // resize and clear\n\n\n    var width = Math.round(frameState.size[0] * pixelRatio);\n    var height = Math.round(frameState.size[1] * pixelRatio);\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    this.preRender(context, frameState);\n    var viewState = frameState.viewState;\n    var projection = viewState.projection; // clipped rendering if layer extent is set\n\n    var clipped = false;\n    var render = true;\n\n    if (layerState.extent && this.clipping) {\n      var layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n\n    if (clipped) {\n      context.restore();\n    }\n\n    this.postRender(context, frameState);\n    var opacity = layerState.opacity;\n    var container = this.container;\n\n    if (opacity !== parseFloat(container.style.opacity)) {\n      container.style.opacity = opacity === 1 ? '' : String(opacity);\n    }\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n\n    return this.container;\n  };\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {\n    return new Promise(\n    /**\n     * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    function (resolve) {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        var size = [this.context.canvas.width, this.context.canvas.height];\n        apply(this.pixelTransform, size);\n        var center = this.renderedCenter_;\n        var resolution = this.renderedResolution_;\n        var rotation = this.renderedRotation_;\n        var projection = this.renderedProjection_;\n        var extent = this.wrappedRenderedExtent_;\n        var layer = this.getLayer();\n        var transforms = [];\n        var width = size[0] * HIT_DETECT_RESOLUTION;\n        var height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n        var source = layer.getSource();\n        var projectionExtent = projection.getExtent();\n\n        if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n          var startX = extent[0];\n          var worldWidth = getWidth(projectionExtent);\n          var world = 0;\n          var offsetX = void 0;\n\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX += worldWidth;\n          }\n\n          world = 0;\n          startX = extent[2];\n\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX -= worldWidth;\n          }\n        }\n\n        this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n      }\n\n      resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n    }.bind(this));\n  };\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n    var _this = this;\n\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n\n    var resolution = frameState.viewState.resolution;\n    var rotation = frameState.viewState.rotation;\n    var layer = this.getLayer();\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n\n    var features = {};\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n\n    var featureCallback = function (feature, geometry, distanceSq) {\n      var key = getUid(feature);\n      var match = features[key];\n\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n\n        matches.push(features[key] = {\n          feature: feature,\n          layer: layer,\n          geometry: geometry,\n          distanceSq: distanceSq,\n          callback: callback\n        });\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n\n      return undefined;\n    };\n\n    var result;\n    var executorGroups = [this.replayGroup_];\n\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n\n    executorGroups.some(function (executorGroup) {\n      return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this.declutterExecutorGroup ? frameState.declutterTree.all().map(function (item) {\n        return item.value;\n      }) : null);\n    });\n    return result;\n  };\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {\n    var layer = this.getLayer();\n\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  };\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n    this.renderIfReadyAndVisible();\n  };\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {\n    var vectorLayer = this.getLayer();\n    var vectorSource = vectorLayer.getSource();\n\n    if (!vectorSource) {\n      return false;\n    }\n\n    var animating = frameState.viewHints[ViewHint.ANIMATING];\n    var interacting = frameState.viewHints[ViewHint.INTERACTING];\n    var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (!this.dirty_ && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n\n    this.animatingOrInteracting_ = false;\n    var frameStateExtent = frameState.extent;\n    var viewState = frameState.viewState;\n    var projection = viewState.projection;\n    var resolution = viewState.resolution;\n    var pixelRatio = frameState.pixelRatio;\n    var vectorLayerRevision = vectorLayer.getRevision();\n    var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    var center = viewState.center.slice();\n    var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n    var renderedExtent = extent.slice();\n    var loadExtents = [extent.slice()];\n    var projectionExtent = projection.getExtent();\n\n    if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      var worldWidth = getWidth(projectionExtent);\n      var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      var loadExtent = wrapExtentX(loadExtents[0], projection); // If the extent crosses the date line, we load data for both edges of the worlds\n\n      if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);\n      } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);\n      }\n    }\n\n    if (!this.dirty_ && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && containsExtent(this.wrappedRenderedExtent_, extent)) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n    this.dirty_ = false;\n    var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    var declutterBuilderGroup;\n\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    }\n\n    var userProjection = getUserProjection();\n    var userTransform;\n\n    if (userProjection) {\n      for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(toUserExtent(loadExtents[i], projection), resolution, userProjection);\n      }\n\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n\n    var render =\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    function (feature) {\n      var styles;\n      var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n\n      if (styles) {\n        var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n        this.dirty_ = this.dirty_ || dirty;\n      }\n    }.bind(this);\n\n    var userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n\n    var features = vectorSource.getFeaturesInExtent(userExtent);\n\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n\n    this.renderedFeatures_ = features;\n    var replayGroupInstructions = replayGroup.finish();\n    var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n    }\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n    this.replayGroupChanged = true;\n    return true;\n  };\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform, opt_declutterBuilderGroup) {\n    if (!styles) {\n      return false;\n    }\n\n    var loading = false;\n\n    if (Array.isArray(styles)) {\n      for (var i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup);\n    }\n\n    return loading;\n  };\n\n  return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer);\n\nexport default CanvasVectorLayerRenderer;","map":{"version":3,"sources":["../../src/renderer/canvas/VectorLayer.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect, } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString, } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX, } from '../../extent.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature, } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasVectorLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/Vector.js\").default} vectorLayer Vector layer.\n     */\n    function CanvasVectorLayerRenderer(vectorLayer) {\n        var _this = _super.call(this, vectorLayer) || this;\n        /** @private */\n        _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n        /**\n         * @type {boolean}\n         */\n        _this.animatingOrInteracting_;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.dirty_ = false;\n        /**\n         * @type {ImageData}\n         */\n        _this.hitDetectionImageData_ = null;\n        /**\n         * @type {Array<import(\"../../Feature.js\").default>}\n         */\n        _this.renderedFeatures_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedResolution_ = NaN;\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.renderedExtent_ = createEmpty();\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.wrappedRenderedExtent_ = createEmpty();\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRotation_;\n        /**\n         * @private\n         * @type {import(\"../../coordinate\").Coordinate}\n         */\n        _this.renderedCenter_ = null;\n        /**\n         * @private\n         * @type {import(\"../../proj/Projection\").default}\n         */\n        _this.renderedProjection_ = null;\n        /**\n         * @private\n         * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n         */\n        _this.renderedRenderOrder_ = null;\n        /**\n         * @private\n         * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n         */\n        _this.replayGroup_ = null;\n        /**\n         * A new replay group had to be created by `prepareFrame()`\n         * @type {boolean}\n         */\n        _this.replayGroupChanged = true;\n        /**\n         * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n         */\n        _this.declutterExecutorGroup = null;\n        /**\n         * Clipping to be performed by `renderFrame()`\n         * @type {boolean}\n         */\n        _this.clipping = true;\n        return _this;\n    }\n    /**\n     * Get a rendering container from an existing target, if compatible.\n     * @param {HTMLElement} target Potential render target.\n     * @param {string} transform CSS Transform.\n     * @param {number} opacity Opacity.\n     */\n    CanvasVectorLayerRenderer.prototype.useContainer = function (target, transform, opacity) {\n        if (opacity < 1) {\n            target = null;\n        }\n        _super.prototype.useContainer.call(this, target, transform, opacity);\n    };\n    /**\n     * @param {ExecutorGroup} executorGroup Executor group.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n     */\n    CanvasVectorLayerRenderer.prototype.renderWorlds = function (executorGroup, frameState, opt_declutterTree) {\n        var extent = frameState.extent;\n        var viewState = frameState.viewState;\n        var center = viewState.center;\n        var resolution = viewState.resolution;\n        var projection = viewState.projection;\n        var rotation = viewState.rotation;\n        var projectionExtent = projection.getExtent();\n        var vectorSource = this.getLayer().getSource();\n        var pixelRatio = frameState.pixelRatio;\n        var viewHints = frameState.viewHints;\n        var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n        var context = this.context;\n        var width = Math.round(frameState.size[0] * pixelRatio);\n        var height = Math.round(frameState.size[1] * pixelRatio);\n        var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n        var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n        var endWorld = multiWorld\n            ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n            : 1;\n        var world = multiWorld\n            ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n            : 0;\n        do {\n            var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n            executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, opt_declutterTree);\n        } while (++world < endWorld);\n    };\n    /**\n     * Render declutter items for this layer\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    CanvasVectorLayerRenderer.prototype.renderDeclutter = function (frameState) {\n        if (this.declutterExecutorGroup) {\n            this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n        }\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var pixelRatio = frameState.pixelRatio;\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        // set forward and inverse pixel transforms\n        makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n        makeInverse(this.inversePixelTransform, this.pixelTransform);\n        var canvasTransform = transformToString(this.pixelTransform);\n        this.useContainer(target, canvasTransform, layerState.opacity);\n        var context = this.context;\n        var canvas = context.canvas;\n        var replayGroup = this.replayGroup_;\n        var declutterExecutorGroup = this.declutterExecutorGroup;\n        if ((!replayGroup || replayGroup.isEmpty()) &&\n            (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n            if (!this.containerReused && canvas.width > 0) {\n                canvas.width = 0;\n            }\n            return this.container;\n        }\n        // resize and clear\n        var width = Math.round(frameState.size[0] * pixelRatio);\n        var height = Math.round(frameState.size[1] * pixelRatio);\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n            if (canvas.style.transform !== canvasTransform) {\n                canvas.style.transform = canvasTransform;\n            }\n        }\n        else if (!this.containerReused) {\n            context.clearRect(0, 0, width, height);\n        }\n        this.preRender(context, frameState);\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        // clipped rendering if layer extent is set\n        var clipped = false;\n        var render = true;\n        if (layerState.extent && this.clipping) {\n            var layerExtent = fromUserExtent(layerState.extent, projection);\n            render = intersectsExtent(layerExtent, frameState.extent);\n            clipped = render && !containsExtent(layerExtent, frameState.extent);\n            if (clipped) {\n                this.clipUnrotated(context, frameState, layerExtent);\n            }\n        }\n        if (render) {\n            this.renderWorlds(replayGroup, frameState);\n        }\n        if (clipped) {\n            context.restore();\n        }\n        this.postRender(context, frameState);\n        var opacity = layerState.opacity;\n        var container = this.container;\n        if (opacity !== parseFloat(container.style.opacity)) {\n            container.style.opacity = opacity === 1 ? '' : String(opacity);\n        }\n        if (this.renderedRotation_ !== viewState.rotation) {\n            this.renderedRotation_ = viewState.rotation;\n            this.hitDetectionImageData_ = null;\n        }\n        return this.container;\n    };\n    /**\n     * Asynchronous layer level hit detection.\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n     */\n    CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {\n        return new Promise(\n        /**\n         * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n         * @this {CanvasVectorLayerRenderer}\n         */\n        function (resolve) {\n            if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n                var size = [this.context.canvas.width, this.context.canvas.height];\n                apply(this.pixelTransform, size);\n                var center = this.renderedCenter_;\n                var resolution = this.renderedResolution_;\n                var rotation = this.renderedRotation_;\n                var projection = this.renderedProjection_;\n                var extent = this.wrappedRenderedExtent_;\n                var layer = this.getLayer();\n                var transforms = [];\n                var width = size[0] * HIT_DETECT_RESOLUTION;\n                var height = size[1] * HIT_DETECT_RESOLUTION;\n                transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n                var source = layer.getSource();\n                var projectionExtent = projection.getExtent();\n                if (source.getWrapX() &&\n                    projection.canWrapX() &&\n                    !containsExtent(projectionExtent, extent)) {\n                    var startX = extent[0];\n                    var worldWidth = getWidth(projectionExtent);\n                    var world = 0;\n                    var offsetX = void 0;\n                    while (startX < projectionExtent[0]) {\n                        --world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n                        startX += worldWidth;\n                    }\n                    world = 0;\n                    startX = extent[2];\n                    while (startX > projectionExtent[2]) {\n                        ++world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n                        startX -= worldWidth;\n                    }\n                }\n                this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n            }\n            resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n        }.bind(this));\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n        var _this = this;\n        if (!this.replayGroup_) {\n            return undefined;\n        }\n        var resolution = frameState.viewState.resolution;\n        var rotation = frameState.viewState.rotation;\n        var layer = this.getLayer();\n        /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n        var features = {};\n        /**\n         * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n         * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n         * @param {number} distanceSq The squared distance to the click position\n         * @return {T|undefined} Callback result.\n         */\n        var featureCallback = function (feature, geometry, distanceSq) {\n            var key = getUid(feature);\n            var match = features[key];\n            if (!match) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    return callback(feature, layer, geometry);\n                }\n                matches.push((features[key] = {\n                    feature: feature,\n                    layer: layer,\n                    geometry: geometry,\n                    distanceSq: distanceSq,\n                    callback: callback,\n                }));\n            }\n            else if (match !== true && distanceSq < match.distanceSq) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    matches.splice(matches.lastIndexOf(match), 1);\n                    return callback(feature, layer, geometry);\n                }\n                match.geometry = geometry;\n                match.distanceSq = distanceSq;\n            }\n            return undefined;\n        };\n        var result;\n        var executorGroups = [this.replayGroup_];\n        if (this.declutterExecutorGroup) {\n            executorGroups.push(this.declutterExecutorGroup);\n        }\n        executorGroups.some(function (executorGroup) {\n            return (result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this.declutterExecutorGroup\n                ? frameState.declutterTree.all().map(function (item) { return item.value; })\n                : null));\n        });\n        return result;\n    };\n    /**\n     * Perform action necessary to get the layer rendered after new fonts have loaded\n     */\n    CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {\n        var layer = this.getLayer();\n        if (layer.getVisible() && this.replayGroup_) {\n            layer.changed();\n        }\n    };\n    /**\n     * Handle changes in image style state.\n     * @param {import(\"../../events/Event.js\").default} event Image style change event.\n     * @private\n     */\n    CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n        this.renderIfReadyAndVisible();\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {\n        var vectorLayer = this.getLayer();\n        var vectorSource = vectorLayer.getSource();\n        if (!vectorSource) {\n            return false;\n        }\n        var animating = frameState.viewHints[ViewHint.ANIMATING];\n        var interacting = frameState.viewHints[ViewHint.INTERACTING];\n        var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n        var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n        if ((!this.dirty_ && !updateWhileAnimating && animating) ||\n            (!updateWhileInteracting && interacting)) {\n            this.animatingOrInteracting_ = true;\n            return true;\n        }\n        this.animatingOrInteracting_ = false;\n        var frameStateExtent = frameState.extent;\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        var resolution = viewState.resolution;\n        var pixelRatio = frameState.pixelRatio;\n        var vectorLayerRevision = vectorLayer.getRevision();\n        var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n        var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n        if (vectorLayerRenderOrder === undefined) {\n            vectorLayerRenderOrder = defaultRenderOrder;\n        }\n        var center = viewState.center.slice();\n        var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n        var renderedExtent = extent.slice();\n        var loadExtents = [extent.slice()];\n        var projectionExtent = projection.getExtent();\n        if (vectorSource.getWrapX() &&\n            projection.canWrapX() &&\n            !containsExtent(projectionExtent, frameState.extent)) {\n            // For the replay group, we need an extent that intersects the real world\n            // (-180° to +180°). To support geometries in a coordinate range from -540°\n            // to +540°, we add at least 1 world width on each side of the projection\n            // extent. If the viewport is wider than the world, we need to add half of\n            // the viewport width to make sure we cover the whole viewport.\n            var worldWidth = getWidth(projectionExtent);\n            var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n            extent[0] = projectionExtent[0] - gutter;\n            extent[2] = projectionExtent[2] + gutter;\n            wrapCoordinateX(center, projection);\n            var loadExtent = wrapExtentX(loadExtents[0], projection);\n            // If the extent crosses the date line, we load data for both edges of the worlds\n            if (loadExtent[0] < projectionExtent[0] &&\n                loadExtent[2] < projectionExtent[2]) {\n                loadExtents.push([\n                    loadExtent[0] + worldWidth,\n                    loadExtent[1],\n                    loadExtent[2] + worldWidth,\n                    loadExtent[3],\n                ]);\n            }\n            else if (loadExtent[0] > projectionExtent[0] &&\n                loadExtent[2] > projectionExtent[2]) {\n                loadExtents.push([\n                    loadExtent[0] - worldWidth,\n                    loadExtent[1],\n                    loadExtent[2] - worldWidth,\n                    loadExtent[3],\n                ]);\n            }\n        }\n        if (!this.dirty_ &&\n            this.renderedResolution_ == resolution &&\n            this.renderedRevision_ == vectorLayerRevision &&\n            this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n            containsExtent(this.wrappedRenderedExtent_, extent)) {\n            if (!equals(this.renderedExtent_, renderedExtent)) {\n                this.hitDetectionImageData_ = null;\n                this.renderedExtent_ = renderedExtent;\n            }\n            this.renderedCenter_ = center;\n            this.replayGroupChanged = false;\n            return true;\n        }\n        this.replayGroup_ = null;\n        this.dirty_ = false;\n        var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n        var declutterBuilderGroup;\n        if (this.getLayer().getDeclutter()) {\n            declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n        }\n        var userProjection = getUserProjection();\n        var userTransform;\n        if (userProjection) {\n            for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n                vectorSource.loadFeatures(toUserExtent(loadExtents[i], projection), resolution, userProjection);\n            }\n            userTransform = getTransformFromProjections(userProjection, projection);\n        }\n        else {\n            for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n                vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n            }\n        }\n        var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n        var render = \n        /**\n         * @param {import(\"../../Feature.js\").default} feature Feature.\n         * @this {CanvasVectorLayerRenderer}\n         */\n        function (feature) {\n            var styles;\n            var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n            if (styleFunction) {\n                styles = styleFunction(feature, resolution);\n            }\n            if (styles) {\n                var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n                this.dirty_ = this.dirty_ || dirty;\n            }\n        }.bind(this);\n        var userExtent = toUserExtent(extent, projection);\n        /** @type {Array<import(\"../../Feature.js\").default>} */\n        var features = vectorSource.getFeaturesInExtent(userExtent);\n        if (vectorLayerRenderOrder) {\n            features.sort(vectorLayerRenderOrder);\n        }\n        for (var i = 0, ii = features.length; i < ii; ++i) {\n            render(features[i]);\n        }\n        this.renderedFeatures_ = features;\n        var replayGroupInstructions = replayGroup.finish();\n        var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n        if (declutterBuilderGroup) {\n            this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n        }\n        this.renderedResolution_ = resolution;\n        this.renderedRevision_ = vectorLayerRevision;\n        this.renderedRenderOrder_ = vectorLayerRenderOrder;\n        this.renderedExtent_ = renderedExtent;\n        this.wrappedRenderedExtent_ = extent;\n        this.renderedCenter_ = center;\n        this.renderedProjection_ = projection;\n        this.replayGroup_ = executorGroup;\n        this.hitDetectionImageData_ = null;\n        this.replayGroupChanged = true;\n        return true;\n    };\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @param {number} squaredTolerance Squared render tolerance.\n     * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n     * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n     * @return {boolean} `true` if an image is loading.\n     */\n    CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform, opt_declutterBuilderGroup) {\n        if (!styles) {\n            return false;\n        }\n        var loading = false;\n        if (Array.isArray(styles)) {\n            for (var i = 0, ii = styles.length; i < ii; ++i) {\n                loading =\n                    renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup) || loading;\n            }\n        }\n        else {\n            loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup);\n        }\n        return loading;\n    };\n    return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer));\nexport default CanvasVectorLayerRenderer;\n//# sourceMappingURL=VectorLayer.js.map"]},"metadata":{},"sourceType":"module"}