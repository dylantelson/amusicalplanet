{"ast":null,"code":"/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var i = 0;\n\n  for (var j = offset; j < end; j += stride) {\n    var x = flatCoordinates[j];\n    var y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\n\nexport function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  var anchorX = anchor[0];\n  var anchorY = anchor[1];\n  var i = 0;\n\n  for (var j = offset; j < end; j += stride) {\n    var deltaX = flatCoordinates[j] - anchorX;\n    var deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n\n    for (var k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n}\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\n\nexport function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var anchorX = anchor[0];\n  var anchorY = anchor[1];\n  var i = 0;\n\n  for (var j = offset; j < end; j += stride) {\n    var deltaX = flatCoordinates[j] - anchorX;\n    var deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n\n    for (var k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\n\nexport function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var i = 0;\n\n  for (var j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n\n    for (var k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n\n  return dest;\n}","map":{"version":3,"sources":["../../src/geom/flat/transform.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/geom/flat/transform\n */\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {\n    var dest = opt_dest ? opt_dest : [];\n    var i = 0;\n    for (var j = offset; j < end; j += stride) {\n        var x = flatCoordinates[j];\n        var y = flatCoordinates[j + 1];\n        dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n        dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n    }\n    if (opt_dest && dest.length != i) {\n        dest.length = i;\n    }\n    return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {\n    var dest = opt_dest ? opt_dest : [];\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var anchorX = anchor[0];\n    var anchorY = anchor[1];\n    var i = 0;\n    for (var j = offset; j < end; j += stride) {\n        var deltaX = flatCoordinates[j] - anchorX;\n        var deltaY = flatCoordinates[j + 1] - anchorY;\n        dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n        dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n        for (var k = j + 2; k < j + stride; ++k) {\n            dest[i++] = flatCoordinates[k];\n        }\n    }\n    if (opt_dest && dest.length != i) {\n        dest.length = i;\n    }\n    return dest;\n}\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {\n    var dest = opt_dest ? opt_dest : [];\n    var anchorX = anchor[0];\n    var anchorY = anchor[1];\n    var i = 0;\n    for (var j = offset; j < end; j += stride) {\n        var deltaX = flatCoordinates[j] - anchorX;\n        var deltaY = flatCoordinates[j + 1] - anchorY;\n        dest[i++] = anchorX + sx * deltaX;\n        dest[i++] = anchorY + sy * deltaY;\n        for (var k = j + 2; k < j + stride; ++k) {\n            dest[i++] = flatCoordinates[k];\n        }\n    }\n    if (opt_dest && dest.length != i) {\n        dest.length = i;\n    }\n    return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {\n    var dest = opt_dest ? opt_dest : [];\n    var i = 0;\n    for (var j = offset; j < end; j += stride) {\n        dest[i++] = flatCoordinates[j] + deltaX;\n        dest[i++] = flatCoordinates[j + 1] + deltaY;\n        for (var k = j + 2; k < j + stride; ++k) {\n            dest[i++] = flatCoordinates[k];\n        }\n    }\n    if (opt_dest && dest.length != i) {\n        dest.length = i;\n    }\n    return dest;\n}\n//# sourceMappingURL=transform.js.map"]},"metadata":{},"sourceType":"module"}