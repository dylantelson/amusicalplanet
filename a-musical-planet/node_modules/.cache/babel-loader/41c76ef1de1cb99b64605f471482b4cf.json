{"ast":null,"code":"/**\n * @module ol/featureloader\n */\nimport FormatType from './format/FormatType.js';\nimport { VOID } from './functions.js';\n/**\n *\n * @type {boolean}\n * @private\n */\n\nvar withCredentials = false;\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * load features.\n *\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\n * {@link module:ol/proj/Projection} for the projection, an optional success callback that should get\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\n * `'featuresloaderror'` events. `this` within the function is bound to the\n * {@link module:ol/source/Vector} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\n *           import(\"./extent.js\").Extent,\n *           number,\n *           import(\"./proj/Projection.js\").default,\n *           function(Array<import(\"./Feature.js\").default>): void=,\n *           function(): void=): void} FeatureLoader\n * @api\n */\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {function(Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default): void} success Success\n *      Function called with the loaded features and optionally with the data projection.\n * @param {function(): void} failure Failure\n *      Function called when loading failed.\n */\n\nexport function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n\n  if (format.getType() == FormatType.ARRAY_BUFFER) {\n    xhr.responseType = 'arraybuffer';\n  }\n\n  xhr.withCredentials = withCredentials;\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n\n  xhr.onload = function (event) {\n    // status will be 0 for file:// urls\n    if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n      var type = format.getType();\n      /** @type {Document|Node|Object|string|undefined} */\n\n      var source = void 0;\n\n      if (type == FormatType.JSON || type == FormatType.TEXT) {\n        source = xhr.responseText;\n      } else if (type == FormatType.XML) {\n        source = xhr.responseXML;\n\n        if (!source) {\n          source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n        }\n      } else if (type == FormatType.ARRAY_BUFFER) {\n        source = xhr.response;\n      }\n\n      if (source) {\n        success(format.readFeatures(source, {\n          extent: extent,\n          featureProjection: projection\n        }), format.readProjection(source));\n      } else {\n        failure();\n      }\n    } else {\n      failure();\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  xhr.onerror = failure;\n  xhr.send();\n}\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\n\nexport function xhr(url, format) {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\n   * @param {function(Array<import(\"./Feature.js\").default>): void} [success] Success\n   *      Function called when loading succeeded.\n   * @param {function(): void} [failure] Failure\n   *      Function called when loading failed.\n   * @this {import(\"./source/Vector\").default}\n   */\n  return function (extent, resolution, projection, success, failure) {\n    var source = this;\n    loadFeaturesXhr(url, format, extent, resolution, projection,\n    /**\n     * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n     * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n     * projection.\n     */\n    function (features, dataProjection) {\n      source.addFeatures(features);\n\n      if (success !== undefined) {\n        success(features);\n      }\n    },\n    /* FIXME handle error */\n    failure ? failure : VOID);\n  };\n}\n/**\n * Setter for the withCredentials configuration for the XHR.\n *\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\n * @api\n */\n\nexport function setWithCredentials(xhrWithCredentials) {\n  withCredentials = xhrWithCredentials;\n}","map":{"version":3,"sources":["src/featureloader.js"],"names":[],"mappings":"AAAA;;AAEG;AACH,OAAO,UAAP,MAAuB,wBAAvB;AACA,SAAQ,IAAR,QAAmB,gBAAnB;AAEA;;;;AAIG;;AACH,IAAI,eAAe,GAAG,KAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AAEH;;;;;;;;;;AAUG;;AAEH;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,eAAV,CACJ,GADI,EAEJ,MAFI,EAGJ,MAHI,EAIJ,UAJI,EAKJ,UALI,EAMJ,OANI,EAOJ,OAPI,EAOG;AAEP,MAAM,GAAG,GAAG,IAAI,cAAJ,EAAZ;AACA,EAAA,GAAG,CAAC,IAAJ,CACE,KADF,EAEE,OAAO,GAAP,KAAe,UAAf,GAA4B,GAAG,CAAC,MAAD,EAAS,UAAT,EAAqB,UAArB,CAA/B,GAAkE,GAFpE,EAGE,IAHF;;AAKA,MAAI,MAAM,CAAC,OAAP,MAAoB,UAAU,CAAC,YAAnC,EAAiD;AAC/C,IAAA,GAAG,CAAC,YAAJ,GAAmB,aAAnB;AACD;;AACD,EAAA,GAAG,CAAC,eAAJ,GAAsB,eAAtB;AACA;;;AAGG;;AACH,EAAA,GAAG,CAAC,MAAJ,GAAa,UAAU,KAAV,EAAe;AAC1B;AACA,QAAI,CAAC,GAAG,CAAC,MAAL,IAAgB,GAAG,CAAC,MAAJ,IAAc,GAAd,IAAqB,GAAG,CAAC,MAAJ,GAAa,GAAtD,EAA4D;AAC1D,UAAM,IAAI,GAAG,MAAM,CAAC,OAAP,EAAb;AACA;;AACA,UAAI,MAAM,GAAA,KAAA,CAAV;;AACA,UAAI,IAAI,IAAI,UAAU,CAAC,IAAnB,IAA2B,IAAI,IAAI,UAAU,CAAC,IAAlD,EAAwD;AACtD,QAAA,MAAM,GAAG,GAAG,CAAC,YAAb;AACD,OAFD,MAEO,IAAI,IAAI,IAAI,UAAU,CAAC,GAAvB,EAA4B;AACjC,QAAA,MAAM,GAAG,GAAG,CAAC,WAAb;;AACA,YAAI,CAAC,MAAL,EAAa;AACX,UAAA,MAAM,GAAG,IAAI,SAAJ,GAAgB,eAAhB,CACP,GAAG,CAAC,YADG,EAEP,iBAFO,CAAT;AAID;AACF,OARM,MAQA,IAAI,IAAI,IAAI,UAAU,CAAC,YAAvB,EAAqC;AAC1C,QAAA,MAAM,GAA+B,GAAG,CAAC,QAAzC;AACD;;AACD,UAAI,MAAJ,EAAY;AACV,QAAA,OAAO,CAGH,MAAM,CAAC,YAAP,CAAoB,MAApB,EAA4B;AAC1B,UAAA,MAAM,EAAE,MADkB;AAE1B,UAAA,iBAAiB,EAAE;AAFO,SAA5B,CAHG,EAQL,MAAM,CAAC,cAAP,CAAsB,MAAtB,CARK,CAAP;AAUD,OAXD,MAWO;AACL,QAAA,OAAO;AACR;AACF,KA/BD,MA+BO;AACL,MAAA,OAAO;AACR;AACF,GApCD;AAqCA;;AAEG;;;AACH,EAAA,GAAG,CAAC,OAAJ,GAAc,OAAd;AACA,EAAA,GAAG,CAAC,IAAJ;AACD;AAED;;;;;;;;AAQG;;AACH,OAAM,SAAU,GAAV,CAAc,GAAd,EAAmB,MAAnB,EAAyB;AAC7B;;;;;;;;;AASG;AACH,SAAO,UAAU,MAAV,EAAkB,UAAlB,EAA8B,UAA9B,EAA0C,OAA1C,EAAmD,OAAnD,EAA0D;AAC/D,QAAM,MAAM,GAAqD,IAAjE;AACA,IAAA,eAAe,CACb,GADa,EAEb,MAFa,EAGb,MAHa,EAIb,UAJa,EAKb,UALa;AAMb;;;;AAIG;AACH,cAAU,QAAV,EAAoB,cAApB,EAAkC;AAChC,MAAA,MAAM,CAAC,WAAP,CAAmB,QAAnB;;AACA,UAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,QAAA,OAAO,CAAC,QAAD,CAAP;AACD;AACF,KAhBY;AAiBb;AAAyB,IAAA,OAAO,GAAG,OAAH,GAAa,IAjBhC,CAAf;AAmBD,GArBD;AAsBD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,kBAAV,CAA6B,kBAA7B,EAA+C;AACnD,EAAA,eAAe,GAAG,kBAAlB;AACD","sourceRoot":"","sourcesContent":["/**\n * @module ol/featureloader\n */\nimport FormatType from './format/FormatType.js';\nimport { VOID } from './functions.js';\n/**\n *\n * @type {boolean}\n * @private\n */\nvar withCredentials = false;\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * load features.\n *\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\n * {@link module:ol/proj/Projection} for the projection, an optional success callback that should get\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\n * `'featuresloaderror'` events. `this` within the function is bound to the\n * {@link module:ol/source/Vector} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\n *           import(\"./extent.js\").Extent,\n *           number,\n *           import(\"./proj/Projection.js\").default,\n *           function(Array<import(\"./Feature.js\").default>): void=,\n *           function(): void=): void} FeatureLoader\n * @api\n */\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {function(Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default): void} success Success\n *      Function called with the loaded features and optionally with the data projection.\n * @param {function(): void} failure Failure\n *      Function called when loading failed.\n */\nexport function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n    if (format.getType() == FormatType.ARRAY_BUFFER) {\n        xhr.responseType = 'arraybuffer';\n    }\n    xhr.withCredentials = withCredentials;\n    /**\n     * @param {Event} event Event.\n     * @private\n     */\n    xhr.onload = function (event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\n            var type = format.getType();\n            /** @type {Document|Node|Object|string|undefined} */\n            var source = void 0;\n            if (type == FormatType.JSON || type == FormatType.TEXT) {\n                source = xhr.responseText;\n            }\n            else if (type == FormatType.XML) {\n                source = xhr.responseXML;\n                if (!source) {\n                    source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n                }\n            }\n            else if (type == FormatType.ARRAY_BUFFER) {\n                source = /** @type {ArrayBuffer} */ (xhr.response);\n            }\n            if (source) {\n                success(\n                /** @type {Array<import(\"./Feature.js\").default>} */\n                (format.readFeatures(source, {\n                    extent: extent,\n                    featureProjection: projection,\n                })), format.readProjection(source));\n            }\n            else {\n                failure();\n            }\n        }\n        else {\n            failure();\n        }\n    };\n    /**\n     * @private\n     */\n    xhr.onerror = failure;\n    xhr.send();\n}\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @param {function(Array<import(\"./Feature.js\").default>): void} [success] Success\n     *      Function called when loading succeeded.\n     * @param {function(): void} [failure] Failure\n     *      Function called when loading failed.\n     * @this {import(\"./source/Vector\").default}\n     */\n    return function (extent, resolution, projection, success, failure) {\n        var source = /** @type {import(\"./source/Vector\").default} */ (this);\n        loadFeaturesXhr(url, format, extent, resolution, projection, \n        /**\n         * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n         * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n         * projection.\n         */\n        function (features, dataProjection) {\n            source.addFeatures(features);\n            if (success !== undefined) {\n                success(features);\n            }\n        }, \n        /* FIXME handle error */ failure ? failure : VOID);\n    };\n}\n/**\n * Setter for the withCredentials configuration for the XHR.\n *\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\n * @api\n */\nexport function setWithCredentials(xhrWithCredentials) {\n    withCredentials = xhrWithCredentials;\n}\n//# sourceMappingURL=featureloader.js.map"]},"metadata":{},"sourceType":"module"}