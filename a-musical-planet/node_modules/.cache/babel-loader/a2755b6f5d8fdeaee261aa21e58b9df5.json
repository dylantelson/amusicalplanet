{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/GuessPopup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from \"react\"; // import { UserContext } from \"./App.js\";\n\nimport Summary from \"./Summary\";\nimport CustomiFrame from \"./CustomiFrame\";\nimport getMixedColor from \"./GetMixedColor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GuessPopup = ({\n  show,\n  currChosen,\n  currTrack,\n  nextTrack,\n  roundScore,\n  sessionScore,\n  sessionInfo,\n  newGame,\n  sendScoreToServer,\n  currMap\n}) => {\n  _s();\n\n  // const userData = useContext(UserContext);\n  // console.log(\"USER DATA\");\n  // console.log(userData);\n  const [gameFinished, setGameFinished] = useState(false);\n  const [showSummary, setShowSummary] = useState(false);\n\n  const correctText = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Good job!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"You correctly guessed \", currChosen]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n\n  const incorrectText = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Whoops!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"The answer was \", currTrack.location]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n\n  let correct = false;\n  if (currChosen === currTrack.location) correct = true;\n\n  if (show && !gameFinished && currTrack.round === 5) {\n    setGameFinished(true);\n    console.log(\"SENDING SCORE TO SERVER:\", sessionScore);\n    sendScoreToServer(sessionScore);\n  }\n\n  const summaryExit = () => {\n    setShowSummary(false);\n    setGameFinished(false);\n    newGame();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Summary, {\n      show: showSummary,\n      sessionScore: sessionScore,\n      sessionInfo: sessionInfo,\n      summaryExit: summaryExit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-container\" + (!show || showSummary ? \" hidden\" : \"\"),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"guess-popup\",\n        style: {\n          background: `#${getMixedColor(roundScore / 5000)}`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"indexText\",\n          children: [currTrack.round, \"/5\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popupText\",\n          children: [correct ? correctText : incorrectText, /*#__PURE__*/_jsxDEV(\"h3\", {\n            id: \"score\",\n            children: [\"Score: \", sessionScore, \" (+\", roundScore, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"song-info\",\n          children: /*#__PURE__*/_jsxDEV(CustomiFrame, {\n            src: `https://open.spotify.com/embed/track/${currTrack.id}`,\n            width: \"80%\",\n            height: \"300\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup-buttons\" + (!correct ? \" incorrect-text\" : \"\"),\n          children: currTrack.round < 5 ? /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              color: `#${getMixedColor(roundScore / 5000)}`\n            },\n            onClick: nextTrack,\n            children: \"NEXT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              color: `#${getMixedColor(roundScore / 5000)}`\n            },\n            onClick: () => setShowSummary(true),\n            children: \"SUMMARY\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GuessPopup, \"oAMuWgZFGEWwpNGRl3YLF70e4lE=\");\n\n_c = GuessPopup;\nexport default GuessPopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"GuessPopup\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/GuessPopup.js"],"names":["React","useState","useContext","useEffect","Summary","CustomiFrame","getMixedColor","GuessPopup","show","currChosen","currTrack","nextTrack","roundScore","sessionScore","sessionInfo","newGame","sendScoreToServer","currMap","gameFinished","setGameFinished","showSummary","setShowSummary","correctText","incorrectText","location","correct","round","console","log","summaryExit","background","id","color"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\n// import { UserContext } from \"./App.js\";\n\nimport Summary from \"./Summary\";\nimport CustomiFrame from \"./CustomiFrame\";\nimport getMixedColor from \"./GetMixedColor\";\n\nconst GuessPopup = ({\n  show,\n  currChosen,\n  currTrack,\n  nextTrack,\n  roundScore,\n  sessionScore,\n  sessionInfo,\n  newGame,\n  sendScoreToServer,\n  currMap,\n}) => {\n  // const userData = useContext(UserContext);\n  // console.log(\"USER DATA\");\n  // console.log(userData);\n\n  const [gameFinished, setGameFinished] = useState(false);\n  const [showSummary, setShowSummary] = useState(false);\n  const correctText = (\n    <div>\n      <h1>Good job!</h1>\n      <h3>You correctly guessed {currChosen}</h3>\n    </div>\n  );\n  const incorrectText = (\n    <div>\n      <h1>Whoops!</h1>\n      <h3>The answer was {currTrack.location}</h3>\n    </div>\n  );\n\n  let correct = false;\n  if (currChosen === currTrack.location) correct = true;\n\n  if (show && !gameFinished && currTrack.round === 5) {\n    setGameFinished(true);\n    console.log(\"SENDING SCORE TO SERVER:\", sessionScore);\n    sendScoreToServer(sessionScore);\n  }\n\n  const summaryExit = () => {\n    setShowSummary(false);\n    setGameFinished(false);\n    newGame();\n  };\n\n  return (\n    <>\n      <Summary\n        show={showSummary}\n        sessionScore={sessionScore}\n        sessionInfo={sessionInfo}\n        summaryExit={summaryExit}\n      />\n      <div\n        className={\"popup-container\" + (!show || showSummary ? \" hidden\" : \"\")}\n      >\n        <div\n          className={\"guess-popup\"}\n          style={{ background: `#${getMixedColor(roundScore / 5000)}` }}\n        >\n          <h3 className=\"indexText\">{currTrack.round}/5</h3>\n          <div className=\"popupText\">\n            {correct ? correctText : incorrectText}\n            <h3 id=\"score\">\n              Score: {sessionScore} (+{roundScore})\n            </h3>\n          </div>\n          <div className=\"song-info\">\n            <CustomiFrame\n              src={`https://open.spotify.com/embed/track/${currTrack.id}`}\n              width=\"80%\"\n              height=\"300\"\n            />\n            {/* <img\n            src={currTrack.image}\n            alt=\"Song Album\"\n            width=\"300\"\n            height=\"300\"\n          ></img>\n          <div className=\"text-div\">\n            <h3>{currTrack.name}</h3>\n            <h4>{currTrack.artist}</h4>\n            <h4>{currTrack.album}</h4>\n          </div> */}\n          </div>\n          <div\n            className={\"popup-buttons\" + (!correct ? \" incorrect-text\" : \"\")}\n          >\n            {/* <button>LIKE</button> */}\n            {/* <button>PLAY</button> */}\n            {currTrack.round < 5 ? (\n              <button\n                style={{ color: `#${getMixedColor(roundScore / 5000)}` }}\n                onClick={nextTrack}\n              >\n                NEXT\n              </button>\n            ) : (\n              <button\n                style={{ color: `#${getMixedColor(roundScore / 5000)}` }}\n                onClick={() => setShowSummary(true)}\n              >\n                SUMMARY\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default GuessPopup;\n"]},"metadata":{},"sourceType":"module"}