{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/Play.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\nimport MapPage from \"./MapPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Playlists = require(\"./Playlists.json\");\n\nconsole.log(Playlists);\n\nconst Play = props => {\n  _s();\n\n  const [currArtist, setCurrArtist] = useState(\"\");\n  const [currCountry, setCurrCountry] = useState(\"\");\n  const [currTrack, setCurrTrack] = useState(\"\");\n  const [currImage, setCurrImage] = useState(\"\");\n  const [redirect, setRedirect] = useState(\"\");\n  const [mapContent, setMapContent] = useState(\"\");\n  const [currChosen, setCurrChosen] = useState(\"\");\n  const audioRef = useRef(null); //const imageRef = useRef(null);\n  //props.spotifyApi.setAccessToken(props.token);\n\n  const getNewArtist = () => {\n    if (props.accessToken === null || props.accessToken === \"\") {\n      console.log(\"REDIRECTING\");\n      setRedirect(\"login\");\n      return;\n    }\n\n    const currPlaylistIndex = Math.floor(Math.random() * Playlists.length);\n    fetch(`https://api.spotify.com/v1/playlists/${Playlists[currPlaylistIndex]}`, {\n      headers: {\n        Authorization: \"Bearer \" + props.accessToken\n      }\n    }).then(response => response.json()).then(data => {\n      let track = \"\";\n      let artist = \"\";\n      let country = \"\";\n\n      while (track === \"\") {\n        const chosenIndex = Math.floor(Math.random() * data.tracks.items.length);\n        const possibleTrack = data.tracks.items[chosenIndex].track;\n\n        if (possibleTrack != null) {\n          track = possibleTrack;\n          artist = data.tracks.items[chosenIndex].track.artists[0].name;\n          country = data.name;\n        }\n      }\n\n      setCurrArtist(artist);\n      setCurrTrack(track.preview_url);\n      setCurrCountry(country);\n      setCurrImage(track.album.images[0].url);\n      audioRef.current.load();\n      audioRef.current.play();\n    });\n  };\n\n  const guessGiven = () => {\n    if (currCountry === currChosen) {\n      alert(`${currChosen} is correct!`);\n    } else {\n      alert(`You guessed ${currChosen} but the answer was ${currCountry}!`);\n    }\n\n    getNewArtist();\n  };\n\n  const goToMap = () => {\n    setRedirect(\"map\");\n  };\n\n  useEffect(() => {\n    getNewArtist();\n  }, []);\n  if (redirect === \"login\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 36\n  }, this);else if (redirect === \"map\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 39\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        id: \"music\",\n        ref: audioRef,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          volume: \"2\",\n          allow: \"autoplay\",\n          src: currTrack,\n          type: \"audio/mpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapPage, { ...props,\n      setTooltipContent: setMapContent,\n      setCurrChosen: setCurrChosen,\n      currChosen: currChosen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n      children: mapContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Curr Guess: \", currChosen]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: guessGiven,\n        children: \"Submit Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Play, \"LR2WvMPX3GY8CKYVK0kyKL+gKkY=\");\n\n_c = Play;\nexport default Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/Play.js"],"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactTooltip","MapPage","Playlists","require","console","log","Play","props","currArtist","setCurrArtist","currCountry","setCurrCountry","currTrack","setCurrTrack","currImage","setCurrImage","redirect","setRedirect","mapContent","setMapContent","currChosen","setCurrChosen","audioRef","getNewArtist","accessToken","currPlaylistIndex","Math","floor","random","length","fetch","headers","Authorization","then","response","json","data","track","artist","country","chosenIndex","tracks","items","possibleTrack","artists","name","preview_url","album","images","url","current","load","play","guessGiven","alert","goToMap"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,EAKEC,QALF,QAMO,kBANP;AAOA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,OAAOC,OAAP,MAAoB,WAApB;;;;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACAC,OAAO,CAACC,GAAR,CAAYH,SAAZ;;AACA,MAAMI,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACtB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACqB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACuB,SAAD,EAAYC,YAAZ,IAA4BxB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACyB,QAAD,EAAWC,WAAX,IAA0B1B,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM,CAAC2B,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC6B,UAAD,EAAaC,aAAb,IAA8B9B,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM+B,QAAQ,GAAG7B,MAAM,CAAC,IAAD,CAAvB,CAVsB,CAWtB;AACA;;AAEA,QAAM8B,YAAY,GAAG,MAAM;AACzB,QAAIhB,KAAK,CAACiB,WAAN,KAAsB,IAAtB,IAA8BjB,KAAK,CAACiB,WAAN,KAAsB,EAAxD,EAA4D;AAC1DpB,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAY,MAAAA,WAAW,CAAC,OAAD,CAAX;AACA;AACD;;AAED,UAAMQ,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB1B,SAAS,CAAC2B,MAArC,CAA1B;AACAC,IAAAA,KAAK,CACF,wCAAuC5B,SAAS,CAACuB,iBAAD,CAAoB,EADlE,EAEH;AACEM,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAYzB,KAAK,CAACiB;AAAnC;AADX,KAFG,CAAL,CAMGS,IANH,CAMSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EANtB,EAOGF,IAPH,CAOSG,IAAD,IAAU;AACd,UAAIC,KAAK,GAAG,EAAZ;AACA,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIC,OAAO,GAAG,EAAd;;AACA,aAAOF,KAAK,KAAK,EAAjB,EAAqB;AACnB,cAAMG,WAAW,GAAGd,IAAI,CAACC,KAAL,CAClBD,IAAI,CAACE,MAAL,KAAgBQ,IAAI,CAACK,MAAL,CAAYC,KAAZ,CAAkBb,MADhB,CAApB;AAGA,cAAMc,aAAa,GAAGP,IAAI,CAACK,MAAL,CAAYC,KAAZ,CAAkBF,WAAlB,EAA+BH,KAArD;;AACA,YAAIM,aAAa,IAAI,IAArB,EAA2B;AACzBN,UAAAA,KAAK,GAAGM,aAAR;AACAL,UAAAA,MAAM,GAAGF,IAAI,CAACK,MAAL,CAAYC,KAAZ,CAAkBF,WAAlB,EAA+BH,KAA/B,CAAqCO,OAArC,CAA6C,CAA7C,EAAgDC,IAAzD;AACAN,UAAAA,OAAO,GAAGH,IAAI,CAACS,IAAf;AACD;AACF;;AACDpC,MAAAA,aAAa,CAAC6B,MAAD,CAAb;AACAzB,MAAAA,YAAY,CAACwB,KAAK,CAACS,WAAP,CAAZ;AACAnC,MAAAA,cAAc,CAAC4B,OAAD,CAAd;AACAxB,MAAAA,YAAY,CAACsB,KAAK,CAACU,KAAN,CAAYC,MAAZ,CAAmB,CAAnB,EAAsBC,GAAvB,CAAZ;AACA3B,MAAAA,QAAQ,CAAC4B,OAAT,CAAiBC,IAAjB;AACA7B,MAAAA,QAAQ,CAAC4B,OAAT,CAAiBE,IAAjB;AACD,KA5BH;AA6BD,GArCD;;AAuCA,QAAMC,UAAU,GAAG,MAAM;AACvB,QAAI3C,WAAW,KAAKU,UAApB,EAAgC;AAC9BkC,MAAAA,KAAK,CAAE,GAAElC,UAAW,cAAf,CAAL;AACD,KAFD,MAEO;AACLkC,MAAAA,KAAK,CAAE,eAAclC,UAAW,uBAAsBV,WAAY,GAA7D,CAAL;AACD;;AACDa,IAAAA,YAAY;AACb,GAPD;;AASA,QAAMgC,OAAO,GAAG,MAAM;AACpBtC,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAFD;;AAIAzB,EAAAA,SAAS,CAAC,MAAM;AACd+B,IAAAA,YAAY;AACb,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAIP,QAAQ,KAAK,OAAjB,EAA0B,oBAAO,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP,CAA1B,KACK,IAAIA,QAAQ,KAAK,KAAjB,EAAwB,oBAAO,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AAC7B,sBACE;AAAA,4BAUE;AAAA,6BACE;AAAO,QAAA,QAAQ,MAAf;AAAgB,QAAA,EAAE,EAAC,OAAnB;AAA2B,QAAA,GAAG,EAAEM,QAAhC;AAAA,+BACE;AACE,UAAA,MAAM,EAAC,GADT;AAEE,UAAA,KAAK,EAAC,UAFR;AAGE,UAAA,GAAG,EAAEV,SAHP;AAIE,UAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAVF,eAqBE,QAAC,OAAD,OACML,KADN;AAEE,MAAA,iBAAiB,EAAEY,aAFrB;AAGE,MAAA,aAAa,EAAEE,aAHjB;AAIE,MAAA,UAAU,EAAED;AAJd;AAAA;AAAA;AAAA;AAAA,YArBF,eA2BE,QAAC,YAAD;AAAA,gBAAeF;AAAf;AAAA;AAAA;AAAA;AAAA,YA3BF,eA4BE;AAAA,6BACE;AAAA,mCAAiBE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA5BF,eA+BE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEiC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA/BF;AAAA,kBADF;AA2CD,CAnHD;;GAAM/C,I;;KAAAA,I;AAqHN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport MapPage from \"./MapPage\";\n\nconst Playlists = require(\"./Playlists.json\");\nconsole.log(Playlists);\nconst Play = (props) => {\n  const [currArtist, setCurrArtist] = useState(\"\");\n  const [currCountry, setCurrCountry] = useState(\"\");\n  const [currTrack, setCurrTrack] = useState(\"\");\n  const [currImage, setCurrImage] = useState(\"\");\n  const [redirect, setRedirect] = useState(\"\");\n\n  const [mapContent, setMapContent] = useState(\"\");\n  const [currChosen, setCurrChosen] = useState(\"\");\n\n  const audioRef = useRef(null);\n  //const imageRef = useRef(null);\n  //props.spotifyApi.setAccessToken(props.token);\n\n  const getNewArtist = () => {\n    if (props.accessToken === null || props.accessToken === \"\") {\n      console.log(\"REDIRECTING\");\n      setRedirect(\"login\");\n      return;\n    }\n\n    const currPlaylistIndex = Math.floor(Math.random() * Playlists.length);\n    fetch(\n      `https://api.spotify.com/v1/playlists/${Playlists[currPlaylistIndex]}`,\n      {\n        headers: { Authorization: \"Bearer \" + props.accessToken },\n      }\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        let track = \"\";\n        let artist = \"\";\n        let country = \"\";\n        while (track === \"\") {\n          const chosenIndex = Math.floor(\n            Math.random() * data.tracks.items.length\n          );\n          const possibleTrack = data.tracks.items[chosenIndex].track;\n          if (possibleTrack != null) {\n            track = possibleTrack;\n            artist = data.tracks.items[chosenIndex].track.artists[0].name;\n            country = data.name;\n          }\n        }\n        setCurrArtist(artist);\n        setCurrTrack(track.preview_url);\n        setCurrCountry(country);\n        setCurrImage(track.album.images[0].url);\n        audioRef.current.load();\n        audioRef.current.play();\n      });\n  };\n\n  const guessGiven = () => {\n    if (currCountry === currChosen) {\n      alert(`${currChosen} is correct!`);\n    } else {\n      alert(`You guessed ${currChosen} but the answer was ${currCountry}!`);\n    }\n    getNewArtist();\n  };\n\n  const goToMap = () => {\n    setRedirect(\"map\");\n  };\n\n  useEffect(() => {\n    getNewArtist();\n  }, []);\n\n  if (redirect === \"login\") return <Redirect to=\"/login\" />;\n  else if (redirect === \"map\") return <Redirect to=\"/map\" />;\n  return (\n    <>\n      {/* <div>\n        <span>\n          <h2>Artist: {currArtist}</h2>\n          <h2>Country: {currCountry}</h2>\n        </span>\n        <span>\n          <img src={currImage} alt=\"Album image\" width=\"300\" height=\"300\"></img>\n        </span>\n      </div> */}\n      <div>\n        <audio controls id=\"music\" ref={audioRef}>\n          <source\n            volume=\"2\"\n            allow=\"autoplay\"\n            src={currTrack}\n            type=\"audio/mpeg\"\n          ></source>\n          {/* Your browser does not support the audio element. */}\n        </audio>\n      </div>\n      <MapPage\n        {...props}\n        setTooltipContent={setMapContent}\n        setCurrChosen={setCurrChosen}\n        currChosen={currChosen}\n      />\n      <ReactTooltip>{mapContent}</ReactTooltip>\n      <div>\n        <h2>Curr Guess: {currChosen}</h2>\n      </div>\n      <div>\n        <button onClick={guessGiven}>Submit Guess</button>\n      </div>\n      {/* <div>\n        <button onClick={getNewArtist}>New Song</button>\n      </div>\n      <div>\n        <button onClick={goToMap}>Map</button>\n      </div> */}\n    </>\n  );\n};\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}