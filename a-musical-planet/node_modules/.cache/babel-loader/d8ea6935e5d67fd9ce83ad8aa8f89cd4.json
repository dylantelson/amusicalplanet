{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragBox\n */\n// FIXME draw drag box\n\n\nimport Event from '../events/Event.js';\nimport PointerInteraction from './Pointer.js';\nimport RenderBox from '../render/Box.js';\nimport { mouseActionButton } from '../events/condition.js';\n/**\n * A function that takes a {@link module:ol/MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\n * true should be returned.\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link ol/events/condition~mouseActionButton}.\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\n * `boxEndCondition` function.\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\n * Default is `true` if the area of the box is bigger than the `minArea` option.\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\n * before `boxend` is fired.\n */\n\n/**\n * @enum {string}\n */\n\nvar DragBoxEventType = {\n  /**\n   * Triggered upon drag box start.\n   * @event DragBoxEvent#boxstart\n   * @api\n   */\n  BOXSTART: 'boxstart',\n\n  /**\n   * Triggered on drag when box is active.\n   * @event DragBoxEvent#boxdrag\n   * @api\n   */\n  BOXDRAG: 'boxdrag',\n\n  /**\n   * Triggered upon drag box end.\n   * @event DragBoxEvent#boxend\n   * @api\n   */\n  BOXEND: 'boxend',\n\n  /**\n   * Triggered upon drag box canceled.\n   * @event DragBoxEvent#boxcancel\n   * @api\n   */\n  BOXCANCEL: 'boxcancel'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of\n * this type.\n */\n\nvar DragBoxEvent = function (_super) {\n  __extends(DragBoxEvent, _super);\n  /**\n   * @param {string} type The event type.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\n   */\n\n\n  function DragBoxEvent(type, coordinate, mapBrowserEvent) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The coordinate of the drag event.\n     * @const\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @api\n     */\n\n\n    _this.coordinate = coordinate;\n    /**\n     * @const\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n\n    _this.mapBrowserEvent = mapBrowserEvent;\n    return _this;\n  }\n\n  return DragBoxEvent;\n}(Event);\n\nexport { DragBoxEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend', DragBoxEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\n */\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the shift or other key is held down. This is used, for example,\n * for zooming to a specific area of the map\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\n * {@link module:ol/interaction/DragRotateAndZoom}).\n *\n * @fires DragBoxEvent\n * @api\n */\n\nvar DragBox = function (_super) {\n  __extends(DragBox, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function DragBox(opt_options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {DragBoxOnSignature<import(\"../Observable\").OnReturn>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {DragBoxOnSignature<import(\"../Observable\").OnReturn>}\n     */\n\n    _this.once;\n    /***\n     * @type {DragBoxOnSignature<void>}\n     */\n\n    _this.un;\n    var options = opt_options ? opt_options : {};\n    /**\n     * @type {import(\"../render/Box.js\").default}\n     * @private\n     */\n\n    _this.box_ = new RenderBox(options.className || 'ol-dragbox');\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.minArea_ = options.minArea !== undefined ? options.minArea : 64;\n\n    if (options.onBoxEnd) {\n      _this.onBoxEnd = options.onBoxEnd;\n    }\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n\n    _this.startPixel_ = null;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : mouseActionButton;\n    /**\n     * @private\n     * @type {EndCondition}\n     */\n\n    _this.boxEndCondition_ = options.boxEndCondition ? options.boxEndCondition : _this.defaultBoxEndCondition;\n    return _this;\n  }\n  /**\n   * The default condition for determining whether the boxend event\n   * should fire.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\n   *     leading to the box end.\n   * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\n   * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\n   * @return {boolean} Whether or not the boxend condition should be fired.\n   */\n\n\n  DragBox.prototype.defaultBoxEndCondition = function (mapBrowserEvent, startPixel, endPixel) {\n    var width = endPixel[0] - startPixel[0];\n    var height = endPixel[1] - startPixel[1];\n    return width * width + height * height >= this.minArea_;\n  };\n  /**\n   * Returns geometry of last drawn box.\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   * @api\n   */\n\n\n  DragBox.prototype.getGeometry = function () {\n    return this.box_.getGeometry();\n  };\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  DragBox.prototype.handleDragEvent = function (mapBrowserEvent) {\n    this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\n    this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragBox.prototype.handleUpEvent = function (mapBrowserEvent) {\n    this.box_.setMap(null);\n    var completeBox = this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel);\n\n    if (completeBox) {\n      this.onBoxEnd(mapBrowserEvent);\n    }\n\n    this.dispatchEvent(new DragBoxEvent(completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL, mapBrowserEvent.coordinate, mapBrowserEvent));\n    return false;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragBox.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (this.condition_(mapBrowserEvent)) {\n      this.startPixel_ = mapBrowserEvent.pixel;\n      this.box_.setMap(mapBrowserEvent.map);\n      this.box_.setPixels(this.startPixel_, this.startPixel_);\n      this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Function to execute just before `onboxend` is fired\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */\n\n\n  DragBox.prototype.onBoxEnd = function (event) {};\n\n  return DragBox;\n}(PointerInteraction);\n\nexport default DragBox;","map":{"version":3,"sources":["../src/interaction/DragBox.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/DragBox\n */\n// FIXME draw drag box\nimport Event from '../events/Event.js';\nimport PointerInteraction from './Pointer.js';\nimport RenderBox from '../render/Box.js';\nimport { mouseActionButton } from '../events/condition.js';\n/**\n * A function that takes a {@link module:ol/MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\n * true should be returned.\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link ol/events/condition~mouseActionButton}.\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\n * `boxEndCondition` function.\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\n * Default is `true` if the area of the box is bigger than the `minArea` option.\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\n * before `boxend` is fired.\n */\n/**\n * @enum {string}\n */\nvar DragBoxEventType = {\n    /**\n     * Triggered upon drag box start.\n     * @event DragBoxEvent#boxstart\n     * @api\n     */\n    BOXSTART: 'boxstart',\n    /**\n     * Triggered on drag when box is active.\n     * @event DragBoxEvent#boxdrag\n     * @api\n     */\n    BOXDRAG: 'boxdrag',\n    /**\n     * Triggered upon drag box end.\n     * @event DragBoxEvent#boxend\n     * @api\n     */\n    BOXEND: 'boxend',\n    /**\n     * Triggered upon drag box canceled.\n     * @event DragBoxEvent#boxcancel\n     * @api\n     */\n    BOXCANCEL: 'boxcancel',\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of\n * this type.\n */\nvar DragBoxEvent = /** @class */ (function (_super) {\n    __extends(DragBoxEvent, _super);\n    /**\n     * @param {string} type The event type.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\n     */\n    function DragBoxEvent(type, coordinate, mapBrowserEvent) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The coordinate of the drag event.\n         * @const\n         * @type {import(\"../coordinate.js\").Coordinate}\n         * @api\n         */\n        _this.coordinate = coordinate;\n        /**\n         * @const\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @api\n         */\n        _this.mapBrowserEvent = mapBrowserEvent;\n        return _this;\n    }\n    return DragBoxEvent;\n}(Event));\nexport { DragBoxEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend', DragBoxEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\n */\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the shift or other key is held down. This is used, for example,\n * for zooming to a specific area of the map\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\n * {@link module:ol/interaction/DragRotateAndZoom}).\n *\n * @fires DragBoxEvent\n * @api\n */\nvar DragBox = /** @class */ (function (_super) {\n    __extends(DragBox, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function DragBox(opt_options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {DragBoxOnSignature<import(\"../Observable\").OnReturn>}\n         */\n        _this.on;\n        /***\n         * @type {DragBoxOnSignature<import(\"../Observable\").OnReturn>}\n         */\n        _this.once;\n        /***\n         * @type {DragBoxOnSignature<void>}\n         */\n        _this.un;\n        var options = opt_options ? opt_options : {};\n        /**\n         * @type {import(\"../render/Box.js\").default}\n         * @private\n         */\n        _this.box_ = new RenderBox(options.className || 'ol-dragbox');\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.minArea_ = options.minArea !== undefined ? options.minArea : 64;\n        if (options.onBoxEnd) {\n            _this.onBoxEnd = options.onBoxEnd;\n        }\n        /**\n         * @type {import(\"../pixel.js\").Pixel}\n         * @private\n         */\n        _this.startPixel_ = null;\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.condition ? options.condition : mouseActionButton;\n        /**\n         * @private\n         * @type {EndCondition}\n         */\n        _this.boxEndCondition_ = options.boxEndCondition\n            ? options.boxEndCondition\n            : _this.defaultBoxEndCondition;\n        return _this;\n    }\n    /**\n     * The default condition for determining whether the boxend event\n     * should fire.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\n     *     leading to the box end.\n     * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\n     * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\n     * @return {boolean} Whether or not the boxend condition should be fired.\n     */\n    DragBox.prototype.defaultBoxEndCondition = function (mapBrowserEvent, startPixel, endPixel) {\n        var width = endPixel[0] - startPixel[0];\n        var height = endPixel[1] - startPixel[1];\n        return width * width + height * height >= this.minArea_;\n    };\n    /**\n     * Returns geometry of last drawn box.\n     * @return {import(\"../geom/Polygon.js\").default} Geometry.\n     * @api\n     */\n    DragBox.prototype.getGeometry = function () {\n        return this.box_.getGeometry();\n    };\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     */\n    DragBox.prototype.handleDragEvent = function (mapBrowserEvent) {\n        this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\n        this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    DragBox.prototype.handleUpEvent = function (mapBrowserEvent) {\n        this.box_.setMap(null);\n        var completeBox = this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel);\n        if (completeBox) {\n            this.onBoxEnd(mapBrowserEvent);\n        }\n        this.dispatchEvent(new DragBoxEvent(completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL, mapBrowserEvent.coordinate, mapBrowserEvent));\n        return false;\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    DragBox.prototype.handleDownEvent = function (mapBrowserEvent) {\n        if (this.condition_(mapBrowserEvent)) {\n            this.startPixel_ = mapBrowserEvent.pixel;\n            this.box_.setMap(mapBrowserEvent.map);\n            this.box_.setPixels(this.startPixel_, this.startPixel_);\n            this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Function to execute just before `onboxend` is fired\n     * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n     */\n    DragBox.prototype.onBoxEnd = function (event) { };\n    return DragBox;\n}(PointerInteraction));\nexport default DragBox;\n//# sourceMappingURL=DragBox.js.map"]},"metadata":{},"sourceType":"module"}