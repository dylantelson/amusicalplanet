{"ast":null,"code":"/**\n * @module ol/structs/LRUCache\n */\nimport { assert } from '../asserts.js';\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\n\nvar LRUCache = function () {\n  /**\n   * @param {number} [opt_highWaterMark] High water mark.\n   */\n  function LRUCache(opt_highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.count_ = 0;\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n\n    this.entries_ = {};\n    /**\n     * @private\n     * @type {?Entry}\n     */\n\n    this.oldest_ = null;\n    /**\n     * @private\n     * @type {?Entry}\n     */\n\n    this.newest_ = null;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  LRUCache.prototype.canExpireCache = function () {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  LRUCache.prototype.clear = function () {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  };\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n\n\n  LRUCache.prototype.containsKey = function (key) {\n    return this.entries_.hasOwnProperty(key);\n  };\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n\n\n  LRUCache.prototype.forEach = function (f) {\n    var entry = this.oldest_;\n\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  };\n  /**\n   * @param {string} key Key.\n   * @param {*} [opt_options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n\n\n  LRUCache.prototype.get = function (key, opt_options) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = this.oldest_.newer;\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  };\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n\n\n  LRUCache.prototype.remove = function (key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      this.newest_ = entry.older;\n\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = entry.newer;\n\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @return {number} Count.\n   */\n\n\n  LRUCache.prototype.getCount = function () {\n    return this.count_;\n  };\n  /**\n   * @return {Array<string>} Keys.\n   */\n\n\n  LRUCache.prototype.getKeys = function () {\n    var keys = new Array(this.count_);\n    var i = 0;\n    var entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n\n    return keys;\n  };\n  /**\n   * @return {Array<T>} Values.\n   */\n\n\n  LRUCache.prototype.getValues = function () {\n    var values = new Array(this.count_);\n    var i = 0;\n    var entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n\n    return values;\n  };\n  /**\n   * @return {T} Last value.\n   */\n\n\n  LRUCache.prototype.peekLast = function () {\n    return this.oldest_.value_;\n  };\n  /**\n   * @return {string} Last key.\n   */\n\n\n  LRUCache.prototype.peekLastKey = function () {\n    return this.oldest_.key_;\n  };\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n\n\n  LRUCache.prototype.peekFirstKey = function () {\n    return this.newest_.key_;\n  };\n  /**\n   * @return {T} value Value.\n   */\n\n\n  LRUCache.prototype.pop = function () {\n    var entry = this.oldest_;\n    delete this.entries_[entry.key_];\n\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n\n    this.oldest_ = entry.newer;\n\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  LRUCache.prototype.replace = function (key, value) {\n    this.get(key); // update `newest_`\n\n    this.entries_[key].value_ = value;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  LRUCache.prototype.set = function (key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n\n    var entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    };\n\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  };\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n\n\n  LRUCache.prototype.setSize = function (size) {\n    this.highWaterMark = size;\n  };\n\n  return LRUCache;\n}();\n\nexport default LRUCache;","map":{"version":3,"sources":["../src/structs/LRUCache.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/structs/LRUCache\n */\nimport { assert } from '../asserts.js';\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nvar LRUCache = /** @class */ (function () {\n    /**\n     * @param {number} [opt_highWaterMark] High water mark.\n     */\n    function LRUCache(opt_highWaterMark) {\n        /**\n         * Desired max cache size after expireCache(). If set to 0, no cache entries\n         * will be pruned at all.\n         * @type {number}\n         */\n        this.highWaterMark =\n            opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.count_ = 0;\n        /**\n         * @private\n         * @type {!Object<string, Entry>}\n         */\n        this.entries_ = {};\n        /**\n         * @private\n         * @type {?Entry}\n         */\n        this.oldest_ = null;\n        /**\n         * @private\n         * @type {?Entry}\n         */\n        this.newest_ = null;\n    }\n    /**\n     * @return {boolean} Can expire cache.\n     */\n    LRUCache.prototype.canExpireCache = function () {\n        return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n    };\n    /**\n     * FIXME empty description for jsdoc\n     */\n    LRUCache.prototype.clear = function () {\n        this.count_ = 0;\n        this.entries_ = {};\n        this.oldest_ = null;\n        this.newest_ = null;\n    };\n    /**\n     * @param {string} key Key.\n     * @return {boolean} Contains key.\n     */\n    LRUCache.prototype.containsKey = function (key) {\n        return this.entries_.hasOwnProperty(key);\n    };\n    /**\n     * @param {function(T, string, LRUCache<T>): ?} f The function\n     *     to call for every entry from the oldest to the newer. This function takes\n     *     3 arguments (the entry value, the entry key and the LRUCache object).\n     *     The return value is ignored.\n     */\n    LRUCache.prototype.forEach = function (f) {\n        var entry = this.oldest_;\n        while (entry) {\n            f(entry.value_, entry.key_, this);\n            entry = entry.newer;\n        }\n    };\n    /**\n     * @param {string} key Key.\n     * @param {*} [opt_options] Options (reserved for subclasses).\n     * @return {T} Value.\n     */\n    LRUCache.prototype.get = function (key, opt_options) {\n        var entry = this.entries_[key];\n        assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n        if (entry === this.newest_) {\n            return entry.value_;\n        }\n        else if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n            this.oldest_.older = null;\n        }\n        else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        entry.newer = null;\n        entry.older = this.newest_;\n        this.newest_.newer = entry;\n        this.newest_ = entry;\n        return entry.value_;\n    };\n    /**\n     * Remove an entry from the cache.\n     * @param {string} key The entry key.\n     * @return {T} The removed entry.\n     */\n    LRUCache.prototype.remove = function (key) {\n        var entry = this.entries_[key];\n        assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n        if (entry === this.newest_) {\n            this.newest_ = /** @type {Entry} */ (entry.older);\n            if (this.newest_) {\n                this.newest_.newer = null;\n            }\n        }\n        else if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ (entry.newer);\n            if (this.oldest_) {\n                this.oldest_.older = null;\n            }\n        }\n        else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        delete this.entries_[key];\n        --this.count_;\n        return entry.value_;\n    };\n    /**\n     * @return {number} Count.\n     */\n    LRUCache.prototype.getCount = function () {\n        return this.count_;\n    };\n    /**\n     * @return {Array<string>} Keys.\n     */\n    LRUCache.prototype.getKeys = function () {\n        var keys = new Array(this.count_);\n        var i = 0;\n        var entry;\n        for (entry = this.newest_; entry; entry = entry.older) {\n            keys[i++] = entry.key_;\n        }\n        return keys;\n    };\n    /**\n     * @return {Array<T>} Values.\n     */\n    LRUCache.prototype.getValues = function () {\n        var values = new Array(this.count_);\n        var i = 0;\n        var entry;\n        for (entry = this.newest_; entry; entry = entry.older) {\n            values[i++] = entry.value_;\n        }\n        return values;\n    };\n    /**\n     * @return {T} Last value.\n     */\n    LRUCache.prototype.peekLast = function () {\n        return this.oldest_.value_;\n    };\n    /**\n     * @return {string} Last key.\n     */\n    LRUCache.prototype.peekLastKey = function () {\n        return this.oldest_.key_;\n    };\n    /**\n     * Get the key of the newest item in the cache.  Throws if the cache is empty.\n     * @return {string} The newest key.\n     */\n    LRUCache.prototype.peekFirstKey = function () {\n        return this.newest_.key_;\n    };\n    /**\n     * @return {T} value Value.\n     */\n    LRUCache.prototype.pop = function () {\n        var entry = this.oldest_;\n        delete this.entries_[entry.key_];\n        if (entry.newer) {\n            entry.newer.older = null;\n        }\n        this.oldest_ = /** @type {Entry} */ (entry.newer);\n        if (!this.oldest_) {\n            this.newest_ = null;\n        }\n        --this.count_;\n        return entry.value_;\n    };\n    /**\n     * @param {string} key Key.\n     * @param {T} value Value.\n     */\n    LRUCache.prototype.replace = function (key, value) {\n        this.get(key); // update `newest_`\n        this.entries_[key].value_ = value;\n    };\n    /**\n     * @param {string} key Key.\n     * @param {T} value Value.\n     */\n    LRUCache.prototype.set = function (key, value) {\n        assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n        var entry = {\n            key_: key,\n            newer: null,\n            older: this.newest_,\n            value_: value,\n        };\n        if (!this.newest_) {\n            this.oldest_ = entry;\n        }\n        else {\n            this.newest_.newer = entry;\n        }\n        this.newest_ = entry;\n        this.entries_[key] = entry;\n        ++this.count_;\n    };\n    /**\n     * Set a maximum number of entries for the cache.\n     * @param {number} size Cache size.\n     * @api\n     */\n    LRUCache.prototype.setSize = function (size) {\n        this.highWaterMark = size;\n    };\n    return LRUCache;\n}());\nexport default LRUCache;\n//# sourceMappingURL=LRUCache.js.map"]},"metadata":{},"sourceType":"module"}