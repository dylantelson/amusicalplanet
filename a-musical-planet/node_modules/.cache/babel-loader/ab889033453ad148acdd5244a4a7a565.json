{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/VectorRenderTile\n */\n\n\nimport Tile from './Tile.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { getUid } from './util.js';\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\n\nvar canvasPool = [];\n\nvar VectorRenderTile = function (_super) {\n  __extends(VectorRenderTile, _super);\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\n   * to get source tiles for this tile.\n   */\n\n\n  function VectorRenderTile(tileCoord, state, urlTileCoord, getSourceTiles) {\n    var _this = _super.call(this, tileCoord, state, {\n      transition: 0\n    }) || this;\n    /**\n     * @private\n     * @type {!Object<string, CanvasRenderingContext2D>}\n     */\n\n\n    _this.context_ = {};\n    /**\n     * Executor groups by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n\n    _this.executorGroups = {};\n    /**\n     * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n\n    _this.declutterExecutorGroups = {};\n    /**\n     * Number of loading source tiles. Read/written by the source.\n     * @type {number}\n     */\n\n    _this.loadingSourceTiles = 0;\n    /**\n     * @type {Object<number, ImageData>}\n     */\n\n    _this.hitDetectionImageData = {};\n    /**\n     * @private\n     * @type {!Object<string, ReplayState>}\n     */\n\n    _this.replayState_ = {};\n    /**\n     * @type {Array<import(\"./VectorTile.js\").default>}\n     */\n\n    _this.sourceTiles = [];\n    /**\n     * @type {Object<string, boolean>}\n     */\n\n    _this.errorTileKeys = {};\n    /**\n     * @type {number}\n     */\n\n    _this.wantedResolution;\n    /**\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\n     */\n\n    _this.getSourceTiles = getSourceTiles.bind(undefined, _this);\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n\n    _this.wrappedTileCoord = urlTileCoord;\n    return _this;\n  }\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {CanvasRenderingContext2D} The rendering context.\n   */\n\n\n  VectorRenderTile.prototype.getContext = function (layer) {\n    var key = getUid(layer);\n\n    if (!(key in this.context_)) {\n      this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n    }\n\n    return this.context_[key];\n  };\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {boolean} Tile has a rendering context for the given layer.\n   */\n\n\n  VectorRenderTile.prototype.hasContext = function (layer) {\n    return getUid(layer) in this.context_;\n  };\n  /**\n   * Get the Canvas for this tile.\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n\n\n  VectorRenderTile.prototype.getImage = function (layer) {\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n  };\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {ReplayState} The replay state.\n   */\n\n\n  VectorRenderTile.prototype.getReplayState = function (layer) {\n    var key = getUid(layer);\n\n    if (!(key in this.replayState_)) {\n      this.replayState_[key] = {\n        dirty: false,\n        renderedRenderOrder: null,\n        renderedResolution: NaN,\n        renderedRevision: -1,\n        renderedTileResolution: NaN,\n        renderedTileRevision: -1,\n        renderedTileZ: -1\n      };\n    }\n\n    return this.replayState_[key];\n  };\n  /**\n   * Load the tile.\n   */\n\n\n  VectorRenderTile.prototype.load = function () {\n    this.getSourceTiles();\n  };\n  /**\n   * Remove from the cache due to expiry\n   */\n\n\n  VectorRenderTile.prototype.release = function () {\n    for (var key in this.context_) {\n      canvasPool.push(this.context_[key].canvas);\n      delete this.context_[key];\n    }\n\n    _super.prototype.release.call(this);\n  };\n\n  return VectorRenderTile;\n}(Tile);\n\nexport default VectorRenderTile;","map":{"version":3,"sources":["src/VectorRenderTile.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/VectorRenderTile\n */\nimport Tile from './Tile.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { getUid } from './util.js';\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nvar canvasPool = [];\nvar VectorRenderTile = /** @class */ (function (_super) {\n    __extends(VectorRenderTile, _super);\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"./TileState.js\").default} state State.\n     * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n     * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\n     * to get source tiles for this tile.\n     */\n    function VectorRenderTile(tileCoord, state, urlTileCoord, getSourceTiles) {\n        var _this = _super.call(this, tileCoord, state, { transition: 0 }) || this;\n        /**\n         * @private\n         * @type {!Object<string, CanvasRenderingContext2D>}\n         */\n        _this.context_ = {};\n        /**\n         * Executor groups by layer uid. Entries are read/written by the renderer.\n         * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n         */\n        _this.executorGroups = {};\n        /**\n         * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\n         * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n         */\n        _this.declutterExecutorGroups = {};\n        /**\n         * Number of loading source tiles. Read/written by the source.\n         * @type {number}\n         */\n        _this.loadingSourceTiles = 0;\n        /**\n         * @type {Object<number, ImageData>}\n         */\n        _this.hitDetectionImageData = {};\n        /**\n         * @private\n         * @type {!Object<string, ReplayState>}\n         */\n        _this.replayState_ = {};\n        /**\n         * @type {Array<import(\"./VectorTile.js\").default>}\n         */\n        _this.sourceTiles = [];\n        /**\n         * @type {Object<string, boolean>}\n         */\n        _this.errorTileKeys = {};\n        /**\n         * @type {number}\n         */\n        _this.wantedResolution;\n        /**\n         * @type {!function():Array<import(\"./VectorTile.js\").default>}\n         */\n        _this.getSourceTiles = getSourceTiles.bind(undefined, _this);\n        /**\n         * @type {import(\"./tilecoord.js\").TileCoord}\n         */\n        _this.wrappedTileCoord = urlTileCoord;\n        return _this;\n    }\n    /**\n     * @param {import(\"./layer/Layer.js\").default} layer Layer.\n     * @return {CanvasRenderingContext2D} The rendering context.\n     */\n    VectorRenderTile.prototype.getContext = function (layer) {\n        var key = getUid(layer);\n        if (!(key in this.context_)) {\n            this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n        }\n        return this.context_[key];\n    };\n    /**\n     * @param {import(\"./layer/Layer.js\").default} layer Layer.\n     * @return {boolean} Tile has a rendering context for the given layer.\n     */\n    VectorRenderTile.prototype.hasContext = function (layer) {\n        return getUid(layer) in this.context_;\n    };\n    /**\n     * Get the Canvas for this tile.\n     * @param {import(\"./layer/Layer.js\").default} layer Layer.\n     * @return {HTMLCanvasElement} Canvas.\n     */\n    VectorRenderTile.prototype.getImage = function (layer) {\n        return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n    };\n    /**\n     * @param {import(\"./layer/Layer.js\").default} layer Layer.\n     * @return {ReplayState} The replay state.\n     */\n    VectorRenderTile.prototype.getReplayState = function (layer) {\n        var key = getUid(layer);\n        if (!(key in this.replayState_)) {\n            this.replayState_[key] = {\n                dirty: false,\n                renderedRenderOrder: null,\n                renderedResolution: NaN,\n                renderedRevision: -1,\n                renderedTileResolution: NaN,\n                renderedTileRevision: -1,\n                renderedTileZ: -1,\n            };\n        }\n        return this.replayState_[key];\n    };\n    /**\n     * Load the tile.\n     */\n    VectorRenderTile.prototype.load = function () {\n        this.getSourceTiles();\n    };\n    /**\n     * Remove from the cache due to expiry\n     */\n    VectorRenderTile.prototype.release = function () {\n        for (var key in this.context_) {\n            canvasPool.push(this.context_[key].canvas);\n            delete this.context_[key];\n        }\n        _super.prototype.release.call(this);\n    };\n    return VectorRenderTile;\n}(Tile));\nexport default VectorRenderTile;\n//# sourceMappingURL=VectorRenderTile.js.map"]},"metadata":{},"sourceType":"module"}