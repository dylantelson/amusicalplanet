{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Draw\n */\n\n\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { always, noModifierKeys, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../extent.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { fromUserCoordinate, getUserProjection } from '../proj.js';\nimport { squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/GeometryType.js\").default} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish. Must be greater than `0`.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished. Not used when drawing\n * POINT or MULTI_POINT geometries.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\n\nvar Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n/**\n * @enum {string}\n */\n\nvar DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\n\nvar DrawEvent = function (_super) {\n  __extends(DrawEvent, _super);\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n\n\n  function DrawEvent(type, feature) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n\n\n    _this.feature = feature;\n    return _this;\n  }\n\n  return DrawEvent;\n}(Event);\n\nexport { DrawEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\n\nvar Draw = function (_super) {\n  __extends(Draw, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function Draw(options) {\n    var _this = this;\n\n    var pointerOptions = options;\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    _this = _super.call(this, pointerOptions) || this;\n    /***\n     * @type {DrawOnSignature<import(\"../Observable\").OnReturn>}\n     */\n\n    _this.on;\n    /***\n     * @type {DrawOnSignature<import(\"../Observable\").OnReturn>}\n     */\n\n    _this.once;\n    /***\n     * @type {DrawOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.shouldHandle_ = false;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n    _this.downPx_ = null;\n    /**\n     * @type {?}\n     * @private\n     */\n\n    _this.downTimeout_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    _this.lastDragTime_;\n    /**\n     * Pointer type of the last pointermove event\n     * @type {string}\n     * @private\n     */\n\n    _this.pointerType_;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.freehand_ = false;\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource}\n     * @private\n     */\n\n    _this.source_ = options.source ? options.source : null;\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>}\n     * @private\n     */\n\n    _this.features_ = options.features ? options.features : null;\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n\n    _this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/GeometryType.js\").default}\n     * @private\n     */\n\n    _this.type_ = options.type;\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n\n    _this.mode_ = getMode(_this.type_);\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n\n    _this.stopClick_ = !!options.stopClick;\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n\n    _this.minPoints_ = options.minPoints ? options.minPoints : _this.mode_ === Mode.POLYGON ? 3 : 2;\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n\n    _this.maxPoints_ = _this.mode_ === Mode.CIRCLE ? 2 : options.maxPoints ? options.maxPoints : Infinity;\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n    var geometryFunction = options.geometryFunction;\n\n    if (!geometryFunction) {\n      var mode_1 = _this.mode_;\n\n      if (mode_1 === Mode.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          var circle = geometry ? geometry : new Circle([NaN, NaN]);\n          var center = fromUserCoordinate(coordinates[0], projection);\n          var squaredLength = squaredCoordinateDistance(center, fromUserCoordinate(coordinates[coordinates.length - 1], projection));\n          circle.setCenterAndRadius(center, Math.sqrt(squaredLength));\n          var userProjection = getUserProjection();\n\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n\n          return circle;\n        };\n      } else {\n        var Constructor_1;\n\n        if (mode_1 === Mode.POINT) {\n          Constructor_1 = Point;\n        } else if (mode_1 === Mode.LINE_STRING) {\n          Constructor_1 = LineString;\n        } else if (mode_1 === Mode.POLYGON) {\n          Constructor_1 = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n\n\n        geometryFunction = function (coordinates, geometry, projection) {\n          if (geometry) {\n            if (mode_1 === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor_1(coordinates);\n          }\n\n          return geometry;\n        };\n      }\n    }\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n\n\n    _this.geometryFunction_ = geometryFunction;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n\n    _this.finishCoordinate_ = null;\n    /**\n     * Sketch feature.\n     * @type {Feature}\n     * @private\n     */\n\n    _this.sketchFeature_ = null;\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n\n    _this.sketchPoint_ = null;\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n\n    _this.sketchCoords_ = null;\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n\n    _this.sketchLine_ = null;\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n\n    _this.sketchLineCoords_ = null;\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n\n    _this.squaredClickTolerance_ = options.clickTolerance ? options.clickTolerance * options.clickTolerance : 36;\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n\n    _this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n\n    _this.geometryName_ = options.geometryName;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : noModifierKeys;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.freehandCondition_;\n\n    if (options.freehand) {\n      _this.freehandCondition_ = always;\n    } else {\n      _this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : shiftKeyOnly;\n    }\n\n    _this.addChangeListener(InteractionProperty.ACTIVE, _this.updateState_);\n\n    return _this;\n  }\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n\n\n  Draw.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n\n    this.updateState_();\n  };\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n\n\n  Draw.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n\n\n  Draw.prototype.handleEvent = function (event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.originalEvent.preventDefault();\n    }\n\n    this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    var move = event.type === MapBrowserEventType.POINTERMOVE;\n    var pass = true;\n\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      var now = Date.now();\n\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n\n    if (this.freehand_ && event.type === MapBrowserEventType.POINTERDRAG && this.sketchFeature_ !== null) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (this.freehand_ && event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move && this.getPointerCount() < 2) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.originalEvent.preventDefault();\n        }\n      } else if (event.originalEvent.pointerType === 'mouse' || event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return _super.prototype.handleEvent.call(this, event) && pass;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  Draw.prototype.handleDownEvent = function (event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event.coordinate);\n      }\n\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(function () {\n        this.handlePointerMove_(new MapBrowserEvent(MapBrowserEventType.POINTERMOVE, event.map, event.originalEvent, false, event.frameState));\n      }.bind(this), this.dragVertexDelay_);\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  Draw.prototype.handleUpEvent = function (event) {\n    var pass = true;\n\n    if (this.getPointerCount() === 0) {\n      if (this.downTimeout_) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n\n      this.handlePointerMove_(event);\n\n      if (this.shouldHandle_) {\n        var startingToDraw = !this.finishCoordinate_;\n\n        if (startingToDraw) {\n          this.startDrawing_(event.coordinate);\n        }\n\n        if (!startingToDraw && this.freehand_) {\n          this.finishDrawing();\n        } else if (!this.freehand_ && (!startingToDraw || this.mode_ === Mode.POINT)) {\n          if (this.atFinish_(event.pixel)) {\n            if (this.finishCondition_(event)) {\n              this.finishDrawing();\n            }\n          } else {\n            this.addToDrawing_(event.coordinate);\n          }\n        }\n\n        pass = false;\n      } else if (this.freehand_) {\n        this.abortDrawing();\n      }\n    }\n\n    if (!pass && this.stopClick_) {\n      event.preventDefault();\n    }\n\n    return pass;\n  };\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n\n\n  Draw.prototype.handlePointerMove_ = function (event) {\n    this.pointerType_ = event.originalEvent.pointerType;\n\n    if (this.downPx_ && (!this.freehand_ && this.shouldHandle_ || this.freehand_ && !this.shouldHandle_)) {\n      var downPx = this.downPx_;\n      var clickPx = event.pixel;\n      var dx = downPx[0] - clickPx[0];\n      var dy = downPx[1] - clickPx[1];\n      var squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ? squaredDistance > this.squaredClickTolerance_ : squaredDistance <= this.squaredClickTolerance_;\n\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event.coordinate);\n    } else {\n      this.createOrUpdateSketchPoint_(event.coordinate.slice());\n    }\n  };\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n\n\n  Draw.prototype.atFinish_ = function (pixel) {\n    var at = false;\n\n    if (this.sketchFeature_) {\n      var potentiallyDone = false;\n      var potentiallyFinishCoordinates = [this.finishCoordinate_];\n      var mode = this.mode_;\n\n      if (mode === Mode.POINT) {\n        at = true;\n      } else if (mode === Mode.CIRCLE) {\n        at = this.sketchCoords_.length === 2;\n      } else if (mode === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (mode === Mode.POLYGON) {\n        var sketchCoords = this.sketchCoords_;\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n      }\n\n      if (potentiallyDone) {\n        var map = this.getMap();\n\n        for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          var finishCoordinate = potentiallyFinishCoordinates[i];\n          var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          var dx = pixel[0] - finishPixel[0];\n          var dy = pixel[1] - finishPixel[1];\n          var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n\n    return at;\n  };\n  /**\n   * @param {import(\"../coordinate\").Coordinate} coordinates Coordinate.\n   * @private\n   */\n\n\n  Draw.prototype.createOrUpdateSketchPoint_ = function (coordinates) {\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      var sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  };\n  /**\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @private\n   */\n\n\n  Draw.prototype.createOrUpdateCustomSketchLine_ = function (geometry) {\n    if (!this.sketchLine_) {\n      this.sketchLine_ = new Feature();\n    }\n\n    var ring = geometry.getLinearRing(0);\n    var sketchLineGeom = this.sketchLine_.getGeometry();\n\n    if (!sketchLineGeom) {\n      sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n      this.sketchLine_.setGeometry(sketchLineGeom);\n    } else {\n      sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n      sketchLineGeom.changed();\n    }\n  };\n  /**\n   * Start the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} start Start coordinate.\n   * @private\n   */\n\n\n  Draw.prototype.startDrawing_ = function (start) {\n    var projection = this.getMap().getView().getProjection();\n    this.finishCoordinate_ = start;\n\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n\n    var geometry = this.geometryFunction_(this.sketchCoords_, undefined, projection);\n    this.sketchFeature_ = new Feature();\n\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Modify the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @private\n   */\n\n\n  Draw.prototype.modifyDrawing_ = function (coordinate) {\n    var map = this.getMap();\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = map.getView().getProjection();\n    var coordinates, last;\n\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n      last = coordinates[coordinates.length - 1];\n\n      if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(this.sketchCoords_, geometry, projection);\n\n    if (this.sketchPoint_) {\n      var sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n\n    if (geometry.getType() === GeometryType.POLYGON && this.mode_ !== Mode.POLYGON) {\n      this.createOrUpdateCustomSketchLine_(geometry);\n    } else if (this.sketchLineCoords_) {\n      var sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n\n\n  Draw.prototype.addToDrawing_ = function (coordinate) {\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    var done;\n    var coordinates;\n    var mode = this.mode_;\n\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = this.sketchCoords_;\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (mode === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    this.createOrUpdateSketchPoint_(coordinate.slice());\n    this.updateSketchFeatures_();\n\n    if (done) {\n      this.finishDrawing();\n    }\n  };\n  /**\n   * Remove last point of the feature currently being drawn. Does not do anything when\n   * drawing POINT or MULTI_POINT geometries.\n   * @api\n   */\n\n\n  Draw.prototype.removeLastPoint = function () {\n    if (!this.sketchFeature_) {\n      return;\n    }\n\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    var coordinates;\n    var mode = this.mode_;\n\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      coordinates = this.sketchCoords_;\n      coordinates.splice(-2, 1);\n\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n        var finishCoordinate = this.finishCoordinate_.slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n\n      this.geometryFunction_(coordinates, geometry, projection);\n\n      if (geometry.getType() === GeometryType.POLYGON && this.sketchLine_) {\n        this.createOrUpdateCustomSketchLine_(geometry);\n      }\n    } else if (mode === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n      coordinates.splice(-2, 1);\n      var sketchLineGeom = this.sketchLine_.getGeometry();\n\n      if (coordinates.length >= 2) {\n        var finishCoordinate = coordinates[coordinates.length - 2].slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    if (coordinates.length === 1) {\n      this.abortDrawing();\n    }\n\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n\n\n  Draw.prototype.finishDrawing = function () {\n    var sketchFeature = this.abortDrawing_();\n\n    if (!sketchFeature) {\n      return;\n    }\n\n    var coordinates = this.sketchCoords_;\n    var geometry = sketchFeature.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n\n      /** @type {PolyCoordType} */\n      coordinates[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    } // cast multi-part geometries\n\n\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(new MultiPoint([\n        /** @type {PointCoordType} */\n      coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(new MultiLineString([\n        /** @type {LineCoordType} */\n      coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(new MultiPolygon([\n        /** @type {PolyCoordType} */\n      coordinates]));\n    } // First dispatch event to allow full set up of feature\n\n\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature)); // Then insert feature\n\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  };\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature} The sketch feature (or null if none).\n   * @private\n   */\n\n\n  Draw.prototype.abortDrawing_ = function () {\n    this.finishCoordinate_ = null;\n    var sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    return sketchFeature;\n  };\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n\n\n  Draw.prototype.abortDrawing = function () {\n    var sketchFeature = this.abortDrawing_();\n\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  };\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon. If no geometry is being drawn, a new one will be created.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended to\n   * the coordinate array.\n   * @api\n   */\n\n\n  Draw.prototype.appendCoordinates = function (coordinates) {\n    var mode = this.mode_;\n    var newDrawing = !this.sketchFeature_;\n\n    if (newDrawing) {\n      this.startDrawing_(coordinates[0]);\n    }\n    /** @type {LineCoordType} */\n\n\n    var sketchCoords;\n\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      sketchCoords = this.sketchCoords_;\n    } else if (mode === Mode.POLYGON) {\n      sketchCoords = this.sketchCoords_ && this.sketchCoords_.length ?\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0] : [];\n    } else {\n      return;\n    }\n\n    if (newDrawing) {\n      sketchCoords.shift();\n    } // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n\n\n    sketchCoords.pop(); // Append coordinate list\n\n    for (var i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n\n    var ending = coordinates[coordinates.length - 1]; // Duplicate last coordinate for sketch drawing (cursor position)\n\n    this.addToDrawing_(ending);\n    this.modifyDrawing_(ending);\n  };\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n\n\n  Draw.prototype.extend = function (feature) {\n    var geometry = feature.getGeometry();\n    var lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.sketchPoint_ = new Feature(new Point(last));\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n\n\n  Draw.prototype.updateSketchFeatures_ = function () {\n    var sketchFeatures = [];\n\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n\n    var overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  };\n  /**\n   * @private\n   */\n\n\n  Draw.prototype.updateState_ = function () {\n    var map = this.getMap();\n    var active = this.getActive();\n\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n\n    this.overlay_.setMap(active ? map : null);\n  };\n\n  return Draw;\n}(PointerInteraction);\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of a\n * `import(\"../geom/Circle.js\").Circle` geometry.\n * @param {number} [opt_sides] Number of sides of the regular polygon.\n *     Default is 32.\n * @param {number} [opt_angle] Angle of the first point in counter-clockwise\n *     radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a polygon.\n * @api\n */\n\n\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function (coordinates, opt_geometry, projection) {\n    var center = fromUserCoordinate(\n    /** @type {LineCoordType} */\n    coordinates[0], projection);\n    var end = fromUserCoordinate(\n    /** @type {LineCoordType} */\n    coordinates[coordinates.length - 1], projection);\n    var radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    var geometry = opt_geometry ? opt_geometry : fromCircle(new Circle(center), opt_sides);\n    var angle = opt_angle;\n\n    if (!opt_angle && opt_angle !== 0) {\n      var x = end[0] - center[0];\n      var y = end[1] - center[1];\n      angle = Math.atan2(y, x);\n    }\n\n    makeRegular(geometry, center, radius, angle);\n    var userProjection = getUserProjection();\n\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n\n    return geometry;\n  };\n}\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\n\nexport function createBox() {\n  return function (coordinates, opt_geometry, projection) {\n    var extent = boundingExtent(\n    /** @type {LineCoordType} */\n    [coordinates[0], coordinates[coordinates.length - 1]].map(function (coordinate) {\n      return fromUserCoordinate(coordinate, projection);\n    }));\n    var boxCoordinates = [[getBottomLeft(extent), getBottomRight(extent), getTopRight(extent), getTopLeft(extent), getBottomLeft(extent)]];\n    var geometry = opt_geometry;\n\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n\n    var userProjection = getUserProjection();\n\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n\n    return geometry;\n  };\n}\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/GeometryType.js\").default} type Geometry type.\n * @return {Mode} Drawing mode.\n */\n\nfunction getMode(type) {\n  switch (type) {\n    case GeometryType.POINT:\n    case GeometryType.MULTI_POINT:\n      return Mode.POINT;\n\n    case GeometryType.LINE_STRING:\n    case GeometryType.MULTI_LINE_STRING:\n      return Mode.LINE_STRING;\n\n    case GeometryType.POLYGON:\n    case GeometryType.MULTI_POLYGON:\n      return Mode.POLYGON;\n\n    case GeometryType.CIRCLE:\n      return Mode.CIRCLE;\n\n    default:\n      throw new Error('Invalid type: ' + type);\n  }\n}\n\nexport default Draw;","map":{"version":3,"sources":["../src/interaction/Draw.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEG;;;AACH,OAAO,MAAP,MAAmB,mBAAnB;AACA,OAAO,KAAP,MAAkB,oBAAlB;AACA,OAAO,SAAP,MAAsB,wBAAtB;AACA,OAAO,OAAP,MAAoB,eAApB;AACA,OAAO,YAAP,MAAyB,yBAAzB;AACA,OAAO,mBAAP,MAAgC,eAAhC;AACA,OAAO,UAAP,MAAuB,uBAAvB;AACA,OAAO,eAAP,MAA4B,uBAA5B;AACA,OAAO,mBAAP,MAAgC,2BAAhC;AACA,OAAO,eAAP,MAA4B,4BAA5B;AACA,OAAO,UAAP,MAAuB,uBAAvB;AACA,OAAO,YAAP,MAAyB,yBAAzB;AACA,OAAO,KAAP,MAAkB,kBAAlB;AACA,OAAO,kBAAP,MAA+B,cAA/B;AACA,OAAO,OAAP,IAAiB,UAAjB,EAA6B,WAA7B,QAA+C,oBAA/C;AACA,OAAO,WAAP,MAAwB,oBAAxB;AACA,OAAO,YAAP,MAAyB,qBAAzB;AACA,SAAQ,KAAR,EAAe,IAAf,QAA0B,iBAA1B;AACA,SAAQ,MAAR,EAAgB,cAAhB,EAAgC,YAAhC,QAAmD,wBAAnD;AACA,SACE,cADF,EAEE,aAFF,EAGE,cAHF,EAIE,UAJF,EAKE,WALF,QAMO,cANP;AAOA,SAAQ,kBAAR,QAAiC,mBAAjC;AACA,SAAQ,kBAAR,EAA4B,iBAA5B,QAAoD,YAApD;AACA,SAAQ,eAAe,IAAI,yBAA3B,QAA2D,kBAA3D;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDG;;AAEH;;;AAGG;;AAEH;;;AAGG;;AAEH;;;AAGG;;AAEH;;;AAGG;;AAEH;;;;;;;;AAQG;;AAEH;;;;AAIG;;AACH,IAAM,IAAI,GAAG;AACX,EAAA,KAAK,EAAE,OADI;AAEX,EAAA,WAAW,EAAE,YAFF;AAGX,EAAA,OAAO,EAAE,SAHE;AAIX,EAAA,MAAM,EAAE;AAJG,CAAb;AAOA;;AAEG;;AACH,IAAM,aAAa,GAAG;AACpB;;;;AAIG;AACH,EAAA,SAAS,EAAE,WANS;;AAOpB;;;;AAIG;AACH,EAAA,OAAO,EAAE,SAZW;;AAapB;;;;AAIG;AACH,EAAA,SAAS,EAAE;AAlBS,CAAtB;AAqBA;;;;AAIG;;AACH,IAAA,SAAA,GAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;AAC7B;;;AAGG;;;AACH,WAAA,SAAA,CAAY,IAAZ,EAAkB,OAAlB,EAAyB;AAAzB,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,KAAW,IADb;AAGE;;;;AAIG;;;AACH,IAAA,KAAI,CAAC,OAAL,GAAe,OAAf;;AACD;;AACH,SAAA,SAAA;AAAC,CAfD,CAA+B,KAA/B,CAAA;;;AAiBA;;;;;;;;AAQG;;AAEH;;;;;;AAMG;;AACH,IAAA,IAAA,GAAA,UAAA,MAAA,EAAA;AAAmB,EAAA,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;AACjB;;AAEG;;;AACH,WAAA,IAAA,CAAY,OAAZ,EAAmB;AAAnB,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,cAAc,GAClB,OADF;;AAGA,QAAI,CAAC,cAAc,CAAC,QAApB,EAA8B;AAC5B,MAAA,cAAc,CAAC,QAAf,GAA0B,KAA1B;AACD;;AAED,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,cAAN,KAAqB,IAArB;AAEA;;AAEG;;AACH,IAAA,KAAI,CAAC,EAAL;AAEA;;AAEG;;AACH,IAAA,KAAI,CAAC,IAAL;AAEA;;AAEG;;AACH,IAAA,KAAI,CAAC,EAAL;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,aAAL,GAAqB,KAArB;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,OAAL,GAAe,IAAf;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,YAAL;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,aAAL;AAEA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,YAAL;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,SAAL,GAAiB,KAAjB;AAEA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,OAAL,GAAe,OAAO,CAAC,MAAR,GAAiB,OAAO,CAAC,MAAzB,GAAkC,IAAjD;AAEA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,SAAL,GAAiB,OAAO,CAAC,QAAR,GAAmB,OAAO,CAAC,QAA3B,GAAsC,IAAvD;AAEA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,cAAL,GAAsB,OAAO,CAAC,aAAR,GAAwB,OAAO,CAAC,aAAhC,GAAgD,EAAtE;AAEA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,KAAL,GACE,OAAO,CAAC,IADV;AAIA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,KAAL,GAAa,OAAO,CAAC,KAAI,CAAC,KAAN,CAApB;AAEA;;;;;AAKG;;AACH,IAAA,KAAI,CAAC,UAAL,GAAkB,CAAC,CAAC,OAAO,CAAC,SAA5B;AAEA;;;;;;AAMG;;AACH,IAAA,KAAI,CAAC,UAAL,GAAkB,OAAO,CAAC,SAAR,GACd,OAAO,CAAC,SADM,GAEd,KAAI,CAAC,KAAL,KAAe,IAAI,CAAC,OAApB,GACA,CADA,GAEA,CAJJ;AAMA;;;;;AAKG;;AACH,IAAA,KAAI,CAAC,UAAL,GACE,KAAI,CAAC,KAAL,KAAe,IAAI,CAAC,MAApB,GACI,CADJ,GAEI,OAAO,CAAC,SAAR,GACA,OAAO,CAAC,SADR,GAEA,QALN;AAOA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,gBAAL,GAAwB,OAAO,CAAC,eAAR,GACpB,OAAO,CAAC,eADY,GAEpB,IAFJ;AAIA,QAAI,gBAAgB,GAAG,OAAO,CAAC,gBAA/B;;AACA,QAAI,CAAC,gBAAL,EAAuB;AACrB,UAAM,MAAI,GAAG,KAAI,CAAC,KAAlB;;AACA,UAAI,MAAI,KAAK,IAAI,CAAC,MAAlB,EAA0B;AACxB;;;;;AAKG;AACH,QAAA,gBAAgB,GAAG,UAAU,WAAV,EAAuB,QAAvB,EAAiC,UAAjC,EAA2C;AAC5D,cAAM,MAAM,GAAG,QAAQ,GACI,QADJ,GAEnB,IAAI,MAAJ,CAAW,CAAC,GAAD,EAAM,GAAN,CAAX,CAFJ;AAGA,cAAM,MAAM,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAD,CAAZ,EAAiB,UAAjB,CAAjC;AACA,cAAM,aAAa,GAAG,yBAAyB,CAC7C,MAD6C,EAE7C,kBAAkB,CAAC,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAZ,EAAsC,UAAtC,CAF2B,CAA/C;AAIA,UAAA,MAAM,CAAC,kBAAP,CAA0B,MAA1B,EAAkC,IAAI,CAAC,IAAL,CAAU,aAAV,CAAlC;AACA,cAAM,cAAc,GAAG,iBAAiB,EAAxC;;AACA,cAAI,cAAJ,EAAoB;AAClB,YAAA,MAAM,CAAC,SAAP,CAAiB,UAAjB,EAA6B,cAA7B;AACD;;AACD,iBAAO,MAAP;AACD,SAfD;AAgBD,OAvBD,MAuBO;AACL,YAAI,aAAJ;;AACA,YAAI,MAAI,KAAK,IAAI,CAAC,KAAlB,EAAyB;AACvB,UAAA,aAAW,GAAG,KAAd;AACD,SAFD,MAEO,IAAI,MAAI,KAAK,IAAI,CAAC,WAAlB,EAA+B;AACpC,UAAA,aAAW,GAAG,UAAd;AACD,SAFM,MAEA,IAAI,MAAI,KAAK,IAAI,CAAC,OAAlB,EAA2B;AAChC,UAAA,aAAW,GAAG,OAAd;AACD;AACD;;;;;AAKG;;;AACH,QAAA,gBAAgB,GAAG,UAAU,WAAV,EAAuB,QAAvB,EAAiC,UAAjC,EAA2C;AAC5D,cAAI,QAAJ,EAAc;AACZ,gBAAI,MAAI,KAAK,IAAI,CAAC,OAAlB,EAA2B;AACzB,kBAAI,WAAW,CAAC,CAAD,CAAX,CAAe,MAAnB,EAA2B;AACzB;AACA,gBAAA,QAAQ,CAAC,cAAT,CAAwB,CACtB,WAAW,CAAC,CAAD,CAAX,CAAe,MAAf,CAAsB,CAAC,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAAD,CAAtB,CADsB,CAAxB;AAGD,eALD,MAKO;AACL,gBAAA,QAAQ,CAAC,cAAT,CAAwB,EAAxB;AACD;AACF,aATD,MASO;AACL,cAAA,QAAQ,CAAC,cAAT,CAAwB,WAAxB;AACD;AACF,WAbD,MAaO;AACL,YAAA,QAAQ,GAAG,IAAI,aAAJ,CAAgB,WAAhB,CAAX;AACD;;AACD,iBAAO,QAAP;AACD,SAlBD;AAmBD;AACF;AAED;;;AAGG;;;AACH,IAAA,KAAI,CAAC,iBAAL,GAAyB,gBAAzB;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,gBAAL,GACE,OAAO,CAAC,eAAR,KAA4B,SAA5B,GAAwC,OAAO,CAAC,eAAhD,GAAkE,GADpE;AAGA;;;;;AAKG;;AACH,IAAA,KAAI,CAAC,iBAAL,GAAyB,IAAzB;AAEA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,cAAL,GAAsB,IAAtB;AAEA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,YAAL,GAAoB,IAApB;AAEA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,aAAL,GAAqB,IAArB;AAEA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,WAAL,GAAmB,IAAnB;AAEA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,iBAAL,GAAyB,IAAzB;AAEA;;;;;;AAMG;;AACH,IAAA,KAAI,CAAC,sBAAL,GAA8B,OAAO,CAAC,cAAR,GAC1B,OAAO,CAAC,cAAR,GAAyB,OAAO,CAAC,cADP,GAE1B,EAFJ;AAIA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,QAAL,GAAgB,IAAI,WAAJ,CAAgB;AAC9B,MAAA,MAAM,EAAE,IAAI,YAAJ,CAAiB;AACvB,QAAA,eAAe,EAAE,KADM;AAEvB,QAAA,KAAK,EAAE,OAAO,CAAC,KAAR,GAAgB,OAAO,CAAC,KAAxB,GAAgC;AAFhB,OAAjB,CADsB;AAK9B,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,GAAgB,OAAO,CAAC,KAAxB,GAAgC,uBAAuB,EALhC;AAM9B,MAAA,sBAAsB,EAAE;AANM,KAAhB,CAAhB;AASA;;;;AAIG;;AACH,IAAA,KAAI,CAAC,aAAL,GAAqB,OAAO,CAAC,YAA7B;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,UAAL,GAAkB,OAAO,CAAC,SAAR,GAAoB,OAAO,CAAC,SAA5B,GAAwC,cAA1D;AAEA;;;AAGG;;AACH,IAAA,KAAI,CAAC,kBAAL;;AACA,QAAI,OAAO,CAAC,QAAZ,EAAsB;AACpB,MAAA,KAAI,CAAC,kBAAL,GAA0B,MAA1B;AACD,KAFD,MAEO;AACL,MAAA,KAAI,CAAC,kBAAL,GAA0B,OAAO,CAAC,iBAAR,GACtB,OAAO,CAAC,iBADc,GAEtB,YAFJ;AAGD;;AAED,IAAA,KAAI,CAAC,iBAAL,CAAuB,mBAAmB,CAAC,MAA3C,EAAmD,KAAI,CAAC,YAAxD;;;AACD;AAED;;;;;AAKG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,GAAP,EAAU;AACR,IAAA,MAAA,CAAA,SAAA,CAAM,MAAN,CAAY,IAAZ,CAAY,IAAZ,EAAa,GAAb;;AACA,SAAK,YAAL;AACD,GAHD;AAKA;;;;AAIG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,WAAO,KAAK,QAAZ;AACD,GAFD;AAIA;;;;;AAKG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,KAAZ,EAAiB;AACf,QAAI,KAAK,CAAC,aAAN,CAAoB,IAApB,KAA6B,SAAS,CAAC,WAA3C,EAAwD;AACtD;AACA,MAAA,KAAK,CAAC,aAAN,CAAoB,cAApB;AACD;;AACD,SAAK,SAAL,GACE,KAAK,KAAL,KAAe,IAAI,CAAC,KAApB,IAA6B,KAAK,kBAAL,CAAwB,KAAxB,CAD/B;AAEA,QAAI,IAAI,GAAG,KAAK,CAAC,IAAN,KAAe,mBAAmB,CAAC,WAA9C;AACA,QAAI,IAAI,GAAG,IAAX;;AACA,QACE,CAAC,KAAK,SAAN,IACA,KAAK,aADL,IAEA,KAAK,CAAC,IAAN,KAAe,mBAAmB,CAAC,WAHrC,EAIE;AACA,UAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;;AACA,UAAI,GAAG,GAAG,KAAK,aAAX,IAA4B,KAAK,gBAArC,EAAuD;AACrD,aAAK,OAAL,GAAe,KAAK,CAAC,KAArB;AACA,aAAK,aAAL,GAAqB,CAAC,KAAK,SAA3B;AACA,QAAA,IAAI,GAAG,IAAP;AACD,OAJD,MAIO;AACL,aAAK,aAAL,GAAqB,SAArB;AACD;;AACD,UAAI,KAAK,aAAL,IAAsB,KAAK,YAAL,KAAsB,SAAhD,EAA2D;AACzD,QAAA,YAAY,CAAC,KAAK,YAAN,CAAZ;AACA,aAAK,YAAL,GAAoB,SAApB;AACD;AACF;;AACD,QACE,KAAK,SAAL,IACA,KAAK,CAAC,IAAN,KAAe,mBAAmB,CAAC,WADnC,IAEA,KAAK,cAAL,KAAwB,IAH1B,EAIE;AACA,WAAK,aAAL,CAAmB,KAAK,CAAC,UAAzB;AACA,MAAA,IAAI,GAAG,KAAP;AACD,KAPD,MAOO,IACL,KAAK,SAAL,IACA,KAAK,CAAC,IAAN,KAAe,mBAAmB,CAAC,WAF9B,EAGL;AACA,MAAA,IAAI,GAAG,KAAP;AACD,KALM,MAKA,IAAI,IAAI,IAAI,KAAK,eAAL,KAAyB,CAArC,EAAwC;AAC7C,MAAA,IAAI,GAAG,KAAK,CAAC,IAAN,KAAe,mBAAmB,CAAC,WAA1C;;AACA,UAAI,IAAI,IAAI,KAAK,SAAjB,EAA4B;AAC1B,aAAK,kBAAL,CAAwB,KAAxB;;AACA,YAAI,KAAK,aAAT,EAAwB;AACtB;AACA,UAAA,KAAK,CAAC,aAAN,CAAoB,cAApB;AACD;AACF,OAND,MAMO,IACL,KAAK,CAAC,aAAN,CAAoB,WAApB,KAAoC,OAApC,IACC,KAAK,CAAC,IAAN,KAAe,mBAAmB,CAAC,WAAnC,IACC,KAAK,YAAL,KAAsB,SAHnB,EAIL;AACA,aAAK,kBAAL,CAAwB,KAAxB;AACD;AACF,KAfM,MAeA,IAAI,KAAK,CAAC,IAAN,KAAe,mBAAmB,CAAC,QAAvC,EAAiD;AACtD,MAAA,IAAI,GAAG,KAAP;AACD;;AAED,WAAO,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,KAAlB,KAA4B,IAAnC;AACD,GA3DD;AA6DA;;;;AAIG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,KAAhB,EAAqB;AACnB,SAAK,aAAL,GAAqB,CAAC,KAAK,SAA3B;;AAEA,QAAI,KAAK,SAAT,EAAoB;AAClB,WAAK,OAAL,GAAe,KAAK,CAAC,KAArB;;AACA,UAAI,CAAC,KAAK,iBAAV,EAA6B;AAC3B,aAAK,aAAL,CAAmB,KAAK,CAAC,UAAzB;AACD;;AACD,aAAO,IAAP;AACD,KAND,MAMO,IAAI,KAAK,UAAL,CAAgB,KAAhB,CAAJ,EAA4B;AACjC,WAAK,aAAL,GAAqB,IAAI,CAAC,GAAL,EAArB;AACA,WAAK,YAAL,GAAoB,UAAU,CAC5B,YAAA;AACE,aAAK,kBAAL,CACE,IAAI,eAAJ,CACE,mBAAmB,CAAC,WADtB,EAEE,KAAK,CAAC,GAFR,EAGE,KAAK,CAAC,aAHR,EAIE,KAJF,EAKE,KAAK,CAAC,UALR,CADF;AASD,OAVD,CAUE,IAVF,CAUO,IAVP,CAD4B,EAY5B,KAAK,gBAZuB,CAA9B;AAcA,WAAK,OAAL,GAAe,KAAK,CAAC,KAArB;AACA,aAAO,IAAP;AACD,KAlBM,MAkBA;AACL,WAAK,aAAL,GAAqB,SAArB;AACA,aAAO,KAAP;AACD;AACF,GA/BD;AAiCA;;;;AAIG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,KAAd,EAAmB;AACjB,QAAI,IAAI,GAAG,IAAX;;AAEA,QAAI,KAAK,eAAL,OAA2B,CAA/B,EAAkC;AAChC,UAAI,KAAK,YAAT,EAAuB;AACrB,QAAA,YAAY,CAAC,KAAK,YAAN,CAAZ;AACA,aAAK,YAAL,GAAoB,SAApB;AACD;;AAED,WAAK,kBAAL,CAAwB,KAAxB;;AAEA,UAAI,KAAK,aAAT,EAAwB;AACtB,YAAM,cAAc,GAAG,CAAC,KAAK,iBAA7B;;AACA,YAAI,cAAJ,EAAoB;AAClB,eAAK,aAAL,CAAmB,KAAK,CAAC,UAAzB;AACD;;AACD,YAAI,CAAC,cAAD,IAAmB,KAAK,SAA5B,EAAuC;AACrC,eAAK,aAAL;AACD,SAFD,MAEO,IACL,CAAC,KAAK,SAAN,KACC,CAAC,cAAD,IAAmB,KAAK,KAAL,KAAe,IAAI,CAAC,KADxC,CADK,EAGL;AACA,cAAI,KAAK,SAAL,CAAe,KAAK,CAAC,KAArB,CAAJ,EAAiC;AAC/B,gBAAI,KAAK,gBAAL,CAAsB,KAAtB,CAAJ,EAAkC;AAChC,mBAAK,aAAL;AACD;AACF,WAJD,MAIO;AACL,iBAAK,aAAL,CAAmB,KAAK,CAAC,UAAzB;AACD;AACF;;AACD,QAAA,IAAI,GAAG,KAAP;AACD,OApBD,MAoBO,IAAI,KAAK,SAAT,EAAoB;AACzB,aAAK,YAAL;AACD;AACF;;AAED,QAAI,CAAC,IAAD,IAAS,KAAK,UAAlB,EAA8B;AAC5B,MAAA,KAAK,CAAC,cAAN;AACD;;AACD,WAAO,IAAP;AACD,GAxCD;AA0CA;;;;AAIG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,KAAnB,EAAwB;AACtB,SAAK,YAAL,GAAoB,KAAK,CAAC,aAAN,CAAoB,WAAxC;;AACA,QACE,KAAK,OAAL,KACE,CAAC,KAAK,SAAN,IAAmB,KAAK,aAAzB,IACE,KAAK,SAAL,IAAkB,CAAC,KAAK,aAF3B,CADF,EAIE;AACA,UAAM,MAAM,GAAG,KAAK,OAApB;AACA,UAAM,OAAO,GAAG,KAAK,CAAC,KAAtB;AACA,UAAM,EAAE,GAAG,MAAM,CAAC,CAAD,CAAN,GAAY,OAAO,CAAC,CAAD,CAA9B;AACA,UAAM,EAAE,GAAG,MAAM,CAAC,CAAD,CAAN,GAAY,OAAO,CAAC,CAAD,CAA9B;AACA,UAAM,eAAe,GAAG,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAvC;AACA,WAAK,aAAL,GAAqB,KAAK,SAAL,GACjB,eAAe,GAAG,KAAK,sBADN,GAEjB,eAAe,IAAI,KAAK,sBAF5B;;AAGA,UAAI,CAAC,KAAK,aAAV,EAAyB;AACvB;AACD;AACF;;AAED,QAAI,KAAK,iBAAT,EAA4B;AAC1B,WAAK,cAAL,CAAoB,KAAK,CAAC,UAA1B;AACD,KAFD,MAEO;AACL,WAAK,0BAAL,CAAgC,KAAK,CAAC,UAAN,CAAiB,KAAjB,EAAhC;AACD;AACF,GAzBD;AA2BA;;;;;AAKG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,KAAV,EAAe;AACb,QAAI,EAAE,GAAG,KAAT;;AACA,QAAI,KAAK,cAAT,EAAyB;AACvB,UAAI,eAAe,GAAG,KAAtB;AACA,UAAI,4BAA4B,GAAG,CAAC,KAAK,iBAAN,CAAnC;AACA,UAAM,IAAI,GAAG,KAAK,KAAlB;;AACA,UAAI,IAAI,KAAK,IAAI,CAAC,KAAlB,EAAyB;AACvB,QAAA,EAAE,GAAG,IAAL;AACD,OAFD,MAEO,IAAI,IAAI,KAAK,IAAI,CAAC,MAAlB,EAA0B;AAC/B,QAAA,EAAE,GAAG,KAAK,aAAL,CAAmB,MAAnB,KAA8B,CAAnC;AACD,OAFM,MAEA,IAAI,IAAI,KAAK,IAAI,CAAC,WAAlB,EAA+B;AACpC,QAAA,eAAe,GAAG,KAAK,aAAL,CAAmB,MAAnB,GAA4B,KAAK,UAAnD;AACD,OAFM,MAEA,IAAI,IAAI,KAAK,IAAI,CAAC,OAAlB,EAA2B;AAChC,YAAM,YAAY,GAAiC,KAAK,aAAxD;AACA,QAAA,eAAe,GAAG,YAAY,CAAC,CAAD,CAAZ,CAAgB,MAAhB,GAAyB,KAAK,UAAhD;AACA,QAAA,4BAA4B,GAAG,CAC7B,YAAY,CAAC,CAAD,CAAZ,CAAgB,CAAhB,CAD6B,EAE7B,YAAY,CAAC,CAAD,CAAZ,CAAgB,YAAY,CAAC,CAAD,CAAZ,CAAgB,MAAhB,GAAyB,CAAzC,CAF6B,CAA/B;AAID;;AACD,UAAI,eAAJ,EAAqB;AACnB,YAAM,GAAG,GAAG,KAAK,MAAL,EAAZ;;AACA,aAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,4BAA4B,CAAC,MAAlD,EAA0D,CAAC,GAAG,EAA9D,EAAkE,CAAC,EAAnE,EAAuE;AACrE,cAAM,gBAAgB,GAAG,4BAA4B,CAAC,CAAD,CAArD;AACA,cAAM,WAAW,GAAG,GAAG,CAAC,sBAAJ,CAA2B,gBAA3B,CAApB;AACA,cAAM,EAAE,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,WAAW,CAAC,CAAD,CAAjC;AACA,cAAM,EAAE,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,WAAW,CAAC,CAAD,CAAjC;AACA,cAAM,aAAa,GAAG,KAAK,SAAL,GAAiB,CAAjB,GAAqB,KAAK,cAAhD;AACA,UAAA,EAAE,GAAG,IAAI,CAAC,IAAL,CAAU,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAzB,KAAgC,aAArC;;AACA,cAAI,EAAJ,EAAQ;AACN,iBAAK,iBAAL,GAAyB,gBAAzB;AACA;AACD;AACF;AACF;AACF;;AACD,WAAO,EAAP;AACD,GArCD;AAuCA;;;AAGG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,0BAAA,GAAA,UAA2B,WAA3B,EAAsC;AACpC,QAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,WAAK,YAAL,GAAoB,IAAI,OAAJ,CAAY,IAAI,KAAJ,CAAU,WAAV,CAAZ,CAApB;AACA,WAAK,qBAAL;AACD,KAHD,MAGO;AACL,UAAM,eAAe,GAAG,KAAK,YAAL,CAAkB,WAAlB,EAAxB;AACA,MAAA,eAAe,CAAC,cAAhB,CAA+B,WAA/B;AACD;AACF,GARD;AAUA;;;AAGG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,+BAAA,GAAA,UAAgC,QAAhC,EAAwC;AACtC,QAAI,CAAC,KAAK,WAAV,EAAuB;AACrB,WAAK,WAAL,GAAmB,IAAI,OAAJ,EAAnB;AACD;;AACD,QAAM,IAAI,GAAG,QAAQ,CAAC,aAAT,CAAuB,CAAvB,CAAb;AACA,QAAI,cAAc,GAAG,KAAK,WAAL,CAAiB,WAAjB,EAArB;;AACA,QAAI,CAAC,cAAL,EAAqB;AACnB,MAAA,cAAc,GAAG,IAAI,UAAJ,CACf,IAAI,CAAC,kBAAL,EADe,EAEf,IAAI,CAAC,SAAL,EAFe,CAAjB;AAIA,WAAK,WAAL,CAAiB,WAAjB,CAA6B,cAA7B;AACD,KAND,MAMO;AACL,MAAA,cAAc,CAAC,kBAAf,CACE,IAAI,CAAC,SAAL,EADF,EAEE,IAAI,CAAC,kBAAL,EAFF;AAIA,MAAA,cAAc,CAAC,OAAf;AACD;AACF,GAnBD;AAqBA;;;;AAIG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,KAAd,EAAmB;AACjB,QAAM,UAAU,GAAG,KAAK,MAAL,GAAc,OAAd,GAAwB,aAAxB,EAAnB;AACA,SAAK,iBAAL,GAAyB,KAAzB;;AACA,QAAI,KAAK,KAAL,KAAe,IAAI,CAAC,KAAxB,EAA+B;AAC7B,WAAK,aAAL,GAAqB,KAAK,CAAC,KAAN,EAArB;AACD,KAFD,MAEO,IAAI,KAAK,KAAL,KAAe,IAAI,CAAC,OAAxB,EAAiC;AACtC,WAAK,aAAL,GAAqB,CAAC,CAAC,KAAK,CAAC,KAAN,EAAD,EAAgB,KAAK,CAAC,KAAN,EAAhB,CAAD,CAArB;AACA,WAAK,iBAAL,GAAyB,KAAK,aAAL,CAAmB,CAAnB,CAAzB;AACD,KAHM,MAGA;AACL,WAAK,aAAL,GAAqB,CAAC,KAAK,CAAC,KAAN,EAAD,EAAgB,KAAK,CAAC,KAAN,EAAhB,CAArB;AACD;;AACD,QAAI,KAAK,iBAAT,EAA4B;AAC1B,WAAK,WAAL,GAAmB,IAAI,OAAJ,CAAY,IAAI,UAAJ,CAAe,KAAK,iBAApB,CAAZ,CAAnB;AACD;;AACD,QAAM,QAAQ,GAAG,KAAK,iBAAL,CACf,KAAK,aADU,EAEf,SAFe,EAGf,UAHe,CAAjB;AAKA,SAAK,cAAL,GAAsB,IAAI,OAAJ,EAAtB;;AACA,QAAI,KAAK,aAAT,EAAwB;AACtB,WAAK,cAAL,CAAoB,eAApB,CAAoC,KAAK,aAAzC;AACD;;AACD,SAAK,cAAL,CAAoB,WAApB,CAAgC,QAAhC;AACA,SAAK,qBAAL;AACA,SAAK,aAAL,CACE,IAAI,SAAJ,CAAc,aAAa,CAAC,SAA5B,EAAuC,KAAK,cAA5C,CADF;AAGD,GA5BD;AA8BA;;;;AAIG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,UAAf,EAAyB;AACvB,QAAM,GAAG,GAAG,KAAK,MAAL,EAAZ;AACA,QAAM,QAAQ,GAAG,KAAK,cAAL,CAAoB,WAApB,EAAjB;AACA,QAAM,UAAU,GAAG,GAAG,CAAC,OAAJ,GAAc,aAAd,EAAnB;AACA,QAAI,WAAJ,EAAiB,IAAjB;;AACA,QAAI,KAAK,KAAL,KAAe,IAAI,CAAC,KAAxB,EAA+B;AAC7B,MAAA,IAAI,GAAG,KAAK,aAAZ;AACD,KAFD,MAEO,IAAI,KAAK,KAAL,KAAe,IAAI,CAAC,OAAxB,EAAiC;AACtC,MAAA,WAAW;AAAG;AAA8B,WAAK,aAAN,CAAqB,CAArB,CAA3C;AACA,MAAA,IAAI,GAAG,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAlB;;AACA,UAAI,KAAK,SAAL,CAAe,GAAG,CAAC,sBAAJ,CAA2B,UAA3B,CAAf,CAAJ,EAA4D;AAC1D;AACA,QAAA,UAAU,GAAG,KAAK,iBAAL,CAAuB,KAAvB,EAAb;AACD;AACF,KAPM,MAOA;AACL,MAAA,WAAW,GAAG,KAAK,aAAnB;AACA,MAAA,IAAI,GAAG,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAlB;AACD;;AACD,IAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,UAAU,CAAC,CAAD,CAApB;AACA,IAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,UAAU,CAAC,CAAD,CAApB;AACA,SAAK,iBAAL,CACiC,KAAK,aADtC,EAEE,QAFF,EAGE,UAHF;;AAKA,QAAI,KAAK,YAAT,EAAuB;AACrB,UAAM,eAAe,GAAG,KAAK,YAAL,CAAkB,WAAlB,EAAxB;AACA,MAAA,eAAe,CAAC,cAAhB,CAA+B,UAA/B;AACD;;AACD,QACE,QAAQ,CAAC,OAAT,OAAuB,YAAY,CAAC,OAApC,IACA,KAAK,KAAL,KAAe,IAAI,CAAC,OAFtB,EAGE;AACA,WAAK,+BAAL,CAA6D,QAA7D;AACD,KALD,MAKO,IAAI,KAAK,iBAAT,EAA4B;AACjC,UAAM,cAAc,GAAG,KAAK,WAAL,CAAiB,WAAjB,EAAvB;AACA,MAAA,cAAc,CAAC,cAAf,CAA8B,KAAK,iBAAnC;AACD;;AACD,SAAK,qBAAL;AACD,GAvCD;AAyCA;;;;AAIG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,UAAd,EAAwB;AACtB,QAAM,QAAQ,GAAG,KAAK,cAAL,CAAoB,WAApB,EAAjB;AACA,QAAM,UAAU,GAAG,KAAK,MAAL,GAAc,OAAd,GAAwB,aAAxB,EAAnB;AACA,QAAI,IAAJ;AACA,QAAI,WAAJ;AACA,QAAM,IAAI,GAAG,KAAK,KAAlB;;AACA,QAAI,IAAI,KAAK,IAAI,CAAC,WAAd,IAA6B,IAAI,KAAK,IAAI,CAAC,MAA/C,EAAuD;AACrD,WAAK,iBAAL,GAAyB,UAAU,CAAC,KAAX,EAAzB;AACA,MAAA,WAAW,GAAiC,KAAK,aAAjD;;AACA,UAAI,WAAW,CAAC,MAAZ,IAAsB,KAAK,UAA/B,EAA2C;AACzC,YAAI,KAAK,SAAT,EAAoB;AAClB,UAAA,WAAW,CAAC,GAAZ;AACD,SAFD,MAEO;AACL,UAAA,IAAI,GAAG,IAAP;AACD;AACF;;AACD,MAAA,WAAW,CAAC,IAAZ,CAAiB,UAAU,CAAC,KAAX,EAAjB;AACA,WAAK,iBAAL,CAAuB,WAAvB,EAAoC,QAApC,EAA8C,UAA9C;AACD,KAZD,MAYO,IAAI,IAAI,KAAK,IAAI,CAAC,OAAlB,EAA2B;AAChC,MAAA,WAAW;AAAG;AAA8B,WAAK,aAAN,CAAqB,CAArB,CAA3C;;AACA,UAAI,WAAW,CAAC,MAAZ,IAAsB,KAAK,UAA/B,EAA2C;AACzC,YAAI,KAAK,SAAT,EAAoB;AAClB,UAAA,WAAW,CAAC,GAAZ;AACD,SAFD,MAEO;AACL,UAAA,IAAI,GAAG,IAAP;AACD;AACF;;AACD,MAAA,WAAW,CAAC,IAAZ,CAAiB,UAAU,CAAC,KAAX,EAAjB;;AACA,UAAI,IAAJ,EAAU;AACR,aAAK,iBAAL,GAAyB,WAAW,CAAC,CAAD,CAApC;AACD;;AACD,WAAK,iBAAL,CAAuB,KAAK,aAA5B,EAA2C,QAA3C,EAAqD,UAArD;AACD;;AACD,SAAK,0BAAL,CAAgC,UAAU,CAAC,KAAX,EAAhC;AACA,SAAK,qBAAL;;AACA,QAAI,IAAJ,EAAU;AACR,WAAK,aAAL;AACD;AACF,GAtCD;AAwCA;;;;AAIG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AACE,QAAI,CAAC,KAAK,cAAV,EAA0B;AACxB;AACD;;AACD,QAAM,QAAQ,GAAG,KAAK,cAAL,CAAoB,WAApB,EAAjB;AACA,QAAM,UAAU,GAAG,KAAK,MAAL,GAAc,OAAd,GAAwB,aAAxB,EAAnB;AACA,QAAI,WAAJ;AACA,QAAM,IAAI,GAAG,KAAK,KAAlB;;AACA,QAAI,IAAI,KAAK,IAAI,CAAC,WAAd,IAA6B,IAAI,KAAK,IAAI,CAAC,MAA/C,EAAuD;AACrD,MAAA,WAAW,GAAiC,KAAK,aAAjD;AACA,MAAA,WAAW,CAAC,MAAZ,CAAmB,CAAC,CAApB,EAAuB,CAAvB;;AACA,UAAI,WAAW,CAAC,MAAZ,IAAsB,CAA1B,EAA6B;AAC3B,aAAK,iBAAL,GAAyB,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAX,CAAoC,KAApC,EAAzB;AACA,YAAM,gBAAgB,GAAG,KAAK,iBAAL,CAAuB,KAAvB,EAAzB;AACA,QAAA,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAX,GAAsC,gBAAtC;AACA,aAAK,0BAAL,CAAgC,gBAAhC;AACD;;AACD,WAAK,iBAAL,CAAuB,WAAvB,EAAoC,QAApC,EAA8C,UAA9C;;AACA,UAAI,QAAQ,CAAC,OAAT,OAAuB,YAAY,CAAC,OAApC,IAA+C,KAAK,WAAxD,EAAqE;AACnE,aAAK,+BAAL,CAA6D,QAA7D;AACD;AACF,KAbD,MAaO,IAAI,IAAI,KAAK,IAAI,CAAC,OAAlB,EAA2B;AAChC,MAAA,WAAW;AAAG;AAA8B,WAAK,aAAN,CAAqB,CAArB,CAA3C;AACA,MAAA,WAAW,CAAC,MAAZ,CAAmB,CAAC,CAApB,EAAuB,CAAvB;AACA,UAAM,cAAc,GAAG,KAAK,WAAL,CAAiB,WAAjB,EAAvB;;AACA,UAAI,WAAW,CAAC,MAAZ,IAAsB,CAA1B,EAA6B;AAC3B,YAAM,gBAAgB,GAAG,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAX,CAAoC,KAApC,EAAzB;AACA,QAAA,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAX,GAAsC,gBAAtC;AACA,aAAK,0BAAL,CAAgC,gBAAhC;AACD;;AACD,MAAA,cAAc,CAAC,cAAf,CAA8B,WAA9B;AACA,WAAK,iBAAL,CAAuB,KAAK,aAA5B,EAA2C,QAA3C,EAAqD,UAArD;AACD;;AAED,QAAI,WAAW,CAAC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WAAK,YAAL;AACD;;AAED,SAAK,qBAAL;AACD,GAvCD;AAyCA;;;;;AAKG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,QAAM,aAAa,GAAG,KAAK,aAAL,EAAtB;;AACA,QAAI,CAAC,aAAL,EAAoB;AAClB;AACD;;AACD,QAAI,WAAW,GAAG,KAAK,aAAvB;AACA,QAAM,QAAQ,GAAG,aAAa,CAAC,WAAd,EAAjB;AACA,QAAM,UAAU,GAAG,KAAK,MAAL,GAAc,OAAd,GAAwB,aAAxB,EAAnB;;AACA,QAAI,KAAK,KAAL,KAAe,IAAI,CAAC,WAAxB,EAAqC;AACnC;AACA,MAAA,WAAW,CAAC,GAAZ;AACA,WAAK,iBAAL,CAAuB,WAAvB,EAAoC,QAApC,EAA8C,UAA9C;AACD,KAJD,MAIO,IAAI,KAAK,KAAL,KAAe,IAAI,CAAC,OAAxB,EAAiC;AACtC;;AACA;AAA8B,MAAA,WAAD,CAAc,CAAd,EAAiB,GAAjB;AAC7B,WAAK,iBAAL,CAAuB,WAAvB,EAAoC,QAApC,EAA8C,UAA9C;AACA,MAAA,WAAW,GAAG,QAAQ,CAAC,cAAT,EAAd;AACD,KAjBH,CAmBE;;;AACA,QAAI,KAAK,KAAL,KAAe,YAAY,CAAC,WAAhC,EAA6C;AAC3C,MAAA,aAAa,CAAC,WAAd,CACE,IAAI,UAAJ,CAAe;AAAC;AAA+B,MAAA,WAAhC,CAAf,CADF;AAGD,KAJD,MAIO,IAAI,KAAK,KAAL,KAAe,YAAY,CAAC,iBAAhC,EAAmD;AACxD,MAAA,aAAa,CAAC,WAAd,CACE,IAAI,eAAJ,CAAoB;AAAC;AAA8B,MAAA,WAA/B,CAApB,CADF;AAGD,KAJM,MAIA,IAAI,KAAK,KAAL,KAAe,YAAY,CAAC,aAAhC,EAA+C;AACpD,MAAA,aAAa,CAAC,WAAd,CACE,IAAI,YAAJ,CAAiB;AAAC;AAA8B,MAAA,WAA/B,CAAjB,CADF;AAGD,KAhCH,CAkCE;;;AACA,SAAK,aAAL,CAAmB,IAAI,SAAJ,CAAc,aAAa,CAAC,OAA5B,EAAqC,aAArC,CAAnB,EAnCF,CAqCE;;AACA,QAAI,KAAK,SAAT,EAAoB;AAClB,WAAK,SAAL,CAAe,IAAf,CAAoB,aAApB;AACD;;AACD,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,OAAL,CAAa,UAAb,CAAwB,aAAxB;AACD;AACF,GA5CD;AA8CA;;;;AAIG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,SAAK,iBAAL,GAAyB,IAAzB;AACA,QAAM,aAAa,GAAG,KAAK,cAA3B;AACA,SAAK,cAAL,GAAsB,IAAtB;AACA,SAAK,YAAL,GAAoB,IAApB;AACA,SAAK,WAAL,GAAmB,IAAnB;AACA,SAAK,QAAL,CAAc,SAAd,GAA0B,KAA1B,CAAgC,IAAhC;AACA,WAAO,aAAP;AACD,GARD;AAUA;;;AAGG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,QAAM,aAAa,GAAG,KAAK,aAAL,EAAtB;;AACA,QAAI,aAAJ,EAAmB;AACjB,WAAK,aAAL,CAAmB,IAAI,SAAJ,CAAc,aAAa,CAAC,SAA5B,EAAuC,aAAvC,CAAnB;AACD;AACF,GALD;AAOA;;;;;;;;AAQG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,WAAlB,EAA6B;AAC3B,QAAM,IAAI,GAAG,KAAK,KAAlB;AACA,QAAM,UAAU,GAAG,CAAC,KAAK,cAAzB;;AACA,QAAI,UAAJ,EAAgB;AACd,WAAK,aAAL,CAAmB,WAAW,CAAC,CAAD,CAA9B;AACD;AACD;;;AACA,QAAI,YAAJ;;AACA,QAAI,IAAI,KAAK,IAAI,CAAC,WAAd,IAA6B,IAAI,KAAK,IAAI,CAAC,MAA/C,EAAuD;AACrD,MAAA,YAAY,GAAiC,KAAK,aAAlD;AACD,KAFD,MAEO,IAAI,IAAI,KAAK,IAAI,CAAC,OAAlB,EAA2B;AAChC,MAAA,YAAY,GACV,KAAK,aAAL,IAAsB,KAAK,aAAL,CAAmB,MAAzC;AACI;AAA8B,WAAK,aAAN,CAAqB,CAArB,CADjC,GAEI,EAHN;AAID,KALM,MAKA;AACL;AACD;;AAED,QAAI,UAAJ,EAAgB;AACd,MAAA,YAAY,CAAC,KAAb;AACD,KArB0B,CAuB3B;;;AACA,IAAA,YAAY,CAAC,GAAb,GAxB2B,CA0B3B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,WAAK,aAAL,CAAmB,WAAW,CAAC,CAAD,CAA9B;AACD;;AAED,QAAM,MAAM,GAAG,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAA1B,CA/B2B,CAgC3B;;AACA,SAAK,aAAL,CAAmB,MAAnB;AACA,SAAK,cAAL,CAAoB,MAApB;AACD,GAnCD;AAqCA;;;;;;;;;;;AAWG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,OAAP,EAAc;AACZ,QAAM,QAAQ,GAAG,OAAO,CAAC,WAAR,EAAjB;AACA,QAAM,UAAU,GAAG,QAAnB;AACA,SAAK,cAAL,GAAsB,OAAtB;AACA,SAAK,aAAL,GAAqB,UAAU,CAAC,cAAX,EAArB;AACA,QAAM,IAAI,GAAG,KAAK,aAAL,CAAmB,KAAK,aAAL,CAAmB,MAAnB,GAA4B,CAA/C,CAAb;AACA,SAAK,iBAAL,GAAyB,IAAI,CAAC,KAAL,EAAzB;AACA,SAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAI,CAAC,KAAL,EAAxB;AACA,SAAK,YAAL,GAAoB,IAAI,OAAJ,CAAY,IAAI,KAAJ,CAAU,IAAV,CAAZ,CAApB;AACA,SAAK,qBAAL;AACA,SAAK,aAAL,CACE,IAAI,SAAJ,CAAc,aAAa,CAAC,SAA5B,EAAuC,KAAK,cAA5C,CADF;AAGD,GAbD;AAeA;;;AAGG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,YAAA;AACE,QAAM,cAAc,GAAG,EAAvB;;AACA,QAAI,KAAK,cAAT,EAAyB;AACvB,MAAA,cAAc,CAAC,IAAf,CAAoB,KAAK,cAAzB;AACD;;AACD,QAAI,KAAK,WAAT,EAAsB;AACpB,MAAA,cAAc,CAAC,IAAf,CAAoB,KAAK,WAAzB;AACD;;AACD,QAAI,KAAK,YAAT,EAAuB;AACrB,MAAA,cAAc,CAAC,IAAf,CAAoB,KAAK,YAAzB;AACD;;AACD,QAAM,aAAa,GAAG,KAAK,QAAL,CAAc,SAAd,EAAtB;AACA,IAAA,aAAa,CAAC,KAAd,CAAoB,IAApB;AACA,IAAA,aAAa,CAAC,WAAd,CAA0B,cAA1B;AACD,GAdD;AAgBA;;AAEG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAAG,KAAK,MAAL,EAAZ;AACA,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;;AACA,QAAI,CAAC,GAAD,IAAQ,CAAC,MAAb,EAAqB;AACnB,WAAK,YAAL;AACD;;AACD,SAAK,QAAL,CAAc,MAAd,CAAqB,MAAM,GAAG,GAAH,GAAS,IAApC;AACD,GAPD;;AAQF,SAAA,IAAA;AAAC,CAj8BD,CAAmB,kBAAnB,CAAA;AAm8BA;;AAEG;;;AACH,SAAS,uBAAT,GAAgC;AAC9B,MAAM,MAAM,GAAG,kBAAkB,EAAjC;AACA,SAAO,UAAU,OAAV,EAAmB,UAAnB,EAA6B;AAClC,WAAO,MAAM,CAAC,OAAO,CAAC,WAAR,GAAsB,OAAtB,EAAD,CAAb;AACD,GAFD;AAGD;AAED;;;;;;;;;;;;AAYG;;;AACH,OAAM,SAAU,oBAAV,CAA+B,SAA/B,EAA0C,SAA1C,EAAmD;AACvD,SAAO,UAAU,WAAV,EAAuB,YAAvB,EAAqC,UAArC,EAA+C;AACpD,QAAM,MAAM,GAAG,kBAAkB;AAC/B;AAA8B,IAAA,WAAD,CAAc,CAAd,CADE,EAE/B,UAF+B,CAAjC;AAIA,QAAM,GAAG,GAAG,kBAAkB;AAC5B;AAA8B,IAAA,WAAD,CAAc,WAAW,CAAC,MAAZ,GAAqB,CAAnC,CADD,EAE5B,UAF4B,CAA9B;AAIA,QAAM,MAAM,GAAG,IAAI,CAAC,IAAL,CAAU,yBAAyB,CAAC,MAAD,EAAS,GAAT,CAAnC,CAAf;AACA,QAAM,QAAQ,GAAG,YAAY,GACD,YADC,GAEzB,UAAU,CAAC,IAAI,MAAJ,CAAW,MAAX,CAAD,EAAqB,SAArB,CAFd;AAIA,QAAI,KAAK,GAAG,SAAZ;;AACA,QAAI,CAAC,SAAD,IAAc,SAAS,KAAK,CAAhC,EAAmC;AACjC,UAAM,CAAC,GAAG,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,CAAD,CAAzB;AACA,UAAM,CAAC,GAAG,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,CAAD,CAAzB;AACA,MAAA,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,CAAd,CAAR;AACD;;AACD,IAAA,WAAW,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,EAA2B,KAA3B,CAAX;AAEA,QAAM,cAAc,GAAG,iBAAiB,EAAxC;;AACA,QAAI,cAAJ,EAAoB;AAClB,MAAA,QAAQ,CAAC,SAAT,CAAmB,UAAnB,EAA+B,cAA/B;AACD;;AACD,WAAO,QAAP;AACD,GA3BD;AA4BD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,SAAV,GAAmB;AACvB,SAAO,UAAU,WAAV,EAAuB,YAAvB,EAAqC,UAArC,EAA+C;AACpD,QAAM,MAAM,GAAG,cAAc;AAC3B;AAA8B,KAC5B,WAAW,CAAC,CAAD,CADiB,EAE5B,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAFiB,CAAD,CAG1B,GAH0B,CAGtB,UAAU,UAAV,EAAoB;AACzB,aAAO,kBAAkB,CAAC,UAAD,EAAa,UAAb,CAAzB;AACD,KAL4B,CADF,CAA7B;AAQA,QAAM,cAAc,GAAG,CACrB,CACE,aAAa,CAAC,MAAD,CADf,EAEE,cAAc,CAAC,MAAD,CAFhB,EAGE,WAAW,CAAC,MAAD,CAHb,EAIE,UAAU,CAAC,MAAD,CAJZ,EAKE,aAAa,CAAC,MAAD,CALf,CADqB,CAAvB;AASA,QAAI,QAAQ,GAAG,YAAf;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,cAAT,CAAwB,cAAxB;AACD,KAFD,MAEO;AACL,MAAA,QAAQ,GAAG,IAAI,OAAJ,CAAY,cAAZ,CAAX;AACD;;AACD,QAAM,cAAc,GAAG,iBAAiB,EAAxC;;AACA,QAAI,cAAJ,EAAoB;AAClB,MAAA,QAAQ,CAAC,SAAT,CAAmB,UAAnB,EAA+B,cAA/B;AACD;;AACD,WAAO,QAAP;AACD,GA7BD;AA8BD;AAED;;;;;AAKG;;AACH,SAAS,OAAT,CAAiB,IAAjB,EAAqB;AACnB,UAAQ,IAAR;AACE,SAAK,YAAY,CAAC,KAAlB;AACA,SAAK,YAAY,CAAC,WAAlB;AACE,aAAO,IAAI,CAAC,KAAZ;;AACF,SAAK,YAAY,CAAC,WAAlB;AACA,SAAK,YAAY,CAAC,iBAAlB;AACE,aAAO,IAAI,CAAC,WAAZ;;AACF,SAAK,YAAY,CAAC,OAAlB;AACA,SAAK,YAAY,CAAC,aAAlB;AACE,aAAO,IAAI,CAAC,OAAZ;;AACF,SAAK,YAAY,CAAC,MAAlB;AACE,aAAO,IAAI,CAAC,MAAZ;;AACF;AACE,YAAM,IAAI,KAAJ,CAAU,mBAAmB,IAA7B,CAAN;AAbJ;AAeD;;AAED,eAAe,IAAf","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/Draw\n */\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { always, noModifierKeys, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight, } from '../extent.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { fromUserCoordinate, getUserProjection } from '../proj.js';\nimport { squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/GeometryType.js\").default} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish. Must be greater than `0`.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished. Not used when drawing\n * POINT or MULTI_POINT geometries.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\nvar Mode = {\n    POINT: 'Point',\n    LINE_STRING: 'LineString',\n    POLYGON: 'Polygon',\n    CIRCLE: 'Circle',\n};\n/**\n * @enum {string}\n */\nvar DrawEventType = {\n    /**\n     * Triggered upon feature draw start\n     * @event DrawEvent#drawstart\n     * @api\n     */\n    DRAWSTART: 'drawstart',\n    /**\n     * Triggered upon feature draw end\n     * @event DrawEvent#drawend\n     * @api\n     */\n    DRAWEND: 'drawend',\n    /**\n     * Triggered upon feature draw abortion\n     * @event DrawEvent#drawabort\n     * @api\n     */\n    DRAWABORT: 'drawabort',\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nvar DrawEvent = /** @class */ (function (_super) {\n    __extends(DrawEvent, _super);\n    /**\n     * @param {DrawEventType} type Type.\n     * @param {Feature} feature The feature drawn.\n     */\n    function DrawEvent(type, feature) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The feature being drawn.\n         * @type {Feature}\n         * @api\n         */\n        _this.feature = feature;\n        return _this;\n    }\n    return DrawEvent;\n}(Event));\nexport { DrawEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature\n */\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nvar Draw = /** @class */ (function (_super) {\n    __extends(Draw, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function Draw(options) {\n        var _this = this;\n        var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n        if (!pointerOptions.stopDown) {\n            pointerOptions.stopDown = FALSE;\n        }\n        _this = _super.call(this, pointerOptions) || this;\n        /***\n         * @type {DrawOnSignature<import(\"../Observable\").OnReturn>}\n         */\n        _this.on;\n        /***\n         * @type {DrawOnSignature<import(\"../Observable\").OnReturn>}\n         */\n        _this.once;\n        /***\n         * @type {DrawOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.shouldHandle_ = false;\n        /**\n         * @type {import(\"../pixel.js\").Pixel}\n         * @private\n         */\n        _this.downPx_ = null;\n        /**\n         * @type {?}\n         * @private\n         */\n        _this.downTimeout_;\n        /**\n         * @type {number|undefined}\n         * @private\n         */\n        _this.lastDragTime_;\n        /**\n         * Pointer type of the last pointermove event\n         * @type {string}\n         * @private\n         */\n        _this.pointerType_;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.freehand_ = false;\n        /**\n         * Target source for drawn features.\n         * @type {VectorSource}\n         * @private\n         */\n        _this.source_ = options.source ? options.source : null;\n        /**\n         * Target collection for drawn features.\n         * @type {import(\"../Collection.js\").default<Feature>}\n         * @private\n         */\n        _this.features_ = options.features ? options.features : null;\n        /**\n         * Pixel distance for snapping.\n         * @type {number}\n         * @private\n         */\n        _this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n        /**\n         * Geometry type.\n         * @type {import(\"../geom/GeometryType.js\").default}\n         * @private\n         */\n        _this.type_ = /** @type {import(\"../geom/GeometryType.js\").default} */ (options.type);\n        /**\n         * Drawing mode (derived from geometry type.\n         * @type {Mode}\n         * @private\n         */\n        _this.mode_ = getMode(_this.type_);\n        /**\n         * Stop click, singleclick, and doubleclick events from firing during drawing.\n         * Default is `false`.\n         * @type {boolean}\n         * @private\n         */\n        _this.stopClick_ = !!options.stopClick;\n        /**\n         * The number of points that must be drawn before a polygon ring or line\n         * string can be finished.  The default is 3 for polygon rings and 2 for\n         * line strings.\n         * @type {number}\n         * @private\n         */\n        _this.minPoints_ = options.minPoints\n            ? options.minPoints\n            : _this.mode_ === Mode.POLYGON\n                ? 3\n                : 2;\n        /**\n         * The number of points that can be drawn before a polygon ring or line string\n         * is finished. The default is no restriction.\n         * @type {number}\n         * @private\n         */\n        _this.maxPoints_ =\n            _this.mode_ === Mode.CIRCLE\n                ? 2\n                : options.maxPoints\n                    ? options.maxPoints\n                    : Infinity;\n        /**\n         * A function to decide if a potential finish coordinate is permissible\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.finishCondition_ = options.finishCondition\n            ? options.finishCondition\n            : TRUE;\n        var geometryFunction = options.geometryFunction;\n        if (!geometryFunction) {\n            var mode_1 = _this.mode_;\n            if (mode_1 === Mode.CIRCLE) {\n                /**\n                 * @param {!LineCoordType} coordinates The coordinates.\n                 * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n                 * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n                 * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n                 */\n                geometryFunction = function (coordinates, geometry, projection) {\n                    var circle = geometry\n                        ? /** @type {Circle} */ (geometry)\n                        : new Circle([NaN, NaN]);\n                    var center = fromUserCoordinate(coordinates[0], projection);\n                    var squaredLength = squaredCoordinateDistance(center, fromUserCoordinate(coordinates[coordinates.length - 1], projection));\n                    circle.setCenterAndRadius(center, Math.sqrt(squaredLength));\n                    var userProjection = getUserProjection();\n                    if (userProjection) {\n                        circle.transform(projection, userProjection);\n                    }\n                    return circle;\n                };\n            }\n            else {\n                var Constructor_1;\n                if (mode_1 === Mode.POINT) {\n                    Constructor_1 = Point;\n                }\n                else if (mode_1 === Mode.LINE_STRING) {\n                    Constructor_1 = LineString;\n                }\n                else if (mode_1 === Mode.POLYGON) {\n                    Constructor_1 = Polygon;\n                }\n                /**\n                 * @param {!LineCoordType} coordinates The coordinates.\n                 * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n                 * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n                 * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n                 */\n                geometryFunction = function (coordinates, geometry, projection) {\n                    if (geometry) {\n                        if (mode_1 === Mode.POLYGON) {\n                            if (coordinates[0].length) {\n                                // Add a closing coordinate to match the first\n                                geometry.setCoordinates([\n                                    coordinates[0].concat([coordinates[0][0]]),\n                                ]);\n                            }\n                            else {\n                                geometry.setCoordinates([]);\n                            }\n                        }\n                        else {\n                            geometry.setCoordinates(coordinates);\n                        }\n                    }\n                    else {\n                        geometry = new Constructor_1(coordinates);\n                    }\n                    return geometry;\n                };\n            }\n        }\n        /**\n         * @type {GeometryFunction}\n         * @private\n         */\n        _this.geometryFunction_ = geometryFunction;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.dragVertexDelay_ =\n            options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n        /**\n         * Finish coordinate for the feature (first point for polygons, last point for\n         * linestrings).\n         * @type {import(\"../coordinate.js\").Coordinate}\n         * @private\n         */\n        _this.finishCoordinate_ = null;\n        /**\n         * Sketch feature.\n         * @type {Feature}\n         * @private\n         */\n        _this.sketchFeature_ = null;\n        /**\n         * Sketch point.\n         * @type {Feature<Point>}\n         * @private\n         */\n        _this.sketchPoint_ = null;\n        /**\n         * Sketch coordinates. Used when drawing a line or polygon.\n         * @type {SketchCoordType}\n         * @private\n         */\n        _this.sketchCoords_ = null;\n        /**\n         * Sketch line. Used when drawing polygon.\n         * @type {Feature<LineString>}\n         * @private\n         */\n        _this.sketchLine_ = null;\n        /**\n         * Sketch line coordinates. Used when drawing a polygon or circle.\n         * @type {LineCoordType}\n         * @private\n         */\n        _this.sketchLineCoords_ = null;\n        /**\n         * Squared tolerance for handling up events.  If the squared distance\n         * between a down and up event is greater than this tolerance, up events\n         * will not be handled.\n         * @type {number}\n         * @private\n         */\n        _this.squaredClickTolerance_ = options.clickTolerance\n            ? options.clickTolerance * options.clickTolerance\n            : 36;\n        /**\n         * Draw overlay where our sketch features are drawn.\n         * @type {VectorLayer}\n         * @private\n         */\n        _this.overlay_ = new VectorLayer({\n            source: new VectorSource({\n                useSpatialIndex: false,\n                wrapX: options.wrapX ? options.wrapX : false,\n            }),\n            style: options.style ? options.style : getDefaultStyleFunction(),\n            updateWhileInteracting: true,\n        });\n        /**\n         * Name of the geometry attribute for newly created features.\n         * @type {string|undefined}\n         * @private\n         */\n        _this.geometryName_ = options.geometryName;\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.condition ? options.condition : noModifierKeys;\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.freehandCondition_;\n        if (options.freehand) {\n            _this.freehandCondition_ = always;\n        }\n        else {\n            _this.freehandCondition_ = options.freehandCondition\n                ? options.freehandCondition\n                : shiftKeyOnly;\n        }\n        _this.addChangeListener(InteractionProperty.ACTIVE, _this.updateState_);\n        return _this;\n    }\n    /**\n     * Remove the interaction from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    Draw.prototype.setMap = function (map) {\n        _super.prototype.setMap.call(this, map);\n        this.updateState_();\n    };\n    /**\n     * Get the overlay layer that this interaction renders sketch features to.\n     * @return {VectorLayer} Overlay layer.\n     * @api\n     */\n    Draw.prototype.getOverlay = function () {\n        return this.overlay_;\n    };\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n     * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     * @api\n     */\n    Draw.prototype.handleEvent = function (event) {\n        if (event.originalEvent.type === EventType.CONTEXTMENU) {\n            // Avoid context menu for long taps when drawing on mobile\n            event.originalEvent.preventDefault();\n        }\n        this.freehand_ =\n            this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n        var move = event.type === MapBrowserEventType.POINTERMOVE;\n        var pass = true;\n        if (!this.freehand_ &&\n            this.lastDragTime_ &&\n            event.type === MapBrowserEventType.POINTERDRAG) {\n            var now = Date.now();\n            if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n                this.downPx_ = event.pixel;\n                this.shouldHandle_ = !this.freehand_;\n                move = true;\n            }\n            else {\n                this.lastDragTime_ = undefined;\n            }\n            if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n                clearTimeout(this.downTimeout_);\n                this.downTimeout_ = undefined;\n            }\n        }\n        if (this.freehand_ &&\n            event.type === MapBrowserEventType.POINTERDRAG &&\n            this.sketchFeature_ !== null) {\n            this.addToDrawing_(event.coordinate);\n            pass = false;\n        }\n        else if (this.freehand_ &&\n            event.type === MapBrowserEventType.POINTERDOWN) {\n            pass = false;\n        }\n        else if (move && this.getPointerCount() < 2) {\n            pass = event.type === MapBrowserEventType.POINTERMOVE;\n            if (pass && this.freehand_) {\n                this.handlePointerMove_(event);\n                if (this.shouldHandle_) {\n                    // Avoid page scrolling when freehand drawing on mobile\n                    event.originalEvent.preventDefault();\n                }\n            }\n            else if (event.originalEvent.pointerType === 'mouse' ||\n                (event.type === MapBrowserEventType.POINTERDRAG &&\n                    this.downTimeout_ === undefined)) {\n                this.handlePointerMove_(event);\n            }\n        }\n        else if (event.type === MapBrowserEventType.DBLCLICK) {\n            pass = false;\n        }\n        return _super.prototype.handleEvent.call(this, event) && pass;\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Draw.prototype.handleDownEvent = function (event) {\n        this.shouldHandle_ = !this.freehand_;\n        if (this.freehand_) {\n            this.downPx_ = event.pixel;\n            if (!this.finishCoordinate_) {\n                this.startDrawing_(event.coordinate);\n            }\n            return true;\n        }\n        else if (this.condition_(event)) {\n            this.lastDragTime_ = Date.now();\n            this.downTimeout_ = setTimeout(function () {\n                this.handlePointerMove_(new MapBrowserEvent(MapBrowserEventType.POINTERMOVE, event.map, event.originalEvent, false, event.frameState));\n            }.bind(this), this.dragVertexDelay_);\n            this.downPx_ = event.pixel;\n            return true;\n        }\n        else {\n            this.lastDragTime_ = undefined;\n            return false;\n        }\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Draw.prototype.handleUpEvent = function (event) {\n        var pass = true;\n        if (this.getPointerCount() === 0) {\n            if (this.downTimeout_) {\n                clearTimeout(this.downTimeout_);\n                this.downTimeout_ = undefined;\n            }\n            this.handlePointerMove_(event);\n            if (this.shouldHandle_) {\n                var startingToDraw = !this.finishCoordinate_;\n                if (startingToDraw) {\n                    this.startDrawing_(event.coordinate);\n                }\n                if (!startingToDraw && this.freehand_) {\n                    this.finishDrawing();\n                }\n                else if (!this.freehand_ &&\n                    (!startingToDraw || this.mode_ === Mode.POINT)) {\n                    if (this.atFinish_(event.pixel)) {\n                        if (this.finishCondition_(event)) {\n                            this.finishDrawing();\n                        }\n                    }\n                    else {\n                        this.addToDrawing_(event.coordinate);\n                    }\n                }\n                pass = false;\n            }\n            else if (this.freehand_) {\n                this.abortDrawing();\n            }\n        }\n        if (!pass && this.stopClick_) {\n            event.preventDefault();\n        }\n        return pass;\n    };\n    /**\n     * Handle move events.\n     * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n     * @private\n     */\n    Draw.prototype.handlePointerMove_ = function (event) {\n        this.pointerType_ = event.originalEvent.pointerType;\n        if (this.downPx_ &&\n            ((!this.freehand_ && this.shouldHandle_) ||\n                (this.freehand_ && !this.shouldHandle_))) {\n            var downPx = this.downPx_;\n            var clickPx = event.pixel;\n            var dx = downPx[0] - clickPx[0];\n            var dy = downPx[1] - clickPx[1];\n            var squaredDistance = dx * dx + dy * dy;\n            this.shouldHandle_ = this.freehand_\n                ? squaredDistance > this.squaredClickTolerance_\n                : squaredDistance <= this.squaredClickTolerance_;\n            if (!this.shouldHandle_) {\n                return;\n            }\n        }\n        if (this.finishCoordinate_) {\n            this.modifyDrawing_(event.coordinate);\n        }\n        else {\n            this.createOrUpdateSketchPoint_(event.coordinate.slice());\n        }\n    };\n    /**\n     * Determine if an event is within the snapping tolerance of the start coord.\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n     * @return {boolean} The event is within the snapping tolerance of the start.\n     * @private\n     */\n    Draw.prototype.atFinish_ = function (pixel) {\n        var at = false;\n        if (this.sketchFeature_) {\n            var potentiallyDone = false;\n            var potentiallyFinishCoordinates = [this.finishCoordinate_];\n            var mode = this.mode_;\n            if (mode === Mode.POINT) {\n                at = true;\n            }\n            else if (mode === Mode.CIRCLE) {\n                at = this.sketchCoords_.length === 2;\n            }\n            else if (mode === Mode.LINE_STRING) {\n                potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n            }\n            else if (mode === Mode.POLYGON) {\n                var sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);\n                potentiallyDone = sketchCoords[0].length > this.minPoints_;\n                potentiallyFinishCoordinates = [\n                    sketchCoords[0][0],\n                    sketchCoords[0][sketchCoords[0].length - 2],\n                ];\n            }\n            if (potentiallyDone) {\n                var map = this.getMap();\n                for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n                    var finishCoordinate = potentiallyFinishCoordinates[i];\n                    var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n                    var dx = pixel[0] - finishPixel[0];\n                    var dy = pixel[1] - finishPixel[1];\n                    var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n                    at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n                    if (at) {\n                        this.finishCoordinate_ = finishCoordinate;\n                        break;\n                    }\n                }\n            }\n        }\n        return at;\n    };\n    /**\n     * @param {import(\"../coordinate\").Coordinate} coordinates Coordinate.\n     * @private\n     */\n    Draw.prototype.createOrUpdateSketchPoint_ = function (coordinates) {\n        if (!this.sketchPoint_) {\n            this.sketchPoint_ = new Feature(new Point(coordinates));\n            this.updateSketchFeatures_();\n        }\n        else {\n            var sketchPointGeom = this.sketchPoint_.getGeometry();\n            sketchPointGeom.setCoordinates(coordinates);\n        }\n    };\n    /**\n     * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n     * @private\n     */\n    Draw.prototype.createOrUpdateCustomSketchLine_ = function (geometry) {\n        if (!this.sketchLine_) {\n            this.sketchLine_ = new Feature();\n        }\n        var ring = geometry.getLinearRing(0);\n        var sketchLineGeom = this.sketchLine_.getGeometry();\n        if (!sketchLineGeom) {\n            sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n            this.sketchLine_.setGeometry(sketchLineGeom);\n        }\n        else {\n            sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n            sketchLineGeom.changed();\n        }\n    };\n    /**\n     * Start the drawing.\n     * @param {import(\"../coordinate.js\").Coordinate} start Start coordinate.\n     * @private\n     */\n    Draw.prototype.startDrawing_ = function (start) {\n        var projection = this.getMap().getView().getProjection();\n        this.finishCoordinate_ = start;\n        if (this.mode_ === Mode.POINT) {\n            this.sketchCoords_ = start.slice();\n        }\n        else if (this.mode_ === Mode.POLYGON) {\n            this.sketchCoords_ = [[start.slice(), start.slice()]];\n            this.sketchLineCoords_ = this.sketchCoords_[0];\n        }\n        else {\n            this.sketchCoords_ = [start.slice(), start.slice()];\n        }\n        if (this.sketchLineCoords_) {\n            this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n        }\n        var geometry = this.geometryFunction_(this.sketchCoords_, undefined, projection);\n        this.sketchFeature_ = new Feature();\n        if (this.geometryName_) {\n            this.sketchFeature_.setGeometryName(this.geometryName_);\n        }\n        this.sketchFeature_.setGeometry(geometry);\n        this.updateSketchFeatures_();\n        this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n    };\n    /**\n     * Modify the drawing.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @private\n     */\n    Draw.prototype.modifyDrawing_ = function (coordinate) {\n        var map = this.getMap();\n        var geometry = this.sketchFeature_.getGeometry();\n        var projection = map.getView().getProjection();\n        var coordinates, last;\n        if (this.mode_ === Mode.POINT) {\n            last = this.sketchCoords_;\n        }\n        else if (this.mode_ === Mode.POLYGON) {\n            coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n            last = coordinates[coordinates.length - 1];\n            if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {\n                // snap to finish\n                coordinate = this.finishCoordinate_.slice();\n            }\n        }\n        else {\n            coordinates = this.sketchCoords_;\n            last = coordinates[coordinates.length - 1];\n        }\n        last[0] = coordinate[0];\n        last[1] = coordinate[1];\n        this.geometryFunction_(\n        /** @type {!LineCoordType} */ (this.sketchCoords_), geometry, projection);\n        if (this.sketchPoint_) {\n            var sketchPointGeom = this.sketchPoint_.getGeometry();\n            sketchPointGeom.setCoordinates(coordinate);\n        }\n        if (geometry.getType() === GeometryType.POLYGON &&\n            this.mode_ !== Mode.POLYGON) {\n            this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));\n        }\n        else if (this.sketchLineCoords_) {\n            var sketchLineGeom = this.sketchLine_.getGeometry();\n            sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n        }\n        this.updateSketchFeatures_();\n    };\n    /**\n     * Add a new coordinate to the drawing.\n     * @param {!PointCoordType} coordinate Coordinate\n     * @private\n     */\n    Draw.prototype.addToDrawing_ = function (coordinate) {\n        var geometry = this.sketchFeature_.getGeometry();\n        var projection = this.getMap().getView().getProjection();\n        var done;\n        var coordinates;\n        var mode = this.mode_;\n        if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n            this.finishCoordinate_ = coordinate.slice();\n            coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n            if (coordinates.length >= this.maxPoints_) {\n                if (this.freehand_) {\n                    coordinates.pop();\n                }\n                else {\n                    done = true;\n                }\n            }\n            coordinates.push(coordinate.slice());\n            this.geometryFunction_(coordinates, geometry, projection);\n        }\n        else if (mode === Mode.POLYGON) {\n            coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n            if (coordinates.length >= this.maxPoints_) {\n                if (this.freehand_) {\n                    coordinates.pop();\n                }\n                else {\n                    done = true;\n                }\n            }\n            coordinates.push(coordinate.slice());\n            if (done) {\n                this.finishCoordinate_ = coordinates[0];\n            }\n            this.geometryFunction_(this.sketchCoords_, geometry, projection);\n        }\n        this.createOrUpdateSketchPoint_(coordinate.slice());\n        this.updateSketchFeatures_();\n        if (done) {\n            this.finishDrawing();\n        }\n    };\n    /**\n     * Remove last point of the feature currently being drawn. Does not do anything when\n     * drawing POINT or MULTI_POINT geometries.\n     * @api\n     */\n    Draw.prototype.removeLastPoint = function () {\n        if (!this.sketchFeature_) {\n            return;\n        }\n        var geometry = this.sketchFeature_.getGeometry();\n        var projection = this.getMap().getView().getProjection();\n        var coordinates;\n        var mode = this.mode_;\n        if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n            coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n            coordinates.splice(-2, 1);\n            if (coordinates.length >= 2) {\n                this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n                var finishCoordinate = this.finishCoordinate_.slice();\n                coordinates[coordinates.length - 1] = finishCoordinate;\n                this.createOrUpdateSketchPoint_(finishCoordinate);\n            }\n            this.geometryFunction_(coordinates, geometry, projection);\n            if (geometry.getType() === GeometryType.POLYGON && this.sketchLine_) {\n                this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));\n            }\n        }\n        else if (mode === Mode.POLYGON) {\n            coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n            coordinates.splice(-2, 1);\n            var sketchLineGeom = this.sketchLine_.getGeometry();\n            if (coordinates.length >= 2) {\n                var finishCoordinate = coordinates[coordinates.length - 2].slice();\n                coordinates[coordinates.length - 1] = finishCoordinate;\n                this.createOrUpdateSketchPoint_(finishCoordinate);\n            }\n            sketchLineGeom.setCoordinates(coordinates);\n            this.geometryFunction_(this.sketchCoords_, geometry, projection);\n        }\n        if (coordinates.length === 1) {\n            this.abortDrawing();\n        }\n        this.updateSketchFeatures_();\n    };\n    /**\n     * Stop drawing and add the sketch feature to the target layer.\n     * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n     * dispatched before inserting the feature.\n     * @api\n     */\n    Draw.prototype.finishDrawing = function () {\n        var sketchFeature = this.abortDrawing_();\n        if (!sketchFeature) {\n            return;\n        }\n        var coordinates = this.sketchCoords_;\n        var geometry = sketchFeature.getGeometry();\n        var projection = this.getMap().getView().getProjection();\n        if (this.mode_ === Mode.LINE_STRING) {\n            // remove the redundant last point\n            coordinates.pop();\n            this.geometryFunction_(coordinates, geometry, projection);\n        }\n        else if (this.mode_ === Mode.POLYGON) {\n            // remove the redundant last point in ring\n            /** @type {PolyCoordType} */ (coordinates)[0].pop();\n            this.geometryFunction_(coordinates, geometry, projection);\n            coordinates = geometry.getCoordinates();\n        }\n        // cast multi-part geometries\n        if (this.type_ === GeometryType.MULTI_POINT) {\n            sketchFeature.setGeometry(new MultiPoint([/** @type {PointCoordType} */ (coordinates)]));\n        }\n        else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n            sketchFeature.setGeometry(new MultiLineString([/** @type {LineCoordType} */ (coordinates)]));\n        }\n        else if (this.type_ === GeometryType.MULTI_POLYGON) {\n            sketchFeature.setGeometry(new MultiPolygon([/** @type {PolyCoordType} */ (coordinates)]));\n        }\n        // First dispatch event to allow full set up of feature\n        this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n        // Then insert feature\n        if (this.features_) {\n            this.features_.push(sketchFeature);\n        }\n        if (this.source_) {\n            this.source_.addFeature(sketchFeature);\n        }\n    };\n    /**\n     * Stop drawing without adding the sketch feature to the target layer.\n     * @return {Feature} The sketch feature (or null if none).\n     * @private\n     */\n    Draw.prototype.abortDrawing_ = function () {\n        this.finishCoordinate_ = null;\n        var sketchFeature = this.sketchFeature_;\n        this.sketchFeature_ = null;\n        this.sketchPoint_ = null;\n        this.sketchLine_ = null;\n        this.overlay_.getSource().clear(true);\n        return sketchFeature;\n    };\n    /**\n     * Stop drawing without adding the sketch feature to the target layer.\n     * @api\n     */\n    Draw.prototype.abortDrawing = function () {\n        var sketchFeature = this.abortDrawing_();\n        if (sketchFeature) {\n            this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n        }\n    };\n    /**\n     * Append coordinates to the end of the geometry that is currently being drawn.\n     * This can be used when drawing LineStrings or Polygons. Coordinates will\n     * either be appended to the current LineString or the outer ring of the current\n     * Polygon. If no geometry is being drawn, a new one will be created.\n     * @param {!LineCoordType} coordinates Linear coordinates to be appended to\n     * the coordinate array.\n     * @api\n     */\n    Draw.prototype.appendCoordinates = function (coordinates) {\n        var mode = this.mode_;\n        var newDrawing = !this.sketchFeature_;\n        if (newDrawing) {\n            this.startDrawing_(coordinates[0]);\n        }\n        /** @type {LineCoordType} */\n        var sketchCoords;\n        if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n            sketchCoords = /** @type {LineCoordType} */ (this.sketchCoords_);\n        }\n        else if (mode === Mode.POLYGON) {\n            sketchCoords =\n                this.sketchCoords_ && this.sketchCoords_.length\n                    ? /** @type {PolyCoordType} */ (this.sketchCoords_)[0]\n                    : [];\n        }\n        else {\n            return;\n        }\n        if (newDrawing) {\n            sketchCoords.shift();\n        }\n        // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n        sketchCoords.pop();\n        // Append coordinate list\n        for (var i = 0; i < coordinates.length; i++) {\n            this.addToDrawing_(coordinates[i]);\n        }\n        var ending = coordinates[coordinates.length - 1];\n        // Duplicate last coordinate for sketch drawing (cursor position)\n        this.addToDrawing_(ending);\n        this.modifyDrawing_(ending);\n    };\n    /**\n     * Initiate draw mode by starting from an existing geometry which will\n     * receive new additional points. This only works on features with\n     * `LineString` geometries, where the interaction will extend lines by adding\n     * points to the end of the coordinates array.\n     * This will change the original feature, instead of drawing a copy.\n     *\n     * The function will dispatch a `drawstart` event.\n     *\n     * @param {!Feature<LineString>} feature Feature to be extended.\n     * @api\n     */\n    Draw.prototype.extend = function (feature) {\n        var geometry = feature.getGeometry();\n        var lineString = geometry;\n        this.sketchFeature_ = feature;\n        this.sketchCoords_ = lineString.getCoordinates();\n        var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n        this.finishCoordinate_ = last.slice();\n        this.sketchCoords_.push(last.slice());\n        this.sketchPoint_ = new Feature(new Point(last));\n        this.updateSketchFeatures_();\n        this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n    };\n    /**\n     * Redraw the sketch features.\n     * @private\n     */\n    Draw.prototype.updateSketchFeatures_ = function () {\n        var sketchFeatures = [];\n        if (this.sketchFeature_) {\n            sketchFeatures.push(this.sketchFeature_);\n        }\n        if (this.sketchLine_) {\n            sketchFeatures.push(this.sketchLine_);\n        }\n        if (this.sketchPoint_) {\n            sketchFeatures.push(this.sketchPoint_);\n        }\n        var overlaySource = this.overlay_.getSource();\n        overlaySource.clear(true);\n        overlaySource.addFeatures(sketchFeatures);\n    };\n    /**\n     * @private\n     */\n    Draw.prototype.updateState_ = function () {\n        var map = this.getMap();\n        var active = this.getActive();\n        if (!map || !active) {\n            this.abortDrawing();\n        }\n        this.overlay_.setMap(active ? map : null);\n    };\n    return Draw;\n}(PointerInteraction));\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n    var styles = createEditingStyle();\n    return function (feature, resolution) {\n        return styles[feature.getGeometry().getType()];\n    };\n}\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of a\n * `import(\"../geom/Circle.js\").Circle` geometry.\n * @param {number} [opt_sides] Number of sides of the regular polygon.\n *     Default is 32.\n * @param {number} [opt_angle] Angle of the first point in counter-clockwise\n *     radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a polygon.\n * @api\n */\nexport function createRegularPolygon(opt_sides, opt_angle) {\n    return function (coordinates, opt_geometry, projection) {\n        var center = fromUserCoordinate(\n        /** @type {LineCoordType} */ (coordinates)[0], projection);\n        var end = fromUserCoordinate(\n        /** @type {LineCoordType} */ (coordinates)[coordinates.length - 1], projection);\n        var radius = Math.sqrt(squaredCoordinateDistance(center, end));\n        var geometry = opt_geometry\n            ? /** @type {Polygon} */ (opt_geometry)\n            : fromCircle(new Circle(center), opt_sides);\n        var angle = opt_angle;\n        if (!opt_angle && opt_angle !== 0) {\n            var x = end[0] - center[0];\n            var y = end[1] - center[1];\n            angle = Math.atan2(y, x);\n        }\n        makeRegular(geometry, center, radius, angle);\n        var userProjection = getUserProjection();\n        if (userProjection) {\n            geometry.transform(projection, userProjection);\n        }\n        return geometry;\n    };\n}\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n    return function (coordinates, opt_geometry, projection) {\n        var extent = boundingExtent(\n        /** @type {LineCoordType} */ ([\n            coordinates[0],\n            coordinates[coordinates.length - 1],\n        ]).map(function (coordinate) {\n            return fromUserCoordinate(coordinate, projection);\n        }));\n        var boxCoordinates = [\n            [\n                getBottomLeft(extent),\n                getBottomRight(extent),\n                getTopRight(extent),\n                getTopLeft(extent),\n                getBottomLeft(extent),\n            ],\n        ];\n        var geometry = opt_geometry;\n        if (geometry) {\n            geometry.setCoordinates(boxCoordinates);\n        }\n        else {\n            geometry = new Polygon(boxCoordinates);\n        }\n        var userProjection = getUserProjection();\n        if (userProjection) {\n            geometry.transform(projection, userProjection);\n        }\n        return geometry;\n    };\n}\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/GeometryType.js\").default} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n    switch (type) {\n        case GeometryType.POINT:\n        case GeometryType.MULTI_POINT:\n            return Mode.POINT;\n        case GeometryType.LINE_STRING:\n        case GeometryType.MULTI_LINE_STRING:\n            return Mode.LINE_STRING;\n        case GeometryType.POLYGON:\n        case GeometryType.MULTI_POLYGON:\n            return Mode.POLYGON;\n        case GeometryType.CIRCLE:\n            return Mode.CIRCLE;\n        default:\n            throw new Error('Invalid type: ' + type);\n    }\n}\nexport default Draw;\n//# sourceMappingURL=Draw.js.map"]},"metadata":{},"sourceType":"module"}