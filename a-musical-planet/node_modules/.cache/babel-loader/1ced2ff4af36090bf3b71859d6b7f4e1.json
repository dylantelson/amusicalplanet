{"ast":null,"code":"import _slicedToArray from\"/home/dylan/MusicGuessr/a-musical-planet/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";// import \"./Play.scss\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var AudioPlayer=function AudioPlayer(_ref){var audioRef=_ref.audioRef,trackURL=_ref.trackURL;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),paused=_useState2[0],setPaused=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),currTime=_useState4[0],setCurrTime=_useState4[1];var togglePause=function togglePause(){if(paused===true)audioRef.current.play();else audioRef.current.pause();setPaused(!paused);};var formatTime=function formatTime(timeInSeconds){// const totalSeconds = Math.floor(time);\nvar minutes=Math.floor(timeInSeconds/60);var seconds=Math.floor(timeInSeconds%60);if(seconds<10)return\"\".concat(minutes,\":0\").concat(seconds);return\"\".concat(minutes,\":\").concat(seconds);};var onSeek=function onSeek(newTime){audioRef.current.currentTime=newTime;setCurrTime(newTime);};//uncomment this if you want audio to autoplay\n//after the user finishes seeking a paused track\n//note: will also need to uncomment the onMouseEnd\n//that is found in the Seeker HTML range input\n// const onSeekEnd = () => {\n//   if (paused) {\n//     audioRef.current.play();\n//     setPaused(false);\n//   }\n// };\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"audio\",{id:\"audioPlayer\",controls:true,ref:audioRef,onTimeUpdate:function onTimeUpdate(){return setCurrTime(audioRef.current.currentTime);},onPlay:function onPlay(){return paused?setPaused(false):null;},onPause:function onPause(){return!paused?setPaused(true):null;},children:/*#__PURE__*/_jsx(\"source\",{volume:\"2\",allow:\"autoplay\",src:trackURL,type:\"audio/mpeg\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"playButtonContainer\",children:[/*#__PURE__*/_jsx(\"div\",{className:paused?\"audioButton\":\"audioButton paused\",onClick:function onClick(){return togglePause();}}),/*#__PURE__*/_jsxs(\"div\",{className:\"timeControls\",children:[/*#__PURE__*/_jsx(\"p\",{children:formatTime(currTime)}),/*#__PURE__*/_jsx(\"input\",{type:\"range\",value:currTime,min:\"0\",max:audioRef.current&&audioRef.current.duration?audioRef.current.duration:30,className:\"audioSeeker\",onChange:function onChange(e){return onSeek(e.target.value);}// onMouseUp={onSeekEnd}\n}),/*#__PURE__*/_jsx(\"p\",{children:!audioRef.current||!audioRef.current.duration?\"0:30\":formatTime(audioRef.current.duration)})]})]})]});};export default AudioPlayer;","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/AudioPlayer.js"],"names":["React","useState","AudioPlayer","audioRef","trackURL","paused","setPaused","currTime","setCurrTime","togglePause","current","play","pause","formatTime","timeInSeconds","minutes","Math","floor","seconds","onSeek","newTime","currentTime","duration","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n// import \"./Play.scss\";\n\nconst AudioPlayer = ({ audioRef, trackURL }) => {\n  const [paused, setPaused] = useState(true);\n  const [currTime, setCurrTime] = useState(0);\n  const togglePause = () => {\n    if (paused === true) audioRef.current.play();\n    else audioRef.current.pause();\n    setPaused(!paused);\n  };\n  const formatTime = (timeInSeconds) => {\n    // const totalSeconds = Math.floor(time);\n    const minutes = Math.floor(timeInSeconds / 60);\n    const seconds = Math.floor(timeInSeconds % 60);\n    if (seconds < 10) return `${minutes}:0${seconds}`;\n    return `${minutes}:${seconds}`;\n  };\n\n  const onSeek = (newTime) => {\n    audioRef.current.currentTime = newTime;\n    setCurrTime(newTime);\n  };\n\n  //uncomment this if you want audio to autoplay\n  //after the user finishes seeking a paused track\n  //note: will also need to uncomment the onMouseEnd\n  //that is found in the Seeker HTML range input\n  // const onSeekEnd = () => {\n  //   if (paused) {\n  //     audioRef.current.play();\n  //     setPaused(false);\n  //   }\n  // };\n\n  return (\n    <>\n      <audio\n        id=\"audioPlayer\"\n        controls\n        ref={audioRef}\n        onTimeUpdate={() => setCurrTime(audioRef.current.currentTime)}\n        onPlay={() => (paused ? setPaused(false) : null)}\n        onPause={() => (!paused ? setPaused(true) : null)}\n      >\n        <source\n          volume=\"2\"\n          allow=\"autoplay\"\n          src={trackURL}\n          type=\"audio/mpeg\"\n        ></source>\n      </audio>\n      <div className=\"playButtonContainer\">\n        <div\n          className={paused ? \"audioButton\" : \"audioButton paused\"}\n          onClick={() => togglePause()}\n        ></div>\n        <div className=\"timeControls\">\n          <p>{formatTime(currTime)}</p>\n          <input\n            type=\"range\"\n            value={currTime}\n            min=\"0\"\n            max={\n              audioRef.current && audioRef.current.duration\n                ? audioRef.current.duration\n                : 30\n            }\n            className=\"audioSeeker\"\n            onChange={(e) => onSeek(e.target.value)}\n            // onMouseUp={onSeekEnd}\n          />\n          <p>\n            {!audioRef.current || !audioRef.current.duration\n              ? \"0:30\"\n              : formatTime(audioRef.current.duration)}\n          </p>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}