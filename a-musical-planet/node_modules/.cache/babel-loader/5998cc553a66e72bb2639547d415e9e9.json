{"ast":null,"code":"/**\n * @module ol/format/GeoJSON\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\n\nvar GeoJSON = function (_super) {\n  __extends(GeoJSON, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function GeoJSON(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this) || this;\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    _this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n\n    if (options.featureProjection) {\n      _this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n\n\n    _this.geometryName_ = options.geometryName;\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n\n    _this.extractGeometryName_ = options.extractGeometryName;\n    return _this;\n  }\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    var geoJSONFeature = null;\n\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = object;\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': object,\n        'properties': null\n      };\n    }\n\n    var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n    var feature = new Feature();\n\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n\n    return feature;\n  };\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n\n\n  GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n    var geoJSONObject = object;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n\n    var features = null;\n\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      var geoJSONFeatureCollection = object;\n      features = [];\n      var geoJSONFeatures = geoJSONFeatureCollection['features'];\n\n      for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, opt_options)];\n    }\n\n    return features;\n  };\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n    return readGeometry(object, opt_options);\n  };\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  GeoJSON.prototype.readProjectionFromObject = function (object) {\n    var crs = object['crs'];\n    var projection;\n\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n\n    return projection;\n  };\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    /** @type {GeoJSONFeature} */\n\n    var object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null\n    };\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    var properties = feature.getProperties();\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, opt_options);\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  };\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var objects = [];\n\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n\n    return {\n      type: 'FeatureCollection',\n      features: objects\n    };\n  };\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  };\n\n  return GeoJSON;\n}(JSONFeature);\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\n\n\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n\n\n  var geometry;\n\n  switch (object['type']) {\n    case GeometryType.POINT:\n      {\n        geometry = readPointGeometry(object);\n        break;\n      }\n\n    case GeometryType.LINE_STRING:\n      {\n        geometry = readLineStringGeometry(object);\n        break;\n      }\n\n    case GeometryType.POLYGON:\n      {\n        geometry = readPolygonGeometry(object);\n        break;\n      }\n\n    case GeometryType.MULTI_POINT:\n      {\n        geometry = readMultiPointGeometry(object);\n        break;\n      }\n\n    case GeometryType.MULTI_LINE_STRING:\n      {\n        geometry = readMultiLineStringGeometry(object);\n        break;\n      }\n\n    case GeometryType.MULTI_POLYGON:\n      {\n        geometry = readMultiPolygonGeometry(object);\n        break;\n      }\n\n    case GeometryType.GEOMETRY_COLLECTION:\n      {\n        geometry = readGeometryCollectionGeometry(object);\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported GeoJSON type: ' + object.type);\n      }\n  }\n\n  return transformGeometryWithOptions(geometry, false, opt_options);\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\n\n\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  var geometries = object['geometries'].map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   */\n  function (geometry) {\n    return readGeometry(geometry, opt_options);\n  });\n  return new GeometryCollection(geometries);\n}\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\n\n\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\n\n\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\n\n\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\n\n\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\n\n\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\n\n\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeGeometry(geometry, opt_options) {\n  geometry = transformGeometryWithOptions(geometry, true, opt_options);\n  var type = geometry.getType();\n  /** @type {GeoJSONGeometry} */\n\n  var geoJSON;\n\n  switch (type) {\n    case GeometryType.POINT:\n      {\n        geoJSON = writePointGeometry(geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.LINE_STRING:\n      {\n        geoJSON = writeLineStringGeometry(geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.POLYGON:\n      {\n        geoJSON = writePolygonGeometry(geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.MULTI_POINT:\n      {\n        geoJSON = writeMultiPointGeometry(geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.MULTI_LINE_STRING:\n      {\n        geoJSON = writeMultiLineStringGeometry(geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.MULTI_POLYGON:\n      {\n        geoJSON = writeMultiPolygonGeometry(geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.GEOMETRY_COLLECTION:\n      {\n        geoJSON = writeGeometryCollectionGeometry(geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.CIRCLE:\n      {\n        geoJSON = {\n          type: 'GeometryCollection',\n          geometries: []\n        };\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n\n  return geoJSON;\n}\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\n\n\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  var geometries = geometry.getGeometriesArray().map(function (geometry) {\n    var options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  var right;\n\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePointGeometry(geometry, opt_options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePolygonGeometry(geometry, opt_options) {\n  var right;\n\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\nexport default GeoJSON;","map":{"version":3,"sources":["../src/format/GeoJSON.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/format/GeoJSON\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nvar GeoJSON = /** @class */ (function (_super) {\n    __extends(GeoJSON, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function GeoJSON(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this) || this;\n        /**\n         * @type {import(\"../proj/Projection.js\").default}\n         */\n        _this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n        if (options.featureProjection) {\n            _this.defaultFeatureProjection = getProjection(options.featureProjection);\n        }\n        /**\n         * Name of the geometry attribute for features.\n         * @type {string|undefined}\n         * @private\n         */\n        _this.geometryName_ = options.geometryName;\n        /**\n         * Look for the geometry name in the feature GeoJSON\n         * @type {boolean|undefined}\n         * @private\n         */\n        _this.extractGeometryName_ = options.extractGeometryName;\n        return _this;\n    }\n    /**\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n        /**\n         * @type {GeoJSONFeature}\n         */\n        var geoJSONFeature = null;\n        if (object['type'] === 'Feature') {\n            geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n        }\n        else {\n            geoJSONFeature = {\n                'type': 'Feature',\n                'geometry': /** @type {GeoJSONGeometry} */ (object),\n                'properties': null,\n            };\n        }\n        var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n        var feature = new Feature();\n        if (this.geometryName_) {\n            feature.setGeometryName(this.geometryName_);\n        }\n        else if (this.extractGeometryName_ &&\n            'geometry_name' in geoJSONFeature !== undefined) {\n            feature.setGeometryName(geoJSONFeature['geometry_name']);\n        }\n        feature.setGeometry(geometry);\n        if ('id' in geoJSONFeature) {\n            feature.setId(geoJSONFeature['id']);\n        }\n        if (geoJSONFeature['properties']) {\n            feature.setProperties(geoJSONFeature['properties'], true);\n        }\n        return feature;\n    };\n    /**\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {Array<Feature>} Features.\n     */\n    GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n        var geoJSONObject = /** @type {GeoJSONObject} */ (object);\n        /** @type {Array<import(\"../Feature.js\").default>} */\n        var features = null;\n        if (geoJSONObject['type'] === 'FeatureCollection') {\n            var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);\n            features = [];\n            var geoJSONFeatures = geoJSONFeatureCollection['features'];\n            for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n                features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n            }\n        }\n        else {\n            features = [this.readFeatureFromObject(object, opt_options)];\n        }\n        return features;\n    };\n    /**\n     * @param {GeoJSONGeometry} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n        return readGeometry(object, opt_options);\n    };\n    /**\n     * @param {Object} object Object.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     */\n    GeoJSON.prototype.readProjectionFromObject = function (object) {\n        var crs = object['crs'];\n        var projection;\n        if (crs) {\n            if (crs['type'] == 'name') {\n                projection = getProjection(crs['properties']['name']);\n            }\n            else if (crs['type'] === 'EPSG') {\n                projection = getProjection('EPSG:' + crs['properties']['code']);\n            }\n            else {\n                assert(false, 36); // Unknown SRS type\n            }\n        }\n        else {\n            projection = this.dataProjection;\n        }\n        return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n    };\n    /**\n     * Encode a feature as a GeoJSON Feature object.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONFeature} Object.\n     * @api\n     */\n    GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        /** @type {GeoJSONFeature} */\n        var object = {\n            'type': 'Feature',\n            geometry: null,\n            properties: null,\n        };\n        var id = feature.getId();\n        if (id !== undefined) {\n            object.id = id;\n        }\n        if (!feature.hasProperties()) {\n            return object;\n        }\n        var properties = feature.getProperties();\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            object.geometry = writeGeometry(geometry, opt_options);\n            delete properties[feature.getGeometryName()];\n        }\n        if (!isEmpty(properties)) {\n            object.properties = properties;\n        }\n        return object;\n    };\n    /**\n     * Encode an array of features as a GeoJSON object.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONFeatureCollection} GeoJSON Object.\n     * @api\n     */\n    GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var objects = [];\n        for (var i = 0, ii = features.length; i < ii; ++i) {\n            objects.push(this.writeFeatureObject(features[i], opt_options));\n        }\n        return {\n            type: 'FeatureCollection',\n            features: objects,\n        };\n    };\n    /**\n     * Encode a geometry as a GeoJSON object.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n     * @api\n     */\n    GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n        return writeGeometry(geometry, this.adaptOptions(opt_options));\n    };\n    return GeoJSON;\n}(JSONFeature));\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n    if (!object) {\n        return null;\n    }\n    /**\n     * @type {import(\"../geom/Geometry.js\").default}\n     */\n    var geometry;\n    switch (object['type']) {\n        case GeometryType.POINT: {\n            geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n            break;\n        }\n        case GeometryType.LINE_STRING: {\n            geometry = readLineStringGeometry(\n            /** @type {GeoJSONLineString} */ (object));\n            break;\n        }\n        case GeometryType.POLYGON: {\n            geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n            break;\n        }\n        case GeometryType.MULTI_POINT: {\n            geometry = readMultiPointGeometry(\n            /** @type {GeoJSONMultiPoint} */ (object));\n            break;\n        }\n        case GeometryType.MULTI_LINE_STRING: {\n            geometry = readMultiLineStringGeometry(\n            /** @type {GeoJSONMultiLineString} */ (object));\n            break;\n        }\n        case GeometryType.MULTI_POLYGON: {\n            geometry = readMultiPolygonGeometry(\n            /** @type {GeoJSONMultiPolygon} */ (object));\n            break;\n        }\n        case GeometryType.GEOMETRY_COLLECTION: {\n            geometry = readGeometryCollectionGeometry(\n            /** @type {GeoJSONGeometryCollection} */ (object));\n            break;\n        }\n        default: {\n            throw new Error('Unsupported GeoJSON type: ' + object.type);\n        }\n    }\n    return transformGeometryWithOptions(geometry, false, opt_options);\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n    var geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */\n    function (geometry) {\n        return readGeometry(geometry, opt_options);\n    });\n    return new GeometryCollection(geometries);\n}\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n    return new Point(object['coordinates']);\n}\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n    return new LineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n    return new MultiLineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n    return new MultiPoint(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n    return new MultiPolygon(object['coordinates']);\n}\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n    return new Polygon(object['coordinates']);\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n    geometry = transformGeometryWithOptions(geometry, true, opt_options);\n    var type = geometry.getType();\n    /** @type {GeoJSONGeometry} */\n    var geoJSON;\n    switch (type) {\n        case GeometryType.POINT: {\n            geoJSON = writePointGeometry(\n            /** @type {Point} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.LINE_STRING: {\n            geoJSON = writeLineStringGeometry(\n            /** @type {LineString} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.POLYGON: {\n            geoJSON = writePolygonGeometry(\n            /** @type {Polygon} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.MULTI_POINT: {\n            geoJSON = writeMultiPointGeometry(\n            /** @type {MultiPoint} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.MULTI_LINE_STRING: {\n            geoJSON = writeMultiLineStringGeometry(\n            /** @type {MultiLineString} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.MULTI_POLYGON: {\n            geoJSON = writeMultiPolygonGeometry(\n            /** @type {MultiPolygon} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.GEOMETRY_COLLECTION: {\n            geoJSON = writeGeometryCollectionGeometry(\n            /** @type {GeometryCollection} */ (geometry), opt_options);\n            break;\n        }\n        case GeometryType.CIRCLE: {\n            geoJSON = {\n                type: 'GeometryCollection',\n                geometries: [],\n            };\n            break;\n        }\n        default: {\n            throw new Error('Unsupported geometry type: ' + type);\n        }\n    }\n    return geoJSON;\n}\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n    var geometries = geometry.getGeometriesArray().map(function (geometry) {\n        var options = assign({}, opt_options);\n        delete options.featureProjection;\n        return writeGeometry(geometry, options);\n    });\n    return {\n        type: 'GeometryCollection',\n        geometries: geometries,\n    };\n}\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n    return {\n        type: 'LineString',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n    return {\n        type: 'MultiLineString',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n    return {\n        type: 'MultiPoint',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n    var right;\n    if (opt_options) {\n        right = opt_options.rightHanded;\n    }\n    return {\n        type: 'MultiPolygon',\n        coordinates: geometry.getCoordinates(right),\n    };\n}\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n    return {\n        type: 'Point',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n    var right;\n    if (opt_options) {\n        right = opt_options.rightHanded;\n    }\n    return {\n        type: 'Polygon',\n        coordinates: geometry.getCoordinates(right),\n    };\n}\nexport default GeoJSON;\n//# sourceMappingURL=GeoJSON.js.map"]},"metadata":{},"sourceType":"module"}