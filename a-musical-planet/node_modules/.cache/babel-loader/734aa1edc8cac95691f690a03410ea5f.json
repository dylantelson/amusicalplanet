{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/Play.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport MapPage from \"./MapPage\";\nimport GuessPopup from \"./GuessPopup\";\nimport CountryGuessInfo from \"./CountryGuessInfo.js\";\nimport \"./Play.css\";\nimport haversine from \"haversine-distance\";\nimport getCookie from \"./GetCookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\n\nconst countries = require(\"./WorldInfo.json\");\n\nconst Play = ({\n  accessToken,\n  setAccessToken,\n  currMap\n}) => {\n  _s();\n\n  const [currTrack, setCurrTrack] = useState({\n    round: 0\n  });\n  const [redirect, setRedirect] = useState(\"\");\n  const [currChosen, setCurrChosen] = useState(\"\"); //first value is a bool on whether to show popup,\n  //second is the score to show\n\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0\n  });\n  const audioRef = useRef(null);\n\n  const newGame = () => {\n    nextTrack();\n  };\n\n  const nextTrack = () => {\n    setPopup({ ...popup,\n      show: false,\n      roundScore: 0\n    });\n    setCurrChosen(\"\");\n\n    if (accessToken === null || accessToken === \"\") {\n      const accessTokenCookie = getCookie(\"accessToken\"); // const refreshTokenCookie = getCookie(\"refreshToken\");\n\n      if (accessTokenCookie !== \"\") {\n        console.log(\"GOT COOKIE!\", accessTokenCookie);\n        setAccessToken(accessTokenCookie);\n        return setRedirect(\"maps\");\n      } // if (refreshTokenCookie !== \"\") {\n      //   refreshTokens(refreshTokenCookie);\n      // }\n\n\n      console.log(\"Could not find cookie\");\n      return setRedirect(\"login\");\n    }\n\n    let currPlaylistIndex = Math.floor(Math.random() * Playlists[currMap].length);\n\n    if (Playlists[currMap][currPlaylistIndex].country === currTrack.location) {\n      if (currPlaylistIndex > 0) currPlaylistIndex--;else currPlaylistIndex++;\n    }\n\n    fetch(`https://api.spotify.com/v1/playlists/${Playlists[currMap][currPlaylistIndex].playlistId}`, {\n      headers: {\n        Authorization: \"Bearera \" + accessToken\n      }\n    }).then(response => {\n      console.log(response);\n      if (response.status >= 400) throw new Error(response);\n      return response.json();\n    }).then(data => {\n      let track = \"\";\n      let trackIndex = 0;\n\n      while (track === \"\") {\n        trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n        track = data.tracks.items[trackIndex].track;\n\n        if (track.preview_url === null) {\n          console.log(\"Track\", data.tracks.items[trackIndex].track.name, \"in country\", data.name, \"has no preview url\");\n          track = \"\";\n        }\n      }\n\n      console.log(track);\n      setCurrTrack({\n        url: track.preview_url,\n        artist: data.tracks.items[trackIndex].track.artists[0].name,\n        album: data.tracks.items[trackIndex].track.album.name,\n        image: data.tracks.items[trackIndex].track.album.images[0].url,\n        location: data.name,\n        name: data.tracks.items[trackIndex].track.name,\n        round: currTrack.round < 5 ? currTrack.round + 1 : 1\n      });\n      audioRef.current.load();\n      audioRef.current.play();\n    }).catch(err => {\n      console.log(err);\n      console.log(\"ERROR LOADING TRACK FROM COUNTRY\", Playlists[currMap][currPlaylistIndex].country);\n      console.log(\"err\", err.response);\n\n      if (err.status > 400) {\n        console.log(\"400\"); // window.location.replace(\"http://localhost:8888/getNewToken\");\n      } else console.log(\"NOT 400\"); // nextTrack();\n\n    });\n  };\n\n  const guessGiven = () => {\n    if (currChosen === currTrack.location) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore\n      });\n      return;\n    }\n\n    const chosenCountryCoords = countries.filter(function (country) {\n      return country.name.common === currChosen;\n    })[0].latlng;\n    const currTrackCountryCoords = countries.filter(function (country) {\n      return country.name.common === currTrack.location;\n    })[0].latlng;\n    let scoreDeduction = Math.ceil(haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2);\n    console.log(\"Initial deduction\", scoreDeduction);\n\n    switch (currMap) {\n      case \"Europe\":\n        scoreDeduction *= 4;\n        break;\n\n      case \"SouthAmerica\":\n        scoreDeduction *= 4;\n        break;\n\n      case \"NorthAmerica\":\n        scoreDeduction *= 3;\n        break;\n\n      case \"Asia\":\n        scoreDeduction *= 2;\n        break;\n\n      case \"Oceania\":\n        scoreDeduction *= 2;\n        break;\n\n      case \"Africa\":\n        scoreDeduction *= 2;\n        break;\n\n      default:\n        break;\n    }\n\n    console.log(\"Final deduction\", scoreDeduction);\n    let score = maxScore - scoreDeduction;\n    if (score < 0) score = 0;\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score\n    }); // if (currTrack.location === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.location}!`);\n    // }\n    // getNewArtist();\n  };\n\n  useEffect(() => {\n    nextTrack();\n  }, []);\n\n  if (redirect !== \"\") {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `/${redirect}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 12\n    }, this);\n  } // if (redirect === \"login\") {\n  //   return <Redirect to=\"/login\" />;\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\",\n        children: /*#__PURE__*/_jsxDEV(CountryGuessInfo, {\n          currChosen: currChosen,\n          guessGiven: guessGiven,\n          audioRef: audioRef,\n          trackURL: currTrack.url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-div\",\n        children: /*#__PURE__*/_jsxDEV(MapPage // currLocation={currTrack.location}\n        , {\n          setCurrChosen: setCurrChosen,\n          currChosen: currChosen,\n          currMap: currMap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), popup.show && /*#__PURE__*/_jsxDEV(GuessPopup, {\n        currTrack: currTrack,\n        currChosen: currChosen,\n        nextTrack: nextTrack,\n        roundScore: popup.roundScore,\n        sessionScore: popup.sessionScore,\n        newGame: newGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Play, \"o17WT0mXvK0zqWxu/O83CNXB6jg=\");\n\n_c = Play;\nexport default Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/Play.js"],"names":["React","useState","useEffect","useRef","Redirect","MapPage","GuessPopup","CountryGuessInfo","haversine","getCookie","maxScore","Playlists","require","countries","Play","accessToken","setAccessToken","currMap","currTrack","setCurrTrack","round","redirect","setRedirect","currChosen","setCurrChosen","popup","setPopup","show","roundScore","sessionScore","audioRef","newGame","nextTrack","accessTokenCookie","console","log","currPlaylistIndex","Math","floor","random","length","country","location","fetch","playlistId","headers","Authorization","then","response","status","Error","json","data","track","trackIndex","tracks","items","preview_url","name","url","artist","artists","album","image","images","current","load","play","catch","err","guessGiven","chosenCountryCoords","filter","common","latlng","currTrackCountryCoords","scoreDeduction","ceil","score"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport MapPage from \"./MapPage\";\nimport GuessPopup from \"./GuessPopup\";\nimport CountryGuessInfo from \"./CountryGuessInfo.js\";\nimport \"./Play.css\";\nimport haversine from \"haversine-distance\";\n\nimport getCookie from \"./GetCookie\";\n\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\nconst countries = require(\"./WorldInfo.json\");\n\nconst Play = ({ accessToken, setAccessToken, currMap }) => {\n  const [currTrack, setCurrTrack] = useState({ round: 0 });\n  const [redirect, setRedirect] = useState(\"\");\n\n  const [currChosen, setCurrChosen] = useState(\"\");\n  //first value is a bool on whether to show popup,\n  //second is the score to show\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0,\n  });\n\n  const audioRef = useRef(null);\n\n  const newGame = () => {\n    nextTrack();\n  };\n\n  const nextTrack = () => {\n    setPopup({ ...popup, show: false, roundScore: 0 });\n    setCurrChosen(\"\");\n    if (accessToken === null || accessToken === \"\") {\n      const accessTokenCookie = getCookie(\"accessToken\");\n      // const refreshTokenCookie = getCookie(\"refreshToken\");\n      if (accessTokenCookie !== \"\") {\n        console.log(\"GOT COOKIE!\", accessTokenCookie);\n        setAccessToken(accessTokenCookie);\n        return setRedirect(\"maps\");\n      }\n      // if (refreshTokenCookie !== \"\") {\n      //   refreshTokens(refreshTokenCookie);\n      // }\n      console.log(\"Could not find cookie\");\n      return setRedirect(\"login\");\n    }\n\n    let currPlaylistIndex = Math.floor(\n      Math.random() * Playlists[currMap].length\n    );\n    if (Playlists[currMap][currPlaylistIndex].country === currTrack.location) {\n      if (currPlaylistIndex > 0) currPlaylistIndex--;\n      else currPlaylistIndex++;\n    }\n    fetch(\n      `https://api.spotify.com/v1/playlists/${Playlists[currMap][currPlaylistIndex].playlistId}`,\n      {\n        headers: { Authorization: \"Bearera \" + accessToken },\n      }\n    )\n      .then((response) => {\n        console.log(response);\n        if (response.status >= 400) throw new Error(response);\n        return response.json();\n      })\n      .then((data) => {\n        let track = \"\";\n        let trackIndex = 0;\n        while (track === \"\") {\n          trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n          track = data.tracks.items[trackIndex].track;\n          if (track.preview_url === null) {\n            console.log(\n              \"Track\",\n              data.tracks.items[trackIndex].track.name,\n              \"in country\",\n              data.name,\n              \"has no preview url\"\n            );\n            track = \"\";\n          }\n        }\n        console.log(track);\n        setCurrTrack({\n          url: track.preview_url,\n          artist: data.tracks.items[trackIndex].track.artists[0].name,\n          album: data.tracks.items[trackIndex].track.album.name,\n          image: data.tracks.items[trackIndex].track.album.images[0].url,\n          location: data.name,\n          name: data.tracks.items[trackIndex].track.name,\n          round: currTrack.round < 5 ? currTrack.round + 1 : 1,\n        });\n        audioRef.current.load();\n        audioRef.current.play();\n      })\n      .catch((err) => {\n        console.log(err);\n        console.log(\n          \"ERROR LOADING TRACK FROM COUNTRY\",\n          Playlists[currMap][currPlaylistIndex].country\n        );\n        console.log(\"err\", err.response);\n        if (err.status > 400) {\n          console.log(\"400\");\n          // window.location.replace(\"http://localhost:8888/getNewToken\");\n        } else console.log(\"NOT 400\");\n        // nextTrack();\n      });\n  };\n\n  const guessGiven = () => {\n    if (currChosen === currTrack.location) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore,\n      });\n      return;\n    }\n    const chosenCountryCoords = countries.filter(function (country) {\n      return country.name.common === currChosen;\n    })[0].latlng;\n\n    const currTrackCountryCoords = countries.filter(function (country) {\n      return country.name.common === currTrack.location;\n    })[0].latlng;\n\n    let scoreDeduction = Math.ceil(\n      haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2\n    );\n\n    console.log(\"Initial deduction\", scoreDeduction);\n\n    switch (currMap) {\n      case \"Europe\":\n        scoreDeduction *= 4;\n        break;\n      case \"SouthAmerica\":\n        scoreDeduction *= 4;\n        break;\n      case \"NorthAmerica\":\n        scoreDeduction *= 3;\n        break;\n      case \"Asia\":\n        scoreDeduction *= 2;\n        break;\n      case \"Oceania\":\n        scoreDeduction *= 2;\n        break;\n      case \"Africa\":\n        scoreDeduction *= 2;\n        break;\n      default:\n        break;\n    }\n\n    console.log(\"Final deduction\", scoreDeduction);\n\n    let score = maxScore - scoreDeduction;\n    if (score < 0) score = 0;\n\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score,\n    });\n    // if (currTrack.location === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.location}!`);\n    // }\n    // getNewArtist();\n  };\n\n  useEffect(() => {\n    nextTrack();\n  }, []);\n\n  if (redirect !== \"\") {\n    return <Redirect to={`/${redirect}`} />;\n  }\n  // if (redirect === \"login\") {\n  //   return <Redirect to=\"/login\" />;\n  // }\n  return (\n    <>\n      <div className=\"play-section\">\n        <div className=\"overlay\">\n          <CountryGuessInfo\n            currChosen={currChosen}\n            guessGiven={guessGiven}\n            audioRef={audioRef}\n            trackURL={currTrack.url}\n          />\n        </div>\n        <div className=\"map-div\">\n          <MapPage\n            // currLocation={currTrack.location}\n            setCurrChosen={setCurrChosen}\n            currChosen={currChosen}\n            currMap={currMap}\n          />\n        </div>\n        {popup.show && (\n          <GuessPopup\n            currTrack={currTrack}\n            currChosen={currChosen}\n            nextTrack={nextTrack}\n            roundScore={popup.roundScore}\n            sessionScore={popup.sessionScore}\n            newGame={newGame}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}