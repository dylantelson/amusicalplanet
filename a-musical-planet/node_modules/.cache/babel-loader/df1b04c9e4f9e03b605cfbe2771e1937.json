{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js\";\nimport React, { memo } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst countries = require(\"./countries.json\");\n\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = props => {\n  const projection = geoMercator().scale(153).center([40, 50]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      \"data-tip\": \"\",\n      projection: projection,\n      style: {\n        width: \"100%\",\n        height: \"auto\",\n        outline: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        translateExtent: [[-100, -50], [860, 600]],\n        children: [/*#__PURE__*/_jsxDEV(Geographies, {\n          geography: geoUrl,\n          children: ({\n            geographies\n          }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            onClick: () => {\n              props.setCurrChosen(geo.properties.NAME);\n            },\n            onMouseEnter: () => {\n              props.setTooltipContent(geo.properties.NAME);\n            },\n            onMouseLeave: () => {\n              props.setTooltipContent(\"\");\n            },\n            style: {\n              default: {\n                fill: \"#D6D6DA\",\n                stroke: \"#000000\",\n                strokeWidth: 0.1,\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#F53\",\n                stroke: \"#000000\",\n                strokeWidth: 0.1,\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#E42\",\n                stroke: \"#000000\",\n                strokeWidth: 0.1,\n                outline: \"none\"\n              }\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), countries.map(country => {\n          {\n            console.log(country.name);\n          }\n\n          /*#__PURE__*/\n          _jsxDEV(Marker, {\n            coordinates: country.latlng,\n            fill: \"#777\",\n            children: /*#__PURE__*/_jsxDEV(\"text\", {\n              children: country.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = MapChart;\nexport default _c2 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js"],"names":["React","memo","ZoomableGroup","ComposableMap","Geographies","Geography","Marker","geoMercator","countries","require","geoUrl","rounded","num","Math","round","MapChart","props","projection","scale","center","width","height","outline","geographies","map","geo","setCurrChosen","properties","NAME","setTooltipContent","default","fill","stroke","strokeWidth","hover","pressed","rsmKey","country","console","log","name","latlng"],"mappings":"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","sourcesContent":["import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\n\nconst countries = require(\"./countries.json\");\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = (num) => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = (props) => {\n  const projection = geoMercator().scale(153).center([40, 50]);\n  return (\n    <>\n      <ComposableMap\n        data-tip=\"\"\n        projection={projection}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n          outline: \"none\",\n        }}\n      >\n        <ZoomableGroup\n          translateExtent={[\n            [-100, -50],\n            [860, 600],\n          ]}\n        >\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map((geo) => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onClick={() => {\n                    props.setCurrChosen(geo.properties.NAME);\n                  }}\n                  onMouseEnter={() => {\n                    props.setTooltipContent(geo.properties.NAME);\n                  }}\n                  onMouseLeave={() => {\n                    props.setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#D6D6DA\",\n                      stroke: \"#000000\",\n                      strokeWidth: 0.1,\n                      outline: \"none\",\n                    },\n                    hover: {\n                      fill: \"#F53\",\n                      stroke: \"#000000\",\n                      strokeWidth: 0.1,\n                      outline: \"none\",\n                    },\n                    pressed: {\n                      fill: \"#E42\",\n                      stroke: \"#000000\",\n                      strokeWidth: 0.1,\n                      outline: \"none\",\n                    },\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n          {countries.map((country) => {\n            {\n              console.log(country.name);\n            }\n            <Marker coordinates={country.latlng} fill=\"#777\">\n              <text>{country.name}</text>\n            </Marker>;\n          })}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}