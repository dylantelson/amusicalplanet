{"ast":null,"code":"var _jsxFileName = \"/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState, useEffect } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\nimport Playlists from \"./Playlists\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst worldCountries = require(\"./WorldInfo.json\"); // const europeCountries = require(\"./EuropeInfo.json\");\n\n\nconst worldGeoSVG = require(\"./WorldSVG50m.json\"); // const europeGeoSVG = require(\"./EuropeInfo.json\");\n// const locationInfo = {\n//   world: worldCountries,\n//   // europe: europeCountries,\n// };\n// const locationGeoSVG = {\n//   world: worldGeoSVG,\n// };\n\n\nconst borderWidth = 0.2;\nconst colors = {\n  asia: \"#E5B961\",\n  europe: \"#D4A29C\",\n  africa: \"#EDCC8B\",\n  southAmerica: \"#E8B298\",\n  northAmerica: \"#C7877F\",\n  oceania: \"#7FC6A4\",\n  water: \"#BDD1C5\",\n  russia: \"#DDAE7F\",\n  Selected: \"#FFAAFA\"\n};\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n  var r = (num >> 16) + amt;\n  if (r > 255) r = 255;else if (r < 0) r = 0;\n  var b = (num >> 8 & 0x00ff) + amt;\n  if (b > 255) b = 255;else if (b < 0) b = 0;\n  var g = (num & 0x0000ff) + amt;\n  if (g > 255) g = 255;else if (g < 0) g = 0;\n  return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n}\n\n_c = LightenDarkenColor;\n\nconst checkDifficulty = (mapDifficulty, countryDifficulty) => {\n  console.log(mapDifficulty);\n  if (mapDifficulty === \"Easy\") return countryDifficulty === \"Easy\";\n  if (mapDifficulty === \"Medium\") return countryDifficulty === \"Easy\" || countryDifficulty === \"Medium\"; //for some reason this necessary, otherwise it returns true even if mapDifficulty is Easy\n\n  if (mapDifficulty === \"Hard\") return true;\n  return false;\n};\n\nlet countriesToShow = [];\nlet currSelectedCountry = null;\n\nconst MapChart = ({\n  handleNewChosen,\n  mapProps,\n  currMap,\n  myCurrPos\n}) => {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    countriesToShow = [];\n    let currSelectedCountry = null;\n\n    if (currMap.slice(0, 5) === \"world\") {\n      for (const playlist of Playlists.world) {\n        if (checkDifficulty(currMap.slice(5), playlist.difficulty)) countriesToShow.push(playlist.country.replace(\" \", \"\"));\n      }\n    } else {\n      for (const playlist of Playlists[currMap]) {\n        countriesToShow.push(playlist.country.replace(\" \", \"\"));\n      }\n    }\n\n    console.log(countriesToShow);\n    setLoading(false);\n  }, [currMap]);\n\n  if (!loading) {\n    const countries = document.querySelectorAll(\".rsm-geography\");\n\n    for (const country of countries) {\n      country.setAttribute(\"style\", countriesToShow.indexOf(country.id) >= 0 ? `fill: ${colors[country.getAttribute(\"continent\")]}; pointer-events: all; stroke: #000000; stroke-width: ${borderWidth}; outline: none;` : `fill: #ccc; pointer-events: none; stroke: #000000; stroke-width: ${borderWidth}; outline: none;`);\n    }\n  } // style={{\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replace(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : countriesToShow.indexOf(geo.properties.NAME) >= 0\n  //                         ? {\n  //                             fill: colors[geo.properties.CONTINENT],\n  //                             pointerEvents: \"all\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           }\n  //                         : {\n  //                             fill: \"#ccc\",\n  //                             pointerEvents: \"none\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           },\n  //                     hover:\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replace(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : hoveredStyle(colors[geo.properties.CONTINENT]),\n  //                   }}\n\n\n  const setPressedStyle = (country, event) => {\n    if (currSelectedCountry) {\n      console.log(\"Setting old\", currSelectedCountry.element.id, \"to color \", colors[currSelectedCountry.props.CONTINENT]);\n      document.querySelector(`#${currSelectedCountry.element.id}`).style.fill = colors[currSelectedCountry.props.CONTINENT];\n    }\n\n    currSelectedCountry = {\n      element: event.target,\n      props: country\n    };\n    console.log(\"Setting\", event.target.id, \"to style \", event.target.style);\n    event.preventDefault();\n    event.target.style.fill = selectedStyle(colors[country.CONTINENT]).fill;\n  }; // const renderStyle = (country) => {\n  //   if (!country.area || country.area < 1500) return [{ fontSize: \"0px\" }, 0];\n  //   let adjustedFont =\n  //     country.area > 500000\n  //       ? country.area / 800000 + 4.5\n  //       : country.area / 800000 + 2.3;\n  //   if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n  //   if (country.name.common === \"Russia\" && currMap === \"europe\")\n  //     adjustedFont /= 2.5;\n  //   //const rightOffset = adjustedFont;\n  //   return [\n  //     {\n  //       fontSize: `${adjustedFont}px`,\n  //       // stroke: \"#FFF\",\n  //       // stroke: colors[country.CONTINENT],\n  //       // strokeWidth: `${adjustedFont / 50}px`,\n  //     },\n  //     adjustedFont - 1,\n  //   ];\n  // };\n\n\n  const renderStyle = area => {\n    if (area > 5000000) return {\n      fontSize: \"20px\"\n    };\n    if (area > 2500000) return {\n      fontSize: \"12px\"\n    };\n    if (area > 1000000) return {\n      fontSize: \"9px\"\n    };\n    if (area > 500000) return {\n      fontSize: \"7px\"\n    };\n    if (area > 250000) return {\n      fontSize: \"5px\"\n    };\n    if (area > 100000) return {\n      fontSize: \"3px\"\n    };\n    return {\n      fontSize: \"1px\"\n    };\n  };\n\n  const hoveredStyle = color => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\"\n    };\n  };\n\n  const selectedStyle = color => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\"\n    };\n  }; // const [currPos, setCurrPos] = useState({\n  //   zoom: mapProps.minZoom,\n  //   coordinates: mapProps.coordinates,\n  // });\n\n\n  const projection = geoMercator().scale(mapProps.scale).center(mapProps.center).rotate(mapProps.rotate); //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [currLocation]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      \"data-tip\": \"\",\n      projection: projection,\n      style: {\n        width: \"100%\",\n        height: \"auto\",\n        outline: \"none\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        translateExtent: mapProps.translateExtent // onMoveEnd={({ zoom, coordinates }) => {\n        //   myCurrPos = { zoom: zoom, coordinates: coordinates };\n        // }}\n        ,\n        minZoom: mapProps.minZoom,\n        maxZoom: mapProps.maxZoom,\n        zoom: currMap.slice(0, 5) === \"world\" ? mapProps.world.minZoom : mapProps[currMap].minZoom,\n        center: currMap.slice(0, 5) === \"world\" ? mapProps.world.center : mapProps[currMap].center,\n        children: [/*#__PURE__*/_jsxDEV(Geographies, {\n          geography: worldGeoSVG,\n          children: ({\n            geographies\n          }) => geographies.map(geo => {\n            return /*#__PURE__*/_jsxDEV(Geography, {\n              id: geo.properties.NAME.replace(\" \", \"\"),\n              continent: geo.properties.CONTINENT,\n              geography: geo,\n              onClick: event => {\n                setPressedStyle(geo.properties, event);\n                handleNewChosen(geo.properties.NAME, myCurrPos);\n              },\n              onMouseEnter: event => {\n                if (!currSelectedCountry || currSelectedCountry.element.id !== event.target.id) {\n                  console.log(\"ENTERING!\");\n                  event.target.style.fill = hoveredStyle(colors[event.target.getAttribute(\"continent\")]).fill;\n                }\n              },\n              onMouseLeave: event => {\n                if (currSelectedCountry && currSelectedCountry.element.id === event.target.id) {\n                  console.log(\"LEAVING SELECTED!\");\n                  event.target.style.fill = selectedStyle(colors[event.target.getAttribute(\"continent\")]).fill;\n                } else {\n                  console.log(\"CONTINENT\", event.target.getAttribute(\"continent\"));\n                  event.target.style.fill = colors[event.target.getAttribute(\"continent\")];\n                }\n              },\n              visibility: geo.properties.CONTINENT === \"Antarctica\" ? \"hidden\" : \"visible\"\n            }, geo.rsmKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), worldCountries.map(country => {\n          if (countriesToShow.indexOf(country.name.common.replace(\" \", \"\")) < 0) return null; // const currStyle = renderStyle(country);\n\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            coordinates: country.name.common === \"Russia\" && currMap === \"europe\" ? [country.latlng[1] - 60, country.latlng[0] - 6] : [country.latlng[1], country.latlng[0]],\n            fill: \"#000\",\n            children: /*#__PURE__*/_jsxDEV(\"text\", {\n              textAnchor: \"middle\",\n              pointerEvents: \"none\",\n              style: renderStyle(country.area),\n              children: country.name.common\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this)\n          }, country.name.common, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MapChart, \"J7PPXooW06IQ11rfabbvgk72KFw=\");\n\n_c2 = MapChart;\nexport default _c3 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LightenDarkenColor\");\n$RefreshReg$(_c2, \"MapChart\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js"],"names":["React","memo","useState","useEffect","ZoomableGroup","ComposableMap","Geographies","Geography","Marker","geoMercator","Playlists","worldCountries","require","worldGeoSVG","borderWidth","colors","asia","europe","africa","southAmerica","northAmerica","oceania","water","russia","Selected","LightenDarkenColor","col","amt","usePound","slice","num","parseInt","r","b","g","toString","checkDifficulty","mapDifficulty","countryDifficulty","console","log","countriesToShow","currSelectedCountry","MapChart","handleNewChosen","mapProps","currMap","myCurrPos","loading","setLoading","playlist","world","difficulty","push","country","replace","countries","document","querySelectorAll","setAttribute","indexOf","id","getAttribute","setPressedStyle","event","element","props","CONTINENT","querySelector","style","fill","target","preventDefault","selectedStyle","renderStyle","area","fontSize","hoveredStyle","color","stroke","strokeWidth","outline","projection","scale","center","rotate","width","height","translateExtent","minZoom","maxZoom","geographies","map","geo","properties","NAME","rsmKey","name","common","latlng"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\n\nimport Playlists from \"./Playlists\";\nimport \"./Map.css\";\n\nconst worldCountries = require(\"./WorldInfo.json\");\n// const europeCountries = require(\"./EuropeInfo.json\");\n\nconst worldGeoSVG = require(\"./WorldSVG50m.json\");\n// const europeGeoSVG = require(\"./EuropeInfo.json\");\n\n// const locationInfo = {\n//   world: worldCountries,\n//   // europe: europeCountries,\n// };\n\n// const locationGeoSVG = {\n//   world: worldGeoSVG,\n// };\n\nconst borderWidth = 0.2;\n\nconst colors = {\n  asia: \"#E5B961\",\n  europe: \"#D4A29C\",\n  africa: \"#EDCC8B\",\n  southAmerica: \"#E8B298\",\n  northAmerica: \"#C7877F\",\n  oceania: \"#7FC6A4\",\n  water: \"#BDD1C5\",\n  russia: \"#DDAE7F\",\n  Selected: \"#FFAAFA\",\n};\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nconst checkDifficulty = (mapDifficulty, countryDifficulty) => {\n  console.log(mapDifficulty);\n  if (mapDifficulty === \"Easy\") return countryDifficulty === \"Easy\";\n  if (mapDifficulty === \"Medium\")\n    return countryDifficulty === \"Easy\" || countryDifficulty === \"Medium\";\n  //for some reason this necessary, otherwise it returns true even if mapDifficulty is Easy\n  if (mapDifficulty === \"Hard\") return true;\n  return false;\n};\n\nlet countriesToShow = [];\nlet currSelectedCountry = null;\nconst MapChart = ({ handleNewChosen, mapProps, currMap, myCurrPos }) => {\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    countriesToShow = [];\n    let currSelectedCountry = null;\n    if (currMap.slice(0, 5) === \"world\") {\n      for (const playlist of Playlists.world) {\n        if (checkDifficulty(currMap.slice(5), playlist.difficulty))\n          countriesToShow.push(playlist.country.replace(\" \", \"\"));\n      }\n    } else {\n      for (const playlist of Playlists[currMap]) {\n        countriesToShow.push(playlist.country.replace(\" \", \"\"));\n      }\n    }\n    console.log(countriesToShow);\n    setLoading(false);\n  }, [currMap]);\n\n  if (!loading) {\n    const countries = document.querySelectorAll(\".rsm-geography\");\n    for (const country of countries) {\n      country.setAttribute(\n        \"style\",\n        countriesToShow.indexOf(country.id) >= 0\n          ? `fill: ${\n              colors[country.getAttribute(\"continent\")]\n            }; pointer-events: all; stroke: #000000; stroke-width: ${borderWidth}; outline: none;`\n          : `fill: #ccc; pointer-events: none; stroke: #000000; stroke-width: ${borderWidth}; outline: none;`\n      );\n    }\n  }\n\n  // style={{\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replace(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : countriesToShow.indexOf(geo.properties.NAME) >= 0\n  //                         ? {\n  //                             fill: colors[geo.properties.CONTINENT],\n  //                             pointerEvents: \"all\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           }\n  //                         : {\n  //                             fill: \"#ccc\",\n  //                             pointerEvents: \"none\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           },\n  //                     hover:\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replace(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : hoveredStyle(colors[geo.properties.CONTINENT]),\n  //                   }}\n\n  const setPressedStyle = (country, event) => {\n    if (currSelectedCountry) {\n      console.log(\n        \"Setting old\",\n        currSelectedCountry.element.id,\n        \"to color \",\n        colors[currSelectedCountry.props.CONTINENT]\n      );\n      document.querySelector(`#${currSelectedCountry.element.id}`).style.fill =\n        colors[currSelectedCountry.props.CONTINENT];\n    }\n    currSelectedCountry = { element: event.target, props: country };\n    console.log(\"Setting\", event.target.id, \"to style \", event.target.style);\n    event.preventDefault();\n    event.target.style.fill = selectedStyle(colors[country.CONTINENT]).fill;\n  };\n  // const renderStyle = (country) => {\n  //   if (!country.area || country.area < 1500) return [{ fontSize: \"0px\" }, 0];\n  //   let adjustedFont =\n  //     country.area > 500000\n  //       ? country.area / 800000 + 4.5\n  //       : country.area / 800000 + 2.3;\n  //   if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n\n  //   if (country.name.common === \"Russia\" && currMap === \"europe\")\n  //     adjustedFont /= 2.5;\n  //   //const rightOffset = adjustedFont;\n  //   return [\n  //     {\n  //       fontSize: `${adjustedFont}px`,\n  //       // stroke: \"#FFF\",\n  //       // stroke: colors[country.CONTINENT],\n  //       // strokeWidth: `${adjustedFont / 50}px`,\n  //     },\n  //     adjustedFont - 1,\n  //   ];\n  // };\n\n  const renderStyle = (area) => {\n    if (area > 5000000) return { fontSize: \"20px\" };\n    if (area > 2500000) return { fontSize: \"12px\" };\n    if (area > 1000000) return { fontSize: \"9px\" };\n    if (area > 500000) return { fontSize: \"7px\" };\n    if (area > 250000) return { fontSize: \"5px\" };\n    if (area > 100000) return { fontSize: \"3px\" };\n    return { fontSize: \"1px\" };\n  };\n\n  const hoveredStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n  const selectedStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n\n  // const [currPos, setCurrPos] = useState({\n  //   zoom: mapProps.minZoom,\n  //   coordinates: mapProps.coordinates,\n  // });\n  const projection = geoMercator()\n    .scale(mapProps.scale)\n    .center(mapProps.center)\n    .rotate(mapProps.rotate);\n\n  //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [currLocation]);\n\n  return (\n    <>\n      <ComposableMap\n        data-tip=\"\"\n        projection={projection}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n          outline: \"none\",\n        }}\n      >\n        <ZoomableGroup\n          translateExtent={mapProps.translateExtent}\n          // onMoveEnd={({ zoom, coordinates }) => {\n          //   myCurrPos = { zoom: zoom, coordinates: coordinates };\n          // }}\n          minZoom={mapProps.minZoom}\n          maxZoom={mapProps.maxZoom}\n          zoom={\n            currMap.slice(0, 5) === \"world\"\n              ? mapProps.world.minZoom\n              : mapProps[currMap].minZoom\n          }\n          center={\n            currMap.slice(0, 5) === \"world\"\n              ? mapProps.world.center\n              : mapProps[currMap].center\n          }\n        >\n          <Geographies geography={worldGeoSVG}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                return (\n                  <Geography\n                    id={geo.properties.NAME.replace(\" \", \"\")}\n                    continent={geo.properties.CONTINENT}\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onClick={(event) => {\n                      setPressedStyle(geo.properties, event);\n                      handleNewChosen(geo.properties.NAME, myCurrPos);\n                    }}\n                    onMouseEnter={(event) => {\n                      if (\n                        !currSelectedCountry ||\n                        currSelectedCountry.element.id !== event.target.id\n                      ) {\n                        console.log(\"ENTERING!\");\n                        event.target.style.fill = hoveredStyle(\n                          colors[event.target.getAttribute(\"continent\")]\n                        ).fill;\n                      }\n                    }}\n                    onMouseLeave={(event) => {\n                      if (\n                        currSelectedCountry &&\n                        currSelectedCountry.element.id === event.target.id\n                      ) {\n                        console.log(\"LEAVING SELECTED!\");\n                        event.target.style.fill = selectedStyle(\n                          colors[event.target.getAttribute(\"continent\")]\n                        ).fill;\n                      } else {\n                        console.log(\n                          \"CONTINENT\",\n                          event.target.getAttribute(\"continent\")\n                        );\n                        event.target.style.fill =\n                          colors[event.target.getAttribute(\"continent\")];\n                      }\n                    }}\n                    visibility={\n                      geo.properties.CONTINENT === \"Antarctica\"\n                        ? \"hidden\"\n                        : \"visible\"\n                    }\n                  />\n                );\n              })\n            }\n          </Geographies>\n          {worldCountries.map((country) => {\n            if (\n              countriesToShow.indexOf(country.name.common.replace(\" \", \"\")) < 0\n            )\n              return null;\n            // const currStyle = renderStyle(country);\n            return (\n              <Marker\n                key={country.name.common}\n                coordinates={\n                  country.name.common === \"Russia\" && currMap === \"europe\"\n                    ? [country.latlng[1] - 60, country.latlng[0] - 6]\n                    : [country.latlng[1], country.latlng[0]]\n                }\n                fill=\"#000\"\n              >\n                <text\n                  textAnchor=\"middle\"\n                  pointerEvents=\"none\"\n                  style={renderStyle(country.area)}\n                >\n                  {country.name.common}\n                </text>\n                {/* {currPos.zoom * 2 + currStyle[1] > 9 ? (\n                  currStyle[1] > country.name.common.length ? (\n                    <text\n                      textAnchor=\"middle\"\n                      pointerEvents=\"none\"\n                      style={currStyle[0]}\n                    >\n                      {country.name.common}\n                    </text>\n                  ) : (\n                    country.name.common.split(\" \").map((word, index) => {\n                      return (\n                        <text\n                          key={word + index}\n                          textRendering=\"optimizeSpeed\"\n                          textAnchor=\"middle\"\n                          pointerEvents=\"none\"\n                          y={(currStyle[1] / 1.3 + 1.3) * index}\n                          style={currStyle[0]}\n                        >\n                          {word}\n                        </text>\n                      );\n                    })\n                  )\n                ) : (\n                  <></>\n                )} */}\n              </Marker>\n            );\n          })}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}