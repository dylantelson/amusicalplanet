[{"/home/dylan/MusicGuessr/a-musical-planet/src/index.js":"1","/home/dylan/MusicGuessr/a-musical-planet/src/App.js":"2","/home/dylan/MusicGuessr/a-musical-planet/src/reportWebVitals.js":"3","/home/dylan/MusicGuessr/a-musical-planet/src/Auth.js":"4","/home/dylan/MusicGuessr/a-musical-planet/src/Play.js":"5","/home/dylan/MusicGuessr/a-musical-planet/src/MapPage.js":"6","/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js":"7","/home/dylan/MusicGuessr/a-musical-planet/src/GuessPopup.js":"8","/home/dylan/MusicGuessr/a-musical-planet/src/Header.js":"9","/home/dylan/MusicGuessr/a-musical-planet/src/Login.js":"10","/home/dylan/MusicGuessr/a-musical-planet/src/CountryGuessInfo.js":"11","/home/dylan/MusicGuessr/a-musical-planet/src/ChooseMap.js":"12","/home/dylan/MusicGuessr/a-musical-planet/src/MapItem.js":"13","/home/dylan/MusicGuessr/a-musical-planet/src/GetCookie.js":"14","/home/dylan/MusicGuessr/a-musical-planet/src/AudioPlayer.js":"15","/home/dylan/MusicGuessr/a-musical-planet/src/Leaderboard.js":"16","/home/dylan/MusicGuessr/a-musical-planet/src/LeaderboardUser.js":"17","/home/dylan/MusicGuessr/a-musical-planet/src/PersonalPage.js":"18","/home/dylan/MusicGuessr/a-musical-planet/src/Summary.js":"19","/home/dylan/MusicGuessr/a-musical-planet/src/SummaryItem.js":"20","/home/dylan/MusicGuessr/a-musical-planet/src/CustomiFrame.js":"21","/home/dylan/MusicGuessr/a-musical-planet/src/GetMixedColor.js":"22"},{"size":500,"mtime":1627171098668,"results":"23","hashOfConfig":"24"},{"size":6945,"mtime":1631128109423,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1627171098668,"results":"26","hashOfConfig":"24"},{"size":2590,"mtime":1627497325608,"results":"27","hashOfConfig":"28"},{"size":9029,"mtime":1631122667623,"results":"29","hashOfConfig":"24"},{"size":506,"mtime":1630776293122,"results":"30","hashOfConfig":"24"},{"size":12196,"mtime":1630863069064,"results":"31","hashOfConfig":"24"},{"size":3216,"mtime":1630798469466,"results":"32","hashOfConfig":"24"},{"size":3094,"mtime":1631127811203,"results":"33","hashOfConfig":"24"},{"size":326,"mtime":1627702789407,"results":"34","hashOfConfig":"24"},{"size":825,"mtime":1630281115495,"results":"35","hashOfConfig":"24"},{"size":1859,"mtime":1630767085679,"results":"36","hashOfConfig":"24"},{"size":883,"mtime":1630784280515,"results":"37","hashOfConfig":"24"},{"size":397,"mtime":1628138783928,"results":"38","hashOfConfig":"24"},{"size":2415,"mtime":1630281065145,"results":"39","hashOfConfig":"24"},{"size":2479,"mtime":1631121485662,"results":"40","hashOfConfig":"24"},{"size":653,"mtime":1630767085683,"results":"41","hashOfConfig":"24"},{"size":3965,"mtime":1631121485662,"results":"42","hashOfConfig":"24"},{"size":2002,"mtime":1630798693861,"results":"43","hashOfConfig":"24"},{"size":940,"mtime":1630287541147,"results":"44","hashOfConfig":"24"},{"size":343,"mtime":1629655015084,"results":"45","hashOfConfig":"24"},{"size":680,"mtime":1630287417364,"results":"46","hashOfConfig":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"heeqos",{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"1lt5bzp",{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},"/home/dylan/MusicGuessr/a-musical-planet/src/index.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/App.js",["104","105","106"],"/home/dylan/MusicGuessr/a-musical-planet/src/reportWebVitals.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/Auth.js",[],["107","108"],"/home/dylan/MusicGuessr/a-musical-planet/src/Play.js",["109","110","111"],"import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport MapPage from \"./MapPage\";\nimport GuessPopup from \"./GuessPopup\";\nimport CountryGuessInfo from \"./CountryGuessInfo.js\";\nimport \"./Play.scss\";\nimport haversine from \"haversine-distance\";\n\nimport getCookie from \"./GetCookie\";\n\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\nconst countries = require(\"./WorldInfo.json\");\nconst mapProps = require(\"./MapProps.json\");\nconst colors = require(\"./colors.json\");\n\nconst Play = ({\n  accessToken,\n  setAccessTokenHandler,\n  setTokenFromCookie,\n  currMap,\n  sendScoreToServer,\n}) => {\n  const [currTrack, setCurrTrack] = useState({ round: 0 });\n  const [redirect, setRedirect] = useState(\"\");\n\n  const [currChosen, setCurrChosen] = useState(\"\");\n\n  const handleNewChosen = useCallback((newChosen) => {\n    setCurrChosen(newChosen);\n  }, []);\n\n  //first value is a bool on whether to show popup,\n  //second is the score to show\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0,\n    sessionInfo: [],\n  });\n\n  const audioRef = useRef(null);\n\n  const newGame = () => {\n    nextTrack();\n    setPopup({\n      show: false,\n      roundScore: 0,\n      sessionScore: 0,\n      sessionInfo: [],\n    });\n  };\n\n  const nextTrack = () => {\n    setPopup({\n      ...popup,\n      show: false,\n      roundScore: 0,\n    });\n    setCurrChosen(\"\");\n    console.log(\"PLAY_ACCESS_TOKEN\", accessToken);\n    if (accessToken === null || accessToken === \"\") {\n      return setRedirect(\"login\");\n    }\n\n    let relevantPlaylists = Playlists[currMap];\n    if (currMap.slice(0, 5) === \"world\") {\n      if (currMap.slice(5) === \"Easy\")\n        relevantPlaylists = Playlists.world.filter(\n          (country) => country.difficulty === \"Easy\"\n        );\n      else if (currMap.slice(5) === \"Medium\") {\n        relevantPlaylists = Playlists.world.filter(\n          (country) =>\n            country.difficulty === \"Easy\" || country.difficulty === \"Medium\"\n        );\n      } else relevantPlaylists = Playlists.world;\n    }\n\n    let currPlaylistIndex = Math.floor(\n      Math.random() * relevantPlaylists.length\n    );\n\n    if (relevantPlaylists[currPlaylistIndex].country === currTrack.location) {\n      nextTrack();\n      return;\n      // if (currPlaylistIndex > 0) currPlaylistIndex--;\n      // else currPlaylistIndex++;\n    }\n    fetch(\n      `https://api.spotify.com/v1/playlists/${relevantPlaylists[currPlaylistIndex].playlistId}`,\n      {\n        headers: { Authorization: \"Bearer \" + accessToken },\n      }\n    )\n      .then((response) => {\n        console.log(response.status);\n        if (response.status >= 400) throw response;\n        return response.json();\n      })\n      .then((data) => {\n        let track = \"\";\n        let trackIndex = 0;\n        while (track === \"\") {\n          trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n          track = data.tracks.items[trackIndex].track;\n          if (track.preview_url === null) {\n            console.log(\n              \"Track\",\n              data.tracks.items[trackIndex].track.name,\n              \"in country\",\n              data.name,\n              \"has no preview url\"\n            );\n            track = \"\";\n          }\n        }\n        console.log(track);\n        setCurrTrack({\n          url: track.preview_url,\n          artist: data.tracks.items[trackIndex].track.artists[0].name,\n          album: data.tracks.items[trackIndex].track.album.name,\n          image: data.tracks.items[trackIndex].track.album.images[0].url,\n          location: data.name,\n          name: data.tracks.items[trackIndex].track.name,\n          round: currTrack.round < 5 ? currTrack.round + 1 : 1,\n          id: data.tracks.items[trackIndex].track.id,\n        });\n        audioRef.current.load();\n        audioRef.current.play();\n      })\n      .catch((err) => {\n        console.log(\n          \"ERROR LOADING TRACK FROM COUNTRY\",\n          relevantPlaylists[currPlaylistIndex].country\n        );\n        console.log(\"err\", err);\n        console.log(\"err status\", err.status);\n        if (err.status === 400)\n          return window.location.replace(\n            `${process.env.REACT_APP_BACKEND_URI}/getNewToken`\n          );\n        if (err.status === 401) {\n          return refreshToken();\n        }\n        if (err.status === 404) return nextTrack();\n        //this is only really for error 401, meaning\n        return setRedirect(\"maps\");\n      });\n  };\n\n  const refreshToken = () => {\n    console.log(\"OLD ACCESS TOKEN:\", accessToken);\n    fetch(`${process.env.REACT_APP_BACKEND_URI}/refreshToken`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((newAccessToken) => newAccessToken.json())\n      .then((data) => {\n        if (data && data.access_token) {\n          console.log(\"RETURNING NEW ACCESS TOKEN:\", data.access_token);\n          setAccessTokenHandler(data.access_token);\n          return nextTrack();\n        }\n        console.log(\"Could not refresh! Going to server's /getNewToken...\");\n        return window.location.replace(\n          `${process.env.REACT_APP_BACKEND_URI}/getNewToken`\n        );\n      });\n  };\n\n  const guessGiven = () => {\n    audioRef.current.pause();\n    const currChosenCountryDOM = document.querySelector(\n      `#${\n        currChosen[0].toLowerCase() + currChosen.slice(1).replaceAll(\" \", \"\")\n      }`\n    );\n    if (currChosenCountryDOM) {\n      currChosenCountryDOM.classList.remove(\"pressed\");\n      currChosenCountryDOM.style.fill =\n        colors[currChosenCountryDOM.getAttribute(\"continent\")];\n    }\n    const currTrackCountry = countries.filter(function (country) {\n      return country.name.common === currTrack.location;\n    })[0];\n    if (currChosen === currTrack.location) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore,\n        sessionInfo: [\n          ...popup.sessionInfo,\n          {\n            country: currTrack.location,\n            songId: currTrack.id,\n            correct: true,\n            score: 5000,\n            code: currTrackCountry.cca2.toLowerCase(),\n          },\n        ],\n      });\n      return;\n    }\n\n    const currTrackCountryCoords = currTrackCountry.latlng;\n\n    const chosenCountryCoords = countries.filter(function (country) {\n      return country.name.common === currChosen;\n    })[0].latlng;\n\n    let scoreDeduction = Math.ceil(\n      haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2\n    );\n\n    console.log(\"Initial deduction\", scoreDeduction);\n\n    switch (currMap) {\n      case \"Europe\":\n        scoreDeduction *= 4;\n        break;\n      case \"SouthAmerica\":\n        scoreDeduction *= 4;\n        break;\n      case \"NorthAmerica\":\n        scoreDeduction *= 3;\n        break;\n      case \"Asia\":\n        scoreDeduction *= 2;\n        break;\n      case \"Oceania\":\n        scoreDeduction *= 2;\n        break;\n      case \"Africa\":\n        scoreDeduction *= 2;\n        break;\n      default:\n        break;\n    }\n\n    console.log(\"Final deduction\", scoreDeduction);\n\n    let score = maxScore - scoreDeduction;\n    if (score < 0) score = 0;\n\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score,\n      sessionInfo: [\n        ...popup.sessionInfo,\n        {\n          country: currTrack.location,\n          songId: currTrack.id,\n          correct: false,\n          score: score,\n          code: currTrackCountry.cca2.toLowerCase(),\n        },\n      ],\n    });\n    // if (currTrack.location === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.location}!`);\n    // }\n    // getNewArtist();\n  };\n\n  useEffect(() => {\n    nextTrack();\n  }, []);\n\n  if (redirect !== \"\") {\n    return <Redirect to={`/${redirect}`} />;\n  }\n  // if (redirect === \"login\") {\n  //   return <Redirect to=\"/login\" />;\n  // }\n  return (\n    <>\n      <div className=\"play-section\">\n        <div className=\"overlay\">\n          <CountryGuessInfo\n            currChosen={currChosen}\n            guessGiven={guessGiven}\n            audioRef={audioRef}\n            trackURL={currTrack.url}\n          />\n          {/* <button onClick={refreshToken}>Refresh</button> */}\n        </div>\n        <div className=\"map-div\">\n          <MapPage handleNewChosen={handleNewChosen} currMap={currMap} />\n        </div>\n        <GuessPopup\n          show={popup.show}\n          currMap={currMap}\n          currTrack={currTrack}\n          currChosen={currChosen}\n          nextTrack={nextTrack}\n          roundScore={popup.roundScore}\n          sessionScore={popup.sessionScore}\n          sessionInfo={popup.sessionInfo}\n          sendScoreToServer={sendScoreToServer}\n          newGame={newGame}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Play;\n","/home/dylan/MusicGuessr/a-musical-planet/src/MapPage.js",["112"],"import React, { memo } from \"react\";\nimport MapChart from \"./MapChart\";\nimport \"./Map.css\";\n\nconst mapProps = require(\"./MapProps.json\");\n\nconst MapPage = ({ handleNewChosen, currMap }) => {\n  return (\n    <>\n      <div className=\"map\">\n        <MapChart\n          handleNewChosen={handleNewChosen}\n          currMap={currMap}\n          mapProps={\n            currMap.slice(0, 5) === \"world\" ? mapProps.world : mapProps[currMap]\n          }\n        />\n      </div>\n    </>\n  );\n};\n\nexport default MapPage;\n","/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js",["113"],"import React, { memo, useState, useEffect } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\n\nimport Playlists from \"./Playlists\";\nimport \"./Map.css\";\n\nconst worldCountries = require(\"./WorldInfo.json\");\n// const europeCountries = require(\"./EuropeInfo.json\");\n\nconst worldGeoSVG = require(\"./WorldSVG50m.json\");\nconst colors = require(\"./colors.json\");\n// const europeGeoSVG = require(\"./EuropeInfo.json\");\n\n// const locationInfo = {\n//   world: worldCountries,\n//   // europe: europeCountries,\n// };\n\n// const locationGeoSVG = {\n//   world: worldGeoSVG,\n// };\n\nconst borderWidth = 0.2;\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nconst camelize = (word) => {\n  return word[0].toLowerCase() + word.slice(1).replaceAll(\" \", \"\");\n};\n\nconst checkDifficulty = (mapDifficulty, countryDifficulty) => {\n  if (mapDifficulty === \"Easy\") return countryDifficulty === \"Easy\";\n  if (mapDifficulty === \"Medium\")\n    return countryDifficulty === \"Easy\" || countryDifficulty === \"Medium\";\n  //for some reason this necessary, otherwise it returns true even if mapDifficulty is Easy\n  if (mapDifficulty === \"Hard\") return true;\n  return false;\n};\n\nlet countriesToShow = [];\nlet currSelectedCountry = null;\nconst MapChart = ({ handleNewChosen, mapProps, currMap }) => {\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    countriesToShow = [];\n    let currSelectedCountry = null;\n    if (currMap.slice(0, 5) === \"world\") {\n      for (const playlist of Playlists.world) {\n        if (checkDifficulty(currMap.slice(5), playlist.difficulty))\n          countriesToShow.push(camelize(playlist.country));\n      }\n    } else {\n      for (const playlist of Playlists[currMap]) {\n        countriesToShow.push(camelize(playlist.country));\n      }\n    }\n    console.log(countriesToShow);\n    var waitForMapLoad = setInterval(function () {\n      if (document.querySelectorAll(\".rsm-geography\").length !== 0) {\n        clearInterval(waitForMapLoad);\n        setLoading(false);\n      }\n    }, 500);\n  }, [currMap]);\n\n  if (!loading) {\n    const countries = document.querySelectorAll(\".rsm-geography\");\n    for (const country of countries) {\n      country.setAttribute(\n        \"style\",\n        countriesToShow.indexOf(country.id) >= 0\n          ? `fill: ${\n              colors[country.getAttribute(\"continent\")]\n            }; pointer-events: all; stroke: #000000; stroke-width: ${borderWidth}; outline: none; visibility: visible;`\n          : `fill: #ccc; pointer-events: none; stroke: #000000; stroke-width: ${borderWidth}; outline: none; visibility: visible`\n      );\n    }\n  }\n\n  // style={{\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replaceAll(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : countriesToShow.indexOf(geo.properties.NAME) >= 0\n  //                         ? {\n  //                             fill: colors[geo.properties.CONTINENT],\n  //                             pointerEvents: \"all\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           }\n  //                         : {\n  //                             fill: \"#ccc\",\n  //                             pointerEvents: \"none\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           },\n  //                     hover:\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replaceAll(\" \", \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : hoveredStyle(colors[geo.properties.CONTINENT]),\n  //                   }}\n\n  const setPressedStyle = (country, event) => {\n    if (currSelectedCountry) {\n      //if user clicked on already selected country, return\n      if (event.target.classList.contains(\"pressed\")) return;\n      if (!(currSelectedCountry.element.id === event.target.id)) {\n        const prevCountry = document.querySelector(\n          `#${currSelectedCountry.element.id}`\n        );\n        prevCountry.style.fill = colors[currSelectedCountry.props.CONTINENT];\n        prevCountry.classList.remove(\"pressed\");\n      }\n    }\n    currSelectedCountry = { element: event.target, props: country };\n    event.target.style.fill = selectedStyle(colors[country.CONTINENT]).fill;\n    event.target.classList.add(\"pressed\");\n  };\n\n  // const clearPressedStyle = () => {\n  //   if (currSelectedCountry) {\n  //     document.querySelector(`#${currSelectedCountry.element.id}`).style.fill =\n  //       colors[currSelectedCountry.props.CONTINENT];\n  //     currSelectedCountry = null;\n  //   }\n  // };\n\n  // const renderStyle = (country) => {\n  //   if (!country.area || country.area < 1500) return [{ fontSize: \"0px\" }, 0];\n  //   let adjustedFont =\n  //     country.area > 500000\n  //       ? country.area / 800000 + 4.5\n  //       : country.area / 800000 + 2.3;\n  //   if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n\n  //   if (country.name.common === \"Russia\" && currMap === \"europe\")\n  //     adjustedFont /= 2.5;\n  //   //const rightOffset = adjustedFont;\n  //   return [\n  //     {\n  //       fontSize: `${adjustedFont}px`,\n  //       // stroke: \"#FFF\",\n  //       // stroke: colors[country.CONTINENT],\n  //       // strokeWidth: `${adjustedFont / 50}px`,\n  //     },\n  //     adjustedFont - 1,\n  //   ];\n  // };\n\n  const renderStyle = (area) => {\n    if (area > 5000000) return { fontSize: \"20px\" };\n    if (area > 2500000) return { fontSize: \"12px\" };\n    if (area > 1000000) return { fontSize: \"9px\" };\n    if (area > 500000) return { fontSize: \"7px\" };\n    if (area > 300000) return { fontSize: \"5px\" };\n    if (area > 200000) return { fontSize: \"4px\" };\n    if (area > 100000) return { fontSize: \"3px\" };\n    if (area > 70000) return { fontSize: \"2.5px\" };\n    return { fontSize: \"2px\" };\n  };\n\n  const hoveredStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n  const selectedStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n\n  // const [currPos, setCurrPos] = useState({\n  //   zoom: mapProps.minZoom,\n  //   coordinates: mapProps.coordinates,\n  // });\n  const projection = geoMercator()\n    .scale(mapProps.scale)\n    .center(mapProps.center)\n    .rotate(mapProps.rotate);\n\n  //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [currLocation]);\n\n  return (\n    <>\n      {loading ? <h1 class=\"mapLoading\">Loading...</h1> : <></>}\n      <ComposableMap\n        data-tip=\"\"\n        projection={projection}\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n          outline: \"none\",\n        }}\n      >\n        <ZoomableGroup\n          translateExtent={mapProps.translateExtent}\n          minZoom={mapProps.minZoom}\n          maxZoom={mapProps.maxZoom}\n          zoom={mapProps.minZoom}\n          center={mapProps.coordinates}\n        >\n          <Geographies geography={worldGeoSVG}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                return (\n                  <Geography\n                    id={camelize(geo.properties.NAME)}\n                    continent={geo.properties.CONTINENT}\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onClick={(event) => {\n                      setPressedStyle(geo.properties, event);\n                      handleNewChosen(geo.properties.NAME);\n                    }}\n                    onMouseEnter={(event) => {\n                      if (\n                        !currSelectedCountry ||\n                        currSelectedCountry.element.id !== event.target.id ||\n                        !currSelectedCountry.element.classList.contains(\n                          \"pressed\"\n                        )\n                      ) {\n                        event.target.style.fill = hoveredStyle(\n                          colors[event.target.getAttribute(\"continent\")]\n                        ).fill;\n                      }\n                    }}\n                    onMouseLeave={(event) => {\n                      if (\n                        currSelectedCountry &&\n                        currSelectedCountry.element.id === event.target.id &&\n                        currSelectedCountry.element.classList.contains(\n                          \"pressed\"\n                        )\n                      ) {\n                        event.target.style.fill = selectedStyle(\n                          colors[event.target.getAttribute(\"continent\")]\n                        ).fill;\n                      } else {\n                        event.target.style.fill =\n                          colors[event.target.getAttribute(\"continent\")];\n                      }\n                    }}\n                    visibility={\"hidden\"}\n                  />\n                );\n              })\n            }\n          </Geographies>\n          {worldCountries.map((country) => {\n            if (\n              loading ||\n              countriesToShow.indexOf(camelize(country.name.common)) < 0\n            )\n              return null;\n            // const currStyle = renderStyle(country);\n            return (\n              <Marker\n                key={country.name.common}\n                coordinates={\n                  country.name.common === \"Russia\" && currMap === \"europe\"\n                    ? [country.latlng[1] - 57, country.latlng[0] - 6]\n                    : [country.latlng[1], country.latlng[0]]\n                }\n                fill=\"#000\"\n              >\n                <text\n                  textAnchor=\"middle\"\n                  pointerEvents=\"none\"\n                  style={renderStyle(country.area)}\n                >\n                  {country.name.common}\n                </text>\n                {/* {currPos.zoom * 2 + currStyle[1] > 9 ? (\n                  currStyle[1] > country.name.common.length ? (\n                    <text\n                      textAnchor=\"middle\"\n                      pointerEvents=\"none\"\n                      style={currStyle[0]}\n                    >\n                      {country.name.common}\n                    </text>\n                  ) : (\n                    country.name.common.split(\" \").map((word, index) => {\n                      return (\n                        <text\n                          key={word + index}\n                          textRendering=\"optimizeSpeed\"\n                          textAnchor=\"middle\"\n                          pointerEvents=\"none\"\n                          y={(currStyle[1] / 1.3 + 1.3) * index}\n                          style={currStyle[0]}\n                        >\n                          {word}\n                        </text>\n                      );\n                    })\n                  )\n                ) : (\n                  <></>\n                )} */}\n              </Marker>\n            );\n          })}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n","/home/dylan/MusicGuessr/a-musical-planet/src/GuessPopup.js",["114","115"],"import React, { useState, useContext, useEffect } from \"react\";\n// import { UserContext } from \"./App.js\";\n\nimport Summary from \"./Summary\";\nimport CustomiFrame from \"./CustomiFrame\";\nimport getMixedColor from \"./GetMixedColor\";\n\nconst GuessPopup = ({\n  show,\n  currChosen,\n  currTrack,\n  nextTrack,\n  roundScore,\n  sessionScore,\n  sessionInfo,\n  newGame,\n  sendScoreToServer,\n  currMap,\n}) => {\n  // const userData = useContext(UserContext);\n  // console.log(\"USER DATA\");\n  // console.log(userData);\n\n  const [gameFinished, setGameFinished] = useState(false);\n  const [showSummary, setShowSummary] = useState(false);\n  const correctText = (\n    <div>\n      <h1>Good job!</h1>\n      <h3>You correctly guessed {currChosen}</h3>\n    </div>\n  );\n  const incorrectText = (\n    <div>\n      <h1>Whoops!</h1>\n      <h3>The answer was {currTrack.location}</h3>\n    </div>\n  );\n\n  let correct = false;\n  if (currChosen === currTrack.location) correct = true;\n\n  if (show && !gameFinished && currTrack.round === 5) {\n    setGameFinished(true);\n    console.log(\"SENDING SCORE TO SERVER:\", sessionScore);\n    sendScoreToServer(sessionScore);\n  }\n\n  const summaryExit = () => {\n    setShowSummary(false);\n    setGameFinished(false);\n    newGame();\n  };\n\n  return (\n    <>\n      <Summary\n        show={showSummary}\n        sessionScore={sessionScore}\n        sessionInfo={sessionInfo}\n        summaryExit={summaryExit}\n      />\n      <div\n        className={\"popup-container\" + (!show || showSummary ? \" hidden\" : \"\")}\n      >\n        <div\n          className={\"guess-popup\"}\n          style={{ background: `#${getMixedColor(roundScore / 5000)}` }}\n        >\n          <h3 className=\"indexText\">{currTrack.round}/5</h3>\n          <div className=\"popupText\">\n            {correct ? correctText : incorrectText}\n            <h3 id=\"score\">\n              Score: {sessionScore} (+{roundScore})\n            </h3>\n          </div>\n          <div className=\"song-info\">\n            <CustomiFrame\n              src={`https://open.spotify.com/embed/track/${currTrack.id}`}\n              width=\"80%\"\n              height=\"300\"\n            />\n            {/* <img\n            src={currTrack.image}\n            alt=\"Song Album\"\n            width=\"300\"\n            height=\"300\"\n          ></img>\n          <div className=\"text-div\">\n            <h3>{currTrack.name}</h3>\n            <h4>{currTrack.artist}</h4>\n            <h4>{currTrack.album}</h4>\n          </div> */}\n          </div>\n          <div\n            className={\"popup-buttons\" + (!correct ? \" incorrect-text\" : \"\")}\n          >\n            {/* <button>LIKE</button> */}\n            {/* <button>PLAY</button> */}\n            {currTrack.round < 5 ? (\n              <button\n                style={{ color: `#${getMixedColor(roundScore / 5000)}` }}\n                onClick={nextTrack}\n              >\n                NEXT\n              </button>\n            ) : (\n              <button\n                style={{ color: `#${getMixedColor(roundScore / 5000)}` }}\n                onClick={() => setShowSummary(true)}\n              >\n                SUMMARY\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default GuessPopup;\n","/home/dylan/MusicGuessr/a-musical-planet/src/Header.js",["116"],"import React, { useContext, useState } from \"react\";\nimport { BrowserRouter as Router, NavLink } from \"react-router-dom\";\n\nimport { UserContext } from \"./App.js\";\nimport \"./Header.scss\";\n\nconst Header = ({ setRedirect, checkToken }) => {\n  const userData = useContext(UserContext);\n  const [hamburgerOpen, setHamburgerOpen] = useState(false);\n  const menu = document.getElementById(\"menu\");\n  if (\n    !(window.location.pathname === \"/\") &&\n    userData &&\n    userData.userName === \"\"\n  ) {\n    checkToken();\n  }\n\n  const openMenu = () => {\n    console.log(\"openin!\");\n    if (hamburgerOpen) {\n      menu.style.left = \"100vw\";\n      menu.style.visibility = \"hidden\";\n    } else {\n      menu.style.left = \"0px\";\n      menu.style.visibility = \"visible\";\n    }\n    setHamburgerOpen(!hamburgerOpen);\n  };\n\n  return (\n    <>\n      <div className=\"header\">\n        <div className=\"logo\">\n          <h1>A Musical Planet</h1>\n        </div>\n        <div\n          className={\"hamburger\" + (hamburgerOpen ? \" open\" : \"\")}\n          onClick={openMenu}\n        >\n          <span></span>\n          <span></span>\n          <span></span>\n          <span></span>\n        </div>\n        <div className=\"navbar\">\n          <NavLink\n            className=\"linkButton\"\n            to=\"/maps\"\n            activeStyle={{ backgroundColor: \"white\" }}\n          >\n            Maps\n          </NavLink>\n          <NavLink\n            className=\"linkButton\"\n            to=\"/about\"\n            activeStyle={{ backgroundColor: \"white\" }}\n          >\n            About\n          </NavLink>\n          <NavLink\n            className=\"linkButton\"\n            to=\"/leaderboard\"\n            activeStyle={{ backgroundColor: \"white\" }}\n          >\n            Leaderboard\n          </NavLink>\n          {userData && userData.displayName ? (\n            <NavLink className=\"userLink\" to={`/user/${userData.userName}`}>\n              <img src={userData.profilePicture} alt=\"\" />\n            </NavLink>\n          ) : (\n            <></>\n          )}\n        </div>\n      </div>\n      <ul\n        id=\"menu\"\n        className={!hamburgerOpen ? \" hidden\" : \"\"}\n        onClick={openMenu}\n      >\n        <NavLink\n          className=\"linkButton\"\n          to=\"/maps\"\n          activeStyle={{ backgroundColor: \"#333\", color: \"#fff\" }}\n        >\n          Maps\n        </NavLink>\n        <NavLink\n          className=\"linkButton\"\n          to=\"/about\"\n          activeStyle={{ backgroundColor: \"#333\", color: \"#fff\" }}\n        >\n          About\n        </NavLink>\n        <NavLink\n          className=\"linkButton\"\n          to=\"/leaderboard\"\n          activeStyle={{ backgroundColor: \"#333\", color: \"#fff\" }}\n        >\n          Leaderboard\n        </NavLink>\n        {userData && userData.displayName ? (\n          <NavLink\n            className=\"linkButton\"\n            to={`/user/${userData.userName}`}\n            activeStyle={{ backgroundColor: \"#333\", color: \"#fff\" }}\n          >\n            {userData.displayName}\n          </NavLink>\n        ) : (\n          <></>\n        )}\n      </ul>\n    </>\n  );\n};\n\nexport default Header;\n","/home/dylan/MusicGuessr/a-musical-planet/src/Login.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/CountryGuessInfo.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/ChooseMap.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/MapItem.js",["117"],"import React, { useContext } from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { UserContext } from \"./App.js\";\n\nconst MapItem = ({ map, handleMapChosen }) => {\n  const userData = useContext(UserContext);\n\n  const formattedMapName =\n    map.name[0].toLowerCase() + map.name.slice(1).replaceAll(\" \", \"\");\n  const maxScore =\n    userData &&\n    userData.stats &&\n    userData.stats.maxScores &&\n    userData.stats.maxScores[formattedMapName]\n      ? userData.stats.maxScores[formattedMapName]\n      : 0;\n  return (\n    <div className=\"MapItem\">\n      <img src={\"/mapimages/\" + map.image} alt={map.name} />\n      <h1>{map.name}</h1>\n      <p>{map.description}</p>\n      <p>{`Max Score: ${maxScore}`}</p>\n      <Link to=\"/play\" onClick={() => handleMapChosen(map.name)} replace>\n        Play\n      </Link>\n    </div>\n  );\n};\n\nexport default MapItem;\n","/home/dylan/MusicGuessr/a-musical-planet/src/GetCookie.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/AudioPlayer.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/Leaderboard.js",["118","119"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MapData from \"./MapData.json\";\nimport LeaderboardUser from \"./LeaderboardUser\";\nimport \"./Leaderboard.scss\";\n\nconst Leaderboard = () => {\n  const [leaderboardStats, setLeaderboardStats] = useState([]);\n  const [chosenMap, setChosenMap] = useState(\"worldEasy\");\n  const [currPage, setCurrPage] = useState(0);\n\n  useEffect(() => {\n    axios(`${process.env.REACT_APP_BACKEND_URI}/getLeaderboard`, {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"GET\",\n    }).then((leaderboardData) => {\n      console.log(\"LEADERBOARD:\");\n      console.log(leaderboardData);\n      setLeaderboardStats(leaderboardData.data);\n    });\n  }, []);\n\n  return (\n    <div className=\"leaderboardContainer\">\n      <div className=\"leaderboardHead\">\n        <h1>Leaderboard</h1>\n        <select\n          id=\"maplist\"\n          onChange={(e) => {\n            setChosenMap(\n              e.target.value[0].toLowerCase() +\n                e.target.value.slice(1).replaceAll(\" \", \"\")\n            );\n            setCurrPage(0);\n          }}\n        >\n          {MapData.map((map) => (\n            <option key={map.name} value={map.name}>\n              {map.name}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"leaderboard\">\n        <img\n          src=\"/next.png\"\n          id=\"leftArrow\"\n          className={currPage <= 0 ? \"disabledArrow\" : \"\"}\n          onClick={() => (currPage > 0 ? setCurrPage(currPage - 1) : null)}\n        />\n        <div className=\"leaderboardUsers\">\n          {leaderboardStats[chosenMap] ? (\n            leaderboardStats[chosenMap]\n              .slice(currPage * 5, currPage * 5 + 5)\n              .map((userData, rank) => (\n                <LeaderboardUser\n                  key={\n                    userData.userName + chosenMap + (currPage * 5 + rank + 1)\n                  }\n                  rank={currPage * 5 + rank + 1}\n                  userData={userData}\n                  map={chosenMap}\n                />\n              ))\n          ) : (\n            <h3>LOADING...</h3>\n          )}\n        </div>\n        <img\n          src=\"/next.png\"\n          id=\"rightArrow\"\n          className={currPage >= 4 ? \"disabledArrow\" : \"\"}\n          onClick={() => (currPage < 4 ? setCurrPage(currPage + 1) : null)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Leaderboard;\n","/home/dylan/MusicGuessr/a-musical-planet/src/LeaderboardUser.js",["120"],"import React from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nconst LeaderboardUser = ({ userData, map, rank }) => {\n  return (\n    <div className=\"leaderboardUser\">\n      <h1 className=\"rank\">{rank}</h1>\n      <img src={userData.profilePicture} alt=\"User\" />\n      <div className=\"names\">\n        <Link to={`/user/${userData.userName}`}>{userData.displayName}</Link>\n        <p>{userData.userName}</p>\n      </div>\n      <div className=\"highScore\">\n        <p>Score</p>\n        <h3>{userData.stats.maxScores[map] ? userData.stats.maxScores[map] : 0}</h3>\n      </div>\n    </div>\n  );\n};\n\nexport default LeaderboardUser;\n","/home/dylan/MusicGuessr/a-musical-planet/src/PersonalPage.js",["121"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport \"./PersonalPage.scss\";\n\nimport MapData from \"./MapData.json\";\n\nconst PersonalPage = () => {\n  const { userName } = useParams();\n\n  const [userData, setUserData] = useState(null);\n\n  const [chosenMap, setChosenMap] = useState(\"overall\");\n\n  useEffect(() => {\n    setChosenMap(\"overall\");\n    axios(`${process.env.REACT_APP_BACKEND_URI}/userData/${userName}`, {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"GET\",\n    }).then(({ data }) => setUserData(data));\n  }, [userName]);\n\n  return (\n    <div className=\"userPageContainer\">\n      {userData ? (\n        <div className=\"userPage\">\n          <div className=\"userHead\">\n            <img src={userData.profilePicture} alt=\"User\" />\n            <div className=\"userName\">\n              <h1>{userData.displayName}</h1>\n              <img\n                src={\n                  \"/flags/\" +\n                  (userData.country.length === 2\n                    ? userData.country.toLowerCase()\n                    : userData.country.substring(0, 2).toLowerCase()) +\n                  \".svg\"\n                }\n                alt=\"\"\n              />\n            </div>\n          </div>\n          <div className=\"stats\">\n            <div className=\"statsHead\">\n              <h2>Game Statistics</h2>\n              <select\n                id=\"maplist\"\n                value={chosenMap}\n                onChange={(e) => {\n                  console.log(\"Changing value to\", e.target.value);\n                  setChosenMap(e.target.value);\n                }}\n              >\n                <option key=\"overall\" value=\"overall\">\n                  Overall\n                </option>\n                {MapData.map((map) => (\n                  <option\n                    key={map.name}\n                    value={\n                      map.name[0].toLowerCase() +\n                      map.name.slice(1).replaceAll(\" \", \"\")\n                    }\n                  >\n                    {map.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"statsBody\">\n              <div>\n                <p>Completed Games</p>\n                <h3>\n                  {userData.stats.completedGames[chosenMap]\n                    ? userData.stats.completedGames[chosenMap]\n                    : 0}\n                </h3>\n              </div>\n              <div className={chosenMap === \"overall\" ? \"bestOverall\" : \"\"}>\n                <p>Best Game</p>\n                {chosenMap === \"overall\" ? (\n                  <h3 className=\"overallMaxScore\">\n                    {userData.stats.maxScores.overall.score &&\n                    userData.stats.maxScores.overall.score !== 0\n                      ? `${userData.stats.maxScores.overall.score} \\n (${\n                          userData.stats.maxScores.overall.map[0].toUpperCase() +\n                          userData.stats.maxScores.overall.map\n                            .slice(1)\n                            .replace(/[A-Z]/, (letter) => \" \" + letter)\n                        })`\n                      : 0}\n                  </h3>\n                ) : (\n                  <h3>\n                    {userData.stats.maxScores[chosenMap]\n                      ? userData.stats.maxScores[chosenMap]\n                      : 0}\n                  </h3>\n                )}\n              </div>\n              <div>\n                <p>Average Game</p>\n                <h3>\n                  {userData.stats.averageScores[chosenMap]\n                    ? userData.stats.averageScores[chosenMap]\n                    : 0}\n                </h3>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <h3>LOADING...</h3>\n      )}\n    </div>\n  );\n};\n\nexport default PersonalPage;\n","/home/dylan/MusicGuessr/a-musical-planet/src/Summary.js",["122","123"],"import React, { useState } from \"react\";\nimport SummaryItem from \"./SummaryItem\";\n\nconst Summary = ({ sessionInfo, sessionScore, summaryExit, show }) => {\n  const [roundSelected, setRoundSelected] = useState(0);\n  return (\n    <div className={\"popup-container\" + (!show ? \" hidden\" : \"\")}>\n      <div className={\"summary\"}>\n        <h1>SUMMARY</h1>\n        <h3 id=\"score\">Score: {sessionScore}</h3>\n        <div className=\"summary-songs-desktop\">\n          {sessionInfo.map((countryInfo, index) => {\n            return (\n              <SummaryItem\n                countryInfo={countryInfo}\n                index={index}\n                show={true}\n              />\n            );\n          })}\n        </div>\n        <div className=\"summary-songs-mobile\">\n          {sessionInfo.length > 0 ? (\n            <>\n              <img\n                src=\"/next.png\"\n                id=\"leftArrow\"\n                className={roundSelected <= 0 ? \"disabledArrow\" : \"\"}\n                onClick={() =>\n                  roundSelected > 0 ? setRoundSelected(roundSelected - 1) : null\n                }\n              />\n              {sessionInfo.map((countryInfo, index) => {\n                return (\n                  <SummaryItem\n                    countryInfo={countryInfo}\n                    index={index}\n                    show={index === roundSelected}\n                  />\n                );\n              })}\n              <img\n                src=\"/next.png\"\n                id=\"rightArrow\"\n                className={roundSelected >= 4 ? \"disabledArrow\" : \"\"}\n                onClick={() =>\n                  roundSelected < 4 ? setRoundSelected(roundSelected + 1) : null\n                }\n              />\n            </>\n          ) : (\n            <></>\n          )}\n        </div>\n        <div className=\"popup-buttons\">\n          <button id=\"summary-button\" onClick={summaryExit}>\n            NEW GAME\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Summary;\n","/home/dylan/MusicGuessr/a-musical-planet/src/SummaryItem.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/CustomiFrame.js",["124"],"import React from \"react\";\n\nconst CustomiFrame = React.memo(({ src, width, height }) => {\n  console.log(\"RENDERING IFRAME\");\n  return (\n    <iframe\n      src={src}\n      width={width}\n      height={height}\n      frameBorder=\"0\"\n      allowtransparency=\"true\"\n      allow=\"encrypted-media\"\n    ></iframe>\n  );\n});\n\nexport default CustomiFrame;\n","/home/dylan/MusicGuessr/a-musical-planet/src/GetMixedColor.js",["125"],"export default function getMixedColor(ratio) {\n  let color1 = \"1DB954\";\n  let color2 = \"EE6C4D\";\n  if (ratio > 0.6 && ratio < 1) ratio -= 0.3;\n  var hex = function (x) {\n    x = x.toString(16);\n    return x.length == 1 ? \"0\" + x : x;\n  };\n\n  var r = Math.ceil(\n    parseInt(color1.substring(0, 2), 16) * ratio +\n      parseInt(color2.substring(0, 2), 16) * (1 - ratio)\n  );\n  var g = Math.ceil(\n    parseInt(color1.substring(2, 4), 16) * ratio +\n      parseInt(color2.substring(2, 4), 16) * (1 - ratio)\n  );\n  var b = Math.ceil(\n    parseInt(color1.substring(4, 6), 16) * ratio +\n      parseInt(color2.substring(4, 6), 16) * (1 - ratio)\n  );\n\n  return hex(r) + hex(g) + hex(b);\n}\n",{"ruleId":"126","severity":1,"message":"127","line":2,"column":38,"nodeType":"128","messageId":"129","endLine":2,"endColumn":48},{"ruleId":"130","severity":1,"message":"131","line":86,"column":6,"nodeType":"132","endLine":86,"endColumn":19,"suggestions":"133"},{"ruleId":"126","severity":1,"message":"134","line":177,"column":11,"nodeType":"128","messageId":"129","endLine":177,"endColumn":26},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"126","severity":1,"message":"139","line":10,"column":8,"nodeType":"128","messageId":"129","endLine":10,"endColumn":17},{"ruleId":"126","severity":1,"message":"140","line":16,"column":7,"nodeType":"128","messageId":"129","endLine":16,"endColumn":15},{"ruleId":"130","severity":1,"message":"141","line":277,"column":6,"nodeType":"132","endLine":277,"endColumn":8,"suggestions":"142"},{"ruleId":"126","severity":1,"message":"143","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":21},{"ruleId":"126","severity":1,"message":"144","line":81,"column":9,"nodeType":"128","messageId":"129","endLine":81,"endColumn":28},{"ruleId":"126","severity":1,"message":"127","line":1,"column":27,"nodeType":"128","messageId":"129","endLine":1,"endColumn":37},{"ruleId":"126","severity":1,"message":"145","line":1,"column":39,"nodeType":"128","messageId":"129","endLine":1,"endColumn":48},{"ruleId":"126","severity":1,"message":"146","line":2,"column":27,"nodeType":"128","messageId":"129","endLine":2,"endColumn":33},{"ruleId":"126","severity":1,"message":"146","line":2,"column":27,"nodeType":"128","messageId":"129","endLine":2,"endColumn":33},{"ruleId":"147","severity":1,"message":"148","line":48,"column":9,"nodeType":"149","endLine":53,"endColumn":11},{"ruleId":"147","severity":1,"message":"148","line":72,"column":9,"nodeType":"149","endLine":77,"endColumn":11},{"ruleId":"126","severity":1,"message":"146","line":2,"column":27,"nodeType":"128","messageId":"129","endLine":2,"endColumn":33},{"ruleId":"126","severity":1,"message":"127","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":27},{"ruleId":"147","severity":1,"message":"148","line":25,"column":15,"nodeType":"149","endLine":32,"endColumn":17},{"ruleId":"147","severity":1,"message":"148","line":42,"column":15,"nodeType":"149","endLine":49,"endColumn":17},{"ruleId":"150","severity":1,"message":"151","line":6,"column":5,"nodeType":"149","endLine":13,"endColumn":6},{"ruleId":"152","severity":1,"message":"153","line":7,"column":21,"nodeType":"154","messageId":"155","endLine":7,"endColumn":23},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUser'. Either include it or remove the dependency array.","ArrayExpression",["156"],"'URLRefreshToken' is assigned a value but never used.","no-native-reassign",["157"],"no-negated-in-lhs",["158"],"'getCookie' is defined but never used.","'mapProps' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'nextTrack'. Either include it or remove the dependency array.",["159"],"'memo' is defined but never used.","'currSelectedCountry' is assigned a value but never used.","'useEffect' is defined but never used.","'Router' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"160","fix":"161"},"no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},"Update the dependencies array to be: [accessToken, setUser]",{"range":"164","text":"165"},"Update the dependencies array to be: [nextTrack]",{"range":"166","text":"167"},[2196,2209],"[accessToken, setUser]",[7956,7958],"[nextTrack]"]