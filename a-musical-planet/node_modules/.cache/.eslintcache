[{"/home/dylan/MusicGuessr/a-musical-planet/src/index.js":"1","/home/dylan/MusicGuessr/a-musical-planet/src/App.js":"2","/home/dylan/MusicGuessr/a-musical-planet/src/reportWebVitals.js":"3","/home/dylan/MusicGuessr/a-musical-planet/src/Play.js":"4","/home/dylan/MusicGuessr/a-musical-planet/src/Login.js":"5","/home/dylan/MusicGuessr/a-musical-planet/src/Header.js":"6","/home/dylan/MusicGuessr/a-musical-planet/src/Leaderboard.js":"7","/home/dylan/MusicGuessr/a-musical-planet/src/ChooseMap.js":"8","/home/dylan/MusicGuessr/a-musical-planet/src/GetCookie.js":"9","/home/dylan/MusicGuessr/a-musical-planet/src/About.js":"10","/home/dylan/MusicGuessr/a-musical-planet/src/PersonalPage.js":"11","/home/dylan/MusicGuessr/a-musical-planet/src/CountryGuessInfo.js":"12","/home/dylan/MusicGuessr/a-musical-planet/src/GuessPopup.js":"13","/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js":"14","/home/dylan/MusicGuessr/a-musical-planet/src/MapItem.js":"15","/home/dylan/MusicGuessr/a-musical-planet/src/LeaderboardUser.js":"16","/home/dylan/MusicGuessr/a-musical-planet/src/AudioPlayer.js":"17","/home/dylan/MusicGuessr/a-musical-planet/src/Summary.js":"18","/home/dylan/MusicGuessr/a-musical-planet/src/CustomiFrame.js":"19","/home/dylan/MusicGuessr/a-musical-planet/src/GetMixedColor.js":"20","/home/dylan/MusicGuessr/a-musical-planet/src/SummaryItem.js":"21"},{"size":500,"mtime":1627171098668,"results":"22","hashOfConfig":"23"},{"size":6750,"mtime":1632681025617,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1627171098668,"results":"25","hashOfConfig":"23"},{"size":9421,"mtime":1632678474969,"results":"26","hashOfConfig":"23"},{"size":3549,"mtime":1632714464352,"results":"27","hashOfConfig":"23"},{"size":3678,"mtime":1632710623811,"results":"28","hashOfConfig":"23"},{"size":2639,"mtime":1631486196097,"results":"29","hashOfConfig":"23"},{"size":1892,"mtime":1631594997838,"results":"30","hashOfConfig":"23"},{"size":397,"mtime":1628138783928,"results":"31","hashOfConfig":"23"},{"size":246,"mtime":1631128866961,"results":"32","hashOfConfig":"23"},{"size":4536,"mtime":1632717491576,"results":"33","hashOfConfig":"23"},{"size":843,"mtime":1631486196097,"results":"34","hashOfConfig":"23"},{"size":3715,"mtime":1632713402374,"results":"35","hashOfConfig":"23"},{"size":12418,"mtime":1632603353988,"results":"36","hashOfConfig":"23"},{"size":872,"mtime":1631594997838,"results":"37","hashOfConfig":"23"},{"size":688,"mtime":1631486196097,"results":"38","hashOfConfig":"23"},{"size":2466,"mtime":1631486196097,"results":"39","hashOfConfig":"23"},{"size":2219,"mtime":1632020152549,"results":"40","hashOfConfig":"23"},{"size":390,"mtime":1631486196097,"results":"41","hashOfConfig":"23"},{"size":681,"mtime":1631486196097,"results":"42","hashOfConfig":"23"},{"size":940,"mtime":1630287541147,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"fuuf57",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/dylan/MusicGuessr/a-musical-planet/src/index.js",[],["91","92"],"/home/dylan/MusicGuessr/a-musical-planet/src/App.js",["93","94"],"//import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Play from \"./Play\";\nimport Header from \"./Header\";\nimport Login from \"./Login\";\nimport ChooseMap from \"./ChooseMap\";\nimport About from \"./About\";\nimport Leaderboard from \"./Leaderboard\";\nimport PersonalPage from \"./PersonalPage\";\nimport dotenv from \"dotenv\";\nimport getCookie from \"./GetCookie\";\n\ndotenv.config();\n\nexport const UserContext = React.createContext({\n  userName: \"user\",\n  displayName: \"user\",\n  stats: {\n    maxScores: {},\n    averageScores: {},\n    completedGames: 0,\n  },\n});\n\nfunction App() {\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [redirect, setRedirect] = useState(\"\");\n  const [userData, setUserData] = useState({\n    displayName: \"\",\n    userName: \"\",\n    maxScores: {},\n    profilePicture: \"\",\n    country: \"\",\n  });\n\n  //default world as map\n  const [currMap, setCurrMap] = useState(\"world\");\n\n  const sendScoreToServer = (newScore) => {\n    console.log(\"Sending score to server\", newScore);\n    axios(\n      `${process.env.REACT_APP_BACKEND_URI}/newScore/${userData.userName}/${currMap}/${newScore}`,\n      {\n        method: \"POST\",\n      }\n    )\n      .then(({ data }) => {\n        console.log(\"Score sent to server!\");\n        console.log(data);\n        setUserData(data);\n      })\n      .catch((err) => {\n        console.log(\"ERROR SENDING SCORE TO SERVER\", err);\n      });\n  };\n\n  const setTokenFromCookie = () => {\n    const accessTokenCookie = getCookie(\"accessToken\");\n    if (accessTokenCookie !== \"\") {\n      setAccessToken(accessTokenCookie);\n      return true;\n    } else {\n      console.log(\"Could not find cookie\");\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    if (!setTokenFromCookie() && !(window.location.pathname === \"/\"))\n      return setRedirect(\"login\");\n  }, []);\n\n  useEffect(() => {\n    if (accessToken !== \"\" && accessToken !== null) {\n      setUser();\n    }\n  }, [accessToken]);\n\n  const setUser = async () => {\n    return axios(\"https://api.spotify.com/v1/me\", {\n      headers: {\n        Accept: \"application/json\",\n        // \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + accessToken,\n      },\n      method: \"GET\",\n    })\n      .then((spotifyData) => {\n        axios(\n          `${process.env.REACT_APP_BACKEND_URI}/userData/${spotifyData.data.id}`,\n          {\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            method: \"GET\",\n          }\n        ).then(({ data }) => {\n          setUserData(data);\n        });\n      })\n      .catch((err) => {\n        console.log(\"ERROR GETTING SPOTIFY USER DATA\", err);\n        window.location.replace(\n          `${process.env.REACT_APP_BACKEND_URI}/getNewToken`\n        );\n      });\n  };\n\n  const handleMapChosen = (mapName) => {\n    // if (accessToken === null || accessToken === \"\") {\n    //   if (!setTokenFromCookie()) return setRedirect(\"login\");\n    // }\n    console.log(\"HANDLING MAP CHOSEN\");\n    setCurrMap(mapName[0].toLowerCase() + mapName.slice(1).replace(/ /g, \"\"));\n    // setRedirect(\"play\");\n  };\n\n  const checkToken = () => {\n    if (!setTokenFromCookie()) {\n      setRedirect(\"login\");\n    }\n  };\n\n  const handleLogin = () => {\n    window.location.replace(`${process.env.REACT_APP_BACKEND_URI}/login`);\n  };\n\n  const handleLogout = () => {\n    document.cookie =\n      \"accessToken=-1;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/\";\n    setAccessToken(\"\");\n    setRedirect(\"/\");\n  };\n\n  const setAccessTokenHandler = (newAccessToken) => {\n    let accessTokenExpireDate = new Date();\n    accessTokenExpireDate.setTime(\n      accessTokenExpireDate.getTime() + 60 * 60 * 1000\n    );\n\n    document.cookie =\n      \"accessToken=\" +\n      newAccessToken +\n      \";expires=\" +\n      accessTokenExpireDate.toUTCString() +\n      \";path=/\";\n\n    setAccessToken(newAccessToken);\n  };\n\n  const handleAuth = () => {\n    // console.log(accessToken === \"\");\n    // if (accessToken !== \"\" && accessToken !== null) {\n    //   console.log(\"have access token\", accessToken);\n    //   return setRedirect(\"maps\");\n    // }\n    // if (setTokenFromCookie()) {\n    //   console.log(\"gettin from cookie\");\n    //   return setRedirect(\"maps\");\n    // }\n    console.count(\"Handling AUTH\");\n    const URLAccessToken = new URLSearchParams(window.location.search).get(\n      \"access_token\"\n    );\n    setAccessTokenHandler(URLAccessToken);\n    // return <Redirect to=\"/maps\" />;\n    setRedirect(\"maps\");\n  };\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {redirect === \"play\" && window.location.pathname === \"/maps\" ? (\n          <Redirect push to=\"play\" />\n        ) : null}\n        {redirect === \"/\" ? <Redirect push to=\"/\" replace /> : null}\n        {redirect === \"maps\" ? <Redirect push to=\"/maps\" /> : null}\n        {redirect === \"login\" ? <Redirect to=\"/login\" /> : null}\n        <UserContext.Provider value={userData}>\n          <Header />\n          <Switch>\n            <Route path=\"/auth\" render={() => handleAuth()} />\n            <Route\n              path=\"/login\"\n              render={() =>\n                accessToken !== \"\" ? <Redirect to=\"/maps\" /> : handleLogin()\n              }\n            />\n            <Route exact path=\"/\">\n              {document.cookie.match(\n                /^(.*;)?\\s*accessToken\\s*=\\s*[^;]+(.*)?$/\n              ) ? (\n                <Redirect to=\"/login\" />\n              ) : (\n                <Login handleLogin={handleLogin} />\n              )}\n            </Route>\n            <Route path=\"/maps\">\n              <ChooseMap handleMapChosen={handleMapChosen} />\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/leaderboard\">\n              <Leaderboard />\n            </Route>\n            <Route path=\"/user/:userName\">\n              <PersonalPage handleLogout={handleLogout} />\n            </Route>\n            <Route path=\"/play\">\n              <Play\n                accessToken={accessToken}\n                token={accessToken}\n                currMap={currMap}\n                setAccessTokenHandler={setAccessTokenHandler}\n                setTokenFromCookie={setTokenFromCookie}\n                sendScoreToServer={sendScoreToServer}\n              />\n            </Route>\n            <Route path=\"/error\">\n              <h1>Error! Check console</h1>\n            </Route>\n            <Route path=\"*\">\n              <h1>Not Found!</h1>\n            </Route>\n          </Switch>\n        </UserContext.Provider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/dylan/MusicGuessr/a-musical-planet/src/reportWebVitals.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/Play.js",["95"],"import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport MapChart from \"./MapChart\";\nimport GuessPopup from \"./GuessPopup\";\nimport CountryGuessInfo from \"./CountryGuessInfo.js\";\nimport \"./Play.scss\";\nimport haversine from \"haversine-distance\";\n\nconst maxScore = 5000;\n\nconst Playlists = require(\"./Playlists.json\");\nconst countries = require(\"./WorldInfo.json\");\nconst colors = require(\"./colors.json\");\n\nconst Play = ({\n  accessToken,\n  setAccessTokenHandler,\n  currMap,\n  sendScoreToServer,\n}) => {\n  const [currTrack, setCurrTrack] = useState({ round: 0 });\n  const [redirect, setRedirect] = useState(\"\");\n\n  const [currChosen, setCurrChosen] = useState(\"\");\n\n  const [loading, setLoading] = useState(true);\n\n  const handleNewChosen = useCallback((newChosen) => {\n    setCurrChosen(newChosen);\n  }, []);\n\n  //first value is a bool on whether to show popup,\n  //second is the score to show\n  const [popup, setPopup] = useState({\n    show: false,\n    roundScore: 0,\n    sessionScore: 0,\n    sessionInfo: [],\n  });\n\n  const audioRef = useRef(null);\n\n  const newGame = () => {\n    nextTrack();\n    setPopup({\n      show: false,\n      roundScore: 0,\n      sessionScore: 0,\n      sessionInfo: [],\n    });\n  };\n\n  const nextTrack = () => {\n    setPopup({\n      ...popup,\n      show: false,\n      roundScore: 0,\n    });\n    setCurrChosen(\"\");\n    if (accessToken === null || accessToken === \"\") {\n      return setRedirect(\"login\");\n    }\n\n    let relevantPlaylists = Playlists[currMap];\n    if (currMap.slice(0, 5) === \"world\") {\n      if (currMap.slice(5) === \"Easy\")\n        relevantPlaylists = Playlists.world.filter(\n          (country) => country.difficulty === \"Easy\"\n        );\n      else if (currMap.slice(5) === \"Medium\") {\n        relevantPlaylists = Playlists.world.filter(\n          (country) =>\n            country.difficulty === \"Easy\" || country.difficulty === \"Medium\"\n        );\n      } else relevantPlaylists = Playlists.world;\n    }\n\n    let currPlaylistIndex = Math.floor(\n      Math.random() * relevantPlaylists.length\n    );\n\n    if (relevantPlaylists[currPlaylistIndex].country === currTrack.location) {\n      nextTrack();\n      return;\n      // if (currPlaylistIndex > 0) currPlaylistIndex--;\n      // else currPlaylistIndex++;\n    }\n    fetch(\n      `https://api.spotify.com/v1/playlists/${relevantPlaylists[currPlaylistIndex].playlistId}`,\n      {\n        headers: { Authorization: \"Bearer \" + accessToken },\n      }\n    )\n      .then((response) => {\n        if (response.status >= 400) throw response;\n        return response.json();\n      })\n      .then((data) => {\n        let track = \"\";\n        let trackIndex = 0;\n        while (track === \"\") {\n          trackIndex = Math.floor(Math.random() * data.tracks.items.length);\n          track = data.tracks.items[trackIndex].track;\n          if (track.preview_url === null) {\n            console.log(\n              \"Track\",\n              data.tracks.items[trackIndex].track.name,\n              \"in country\",\n              data.name,\n              \"has no preview url\"\n            );\n            track = \"\";\n          }\n        }\n        setCurrTrack({\n          url: track.preview_url,\n          artist: data.tracks.items[trackIndex].track.artists[0].name,\n          album: data.tracks.items[trackIndex].track.album.name,\n          image: data.tracks.items[trackIndex].track.album.images[0].url,\n          location: data.name,\n          name: data.tracks.items[trackIndex].track.name,\n          round: currTrack.round < 5 ? currTrack.round + 1 : 1,\n          id: data.tracks.items[trackIndex].track.id,\n        });\n        audioRef.current.load();\n        audioRef.current.play();\n      })\n      .catch((err) => {\n        console.log(\n          \"ERROR LOADING TRACK FROM COUNTRY\",\n          relevantPlaylists[currPlaylistIndex].country\n        );\n        console.log(\"err\", err);\n        console.log(\"err status\", err.status);\n        if (err.status === 400)\n          return window.location.replace(\n            `${process.env.REACT_APP_BACKEND_URI}/getNewToken`\n          );\n        if (err.status === 401) {\n          return refreshToken();\n        }\n        if (err.status === 404) return nextTrack();\n        //this is only really for error 401, meaning\n        return setRedirect(\"maps\");\n      });\n  };\n\n  const likeTrack = (liked) => {\n    if (!liked) console.log(\"LIKING SONG\");\n    else console.log(\"UNLIKING SONG\");\n    fetch(`https://api.spotify.com/v1/me/tracks?ids=${currTrack.id}`, {\n      method: liked ? \"DELETE\" : \"PUT\",\n      headers: {\n        Authorization: \"Bearer \" + accessToken,\n      },\n    }).then((response) => {\n      if (response.status >= 400) throw response;\n      return;\n    });\n  };\n\n  const refreshToken = () => {\n    fetch(`${process.env.REACT_APP_BACKEND_URI}/refreshToken`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((newAccessToken) => newAccessToken.json())\n      .then((data) => {\n        if (data && data.access_token) {\n          setAccessTokenHandler(data.access_token);\n          return nextTrack();\n        }\n        return window.location.replace(\n          `${process.env.REACT_APP_BACKEND_URI}/getNewToken`\n        );\n      });\n  };\n\n  const guessGiven = () => {\n    audioRef.current.pause();\n    const currChosenCountryDOM = document.querySelector(\n      `#${currChosen[0].toLowerCase() + currChosen.slice(1).replace(/ /g, \"\")}`\n    );\n    if (currChosenCountryDOM) {\n      currChosenCountryDOM.classList.remove(\"pressed\");\n      currChosenCountryDOM.style.fill =\n        colors[currChosenCountryDOM.getAttribute(\"continent\")];\n    }\n    const currTrackCountry = countries.filter(function (country) {\n      return country.name.common === currTrack.location;\n    })[0];\n    if (currChosen === currTrack.location) {\n      setPopup({\n        sessionScore: popup.sessionScore + maxScore,\n        show: true,\n        roundScore: maxScore,\n        sessionInfo: [\n          ...popup.sessionInfo,\n          {\n            country: currTrack.location,\n            songId: currTrack.id,\n            correct: true,\n            score: 5000,\n            code: currTrackCountry.cca2.toLowerCase(),\n          },\n        ],\n      });\n      return;\n    }\n\n    const currTrackCountryCoords =\n      currTrackCountry.name.common !== \"Russia\"\n        ? currTrackCountry.latlng\n        : currTrackCountry.latlngAlt;\n\n    const chosenCountry = countries.filter(function (country) {\n      return country.name.common === currChosen;\n    })[0];\n\n    const chosenCountryCoords =\n      chosenCountry.name.common !== \"Russia\"\n        ? chosenCountry.latlng\n        : chosenCountry.latlngAlt;\n\n    let scoreDeduction = Math.ceil(\n      haversine(chosenCountryCoords, currTrackCountryCoords) / 1000 / 2\n    );\n\n    switch (currMap) {\n      case \"Europe\":\n        scoreDeduction *= 4;\n        break;\n      case \"SouthAmerica\":\n        scoreDeduction *= 4;\n        break;\n      case \"NorthAmerica\":\n        scoreDeduction *= 3;\n        break;\n      case \"Asia\":\n        scoreDeduction *= 2;\n        break;\n      case \"Oceania\":\n        scoreDeduction *= 2;\n        break;\n      case \"Africa\":\n        scoreDeduction *= 2;\n        break;\n      default:\n        break;\n    }\n\n    let score = maxScore - scoreDeduction;\n    if (score < 0) score = 0;\n\n    setPopup({\n      show: true,\n      roundScore: score,\n      sessionScore: popup.sessionScore + score,\n      sessionInfo: [\n        ...popup.sessionInfo,\n        {\n          country: currTrack.location,\n          songId: currTrack.id,\n          correct: false,\n          score: score,\n          code: currTrackCountry.cca2.toLowerCase(),\n        },\n      ],\n    });\n    // if (currTrack.location === currChosen) {\n    //   //alert(`${currChosen} is correct!`);\n    // } else {\n    //   //alert(  `You guessed ${currChosen} but the answer was ${currTrack.location}!`);\n    // }\n    // getNewArtist();\n  };\n\n  useEffect(() => {\n    if (accessToken === null || accessToken === \"\") return setRedirect(\"login\");\n    if (!loading) newGame();\n  }, [loading]);\n\n  if (redirect !== \"\") {\n    return <Redirect to={`/${redirect}`} />;\n  }\n  // if (redirect === \"login\") {\n  //   return <Redirect to=\"/login\" />;\n  // }\n  return (\n    <>\n      <div className=\"play-section\">\n        {true ? (\n          <div className=\"overlay\">\n            <CountryGuessInfo\n              currChosen={currChosen}\n              guessGiven={guessGiven}\n              audioRef={audioRef}\n              trackURL={currTrack.url}\n              loading={loading}\n            />\n          </div>\n        ) : (\n          <></>\n        )}\n        <div className=\"map-div\">\n          <MapChart\n            handleNewChosen={handleNewChosen}\n            setPlayLoading={setLoading}\n            currMap={currMap}\n          />\n        </div>\n        <GuessPopup\n          show={popup.show}\n          currTrack={currTrack}\n          currChosen={currChosen}\n          nextTrack={nextTrack}\n          roundScore={popup.roundScore}\n          sessionScore={popup.sessionScore}\n          sessionInfo={popup.sessionInfo}\n          sendScoreToServer={sendScoreToServer}\n          newGame={newGame}\n          likeTrack={likeTrack}\n          setRedirect={setRedirect}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Play;\n","/home/dylan/MusicGuessr/a-musical-planet/src/Login.js",["96"],"import React, { useState, useEffect } from \"react\";\n\nimport \"./Login.scss\";\n\nvar start,\n  tick = 0;\n\nconst countryGenres = {\n  Zimbabwe: [\"Chimurenga\", \"Sungura\", \"Imbubwe\"],\n  Algeria: [\"Chaabi\", \"Raï\", \"Gharnati\"],\n  Argentina: [\"Tango\", \"Zamba\", \"Chamamé\", \"Milonga\", \"Chacarera\"],\n  Brazil: [\"Bossa Nova\", \"Samba\", \"Capoeira\", \"Choro\"],\n  Colombia: [\"Cumbia\", \"Bambuco\", \"Salsa\", \"Vallenato\"],\n  Peru: [\"Marinera\", \"Huayno\", \"Cueca\"],\n  Australia: [\"Bunggul\", \"Manikay\", \"Wangga\"],\n  Cambodia: [\"Pinpeat\", \"Mahori\", \"Rock\"],\n  Spain: [\"Flamenco\", \"Jota\", \"Sardana\"],\n  Japan: [\"Min'yō\", \"Shima-uta\", \"Ryūkōka\"],\n};\n\nconst Login = ({ handleLogin }) => {\n  const [prevGenre, setPrevGenre] = useState([\"Candombe\", \"Uruguay\"]);\n  const [currGenre, setCurrGenre] = useState([\"Salsa\", \"Puerto Rico\"]);\n\n  const setNewGenre = (type) => {\n    const listOfCountries = Object.keys(countryGenres);\n    let country =\n      listOfCountries[Math.floor(Math.random() * listOfCountries.length)];\n    const genre =\n      countryGenres[country][\n        Math.floor(Math.random() * countryGenres[country].length)\n      ];\n    type === \"curr\"\n      ? setCurrGenre([genre, country])\n      : setPrevGenre([genre, country]);\n  };\n\n  const newCountryGenre1 = () => {\n    if (!start) start = new Date().getTime();\n    var now = new Date().getTime();\n    if (now < start + tick * 3000) {\n      setTimeout(newCountryGenre1, 0);\n    } else {\n      tick++;\n      setNewGenre(\"curr\");\n      setTimeout(newCountryGenre1, 5990);\n    }\n  };\n\n  var newCountryGenre2 = () => {\n    if (!start) start = new Date().getTime();\n    var now = new Date().getTime();\n    if (now < start + tick * 3000) {\n      setTimeout(newCountryGenre2, 0);\n    } else {\n      tick++;\n      setNewGenre(\"prev\");\n      setTimeout(newCountryGenre2, 5990);\n    }\n  };\n\n  useEffect(() => {\n    setNewGenre(\"curr\");\n    setNewGenre(\"prev\");\n    setTimeout(newCountryGenre1, 2990);\n    setTimeout(newCountryGenre2, 4450);\n    // const setNewGenreInterval = setInterval(() => {\n    //   let country = currGenre[1];\n    //   const listOfCountries = Object.keys(countryGenres);\n    //   while (country === currGenre[1]) {\n    //     country =\n    //       listOfCountries[Math.floor(Math.random() * listOfCountries.length)];\n    //   }\n    //   const genre =\n    //     countryGenres[country][\n    //       Math.floor(Math.random() * countryGenres[country].length)\n    //     ];\n    //   setPrevGenre(currGenre);\n    //   setCurrGenre([genre, country]);\n    // }, 3000);\n    // return () => clearInterval(setNewGenreInterval);\n  }, []);\n\n  return (\n    <div className=\"login\">\n      {/* <img src=\"/a-musical-planet.jpg\" alt=\"musical planet\" /> */}\n      <div className=\"genreDivs\">\n        <h1 className=\"item genreName prev\">{prevGenre[0]}</h1>\n        <h1 className=\"item genreName curr\">{currGenre[0]}</h1>\n        <h1 style={{ fontSize: \"37px\" }}> From </h1>\n        <h1 className=\"item countryName curr\">{currGenre[1]}</h1>\n        <h1 className=\"item countryName prev\">{prevGenre[1]}</h1>\n      </div>\n      <div id=\"caption\">\n        <p>\n          Guess music from over 80 countries around the world. Login with a free\n          or premium Spotify account.\n        </p>\n      </div>\n      <button type=\"submit\" id=\"loginButton\" onClick={handleLogin}>\n        <img id=\"spotifyIcon\" src=\"/spotifyIcon.png\" alt=\"Spotify icon\" />\n        Login\n      </button>\n      {/* <button type=\"submit\" onClick={handleLogin}>\n        Login With Spotify\n      </button> */}\n    </div>\n  );\n};\n\nexport default Login;\n","/home/dylan/MusicGuessr/a-musical-planet/src/Header.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/Leaderboard.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/ChooseMap.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/GetCookie.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/About.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/PersonalPage.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/CountryGuessInfo.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/GuessPopup.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/MapChart.js",["97"],"import React, { memo, useState, useEffect } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\";\nimport { geoMercator } from \"d3-geo\";\n\nimport Playlists from \"./Playlists\";\nimport \"./Map.css\";\n\nconst worldCountries = require(\"./WorldInfo.json\");\n// const europeCountries = require(\"./EuropeInfo.json\");\n\nconst worldGeoSVG = require(\"./WorldSVG50m.json\");\nconst colors = require(\"./colors.json\");\n\nconst MapPropsJSON = require(\"./MapProps.json\");\n// const europeGeoSVG = require(\"./EuropeInfo.json\");\n\n// const locationInfo = {\n//   world: worldCountries,\n//   // europe: europeCountries,\n// };\n\n// const locationGeoSVG = {\n//   world: worldGeoSVG,\n// };\n\nconst borderWidth = 0.2;\n\nfunction LightenDarkenColor(col, amt) {\n  var usePound = false;\n\n  if (!col) return \"#000\";\n\n  if (col[0] === \"#\") {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nconst camelize = (word) => {\n  return word[0].toLowerCase() + word.slice(1).replace(/ /g, \"\");\n};\n\nconst checkDifficulty = (mapDifficulty, countryDifficulty) => {\n  if (mapDifficulty === \"Easy\") return countryDifficulty === \"Easy\";\n  if (mapDifficulty === \"Medium\")\n    return countryDifficulty === \"Easy\" || countryDifficulty === \"Medium\";\n  //for some reason this necessary, otherwise it returns true even if mapDifficulty is Easy\n  if (mapDifficulty === \"Hard\") return true;\n  return false;\n};\n\nlet countriesToShow = [];\nlet currSelectedCountry = null;\nconst MapChart = ({ handleNewChosen, currMap, setPlayLoading }) => {\n  const [loading, setLoading] = useState(true);\n  const mapProps =\n    currMap.slice(0, 5) === \"world\"\n      ? MapPropsJSON.world\n      : MapPropsJSON[currMap];\n  useEffect(() => {\n    countriesToShow = [];\n    currSelectedCountry = null;\n    if (currMap.slice(0, 5) === \"world\") {\n      for (const playlist of Playlists.world) {\n        if (checkDifficulty(currMap.slice(5), playlist.difficulty))\n          countriesToShow.push(camelize(playlist.country));\n      }\n    } else {\n      for (const playlist of Playlists[currMap]) {\n        countriesToShow.push(camelize(playlist.country));\n      }\n    }\n    var waitForMapLoad = setInterval(function () {\n      if (document.querySelectorAll(\".rsm-geography\").length !== 0) {\n        clearInterval(waitForMapLoad);\n        setLoading(false);\n        setPlayLoading(false);\n      }\n    }, 500);\n  }, [currMap]);\n\n  if (!loading) {\n    const countries = document.querySelectorAll(\".rsm-geography\");\n    for (const country of countries) {\n      country.setAttribute(\n        \"style\",\n        countriesToShow.indexOf(country.id) >= 0\n          ? `fill: ${\n              colors[country.getAttribute(\"continent\")]\n            }; pointer-events: all; stroke: #000000; stroke-width: ${borderWidth}; outline: none; visibility: visible;`\n          : `fill: #ccc; pointer-events: none; stroke: #000000; stroke-width: ${borderWidth}; outline: none; visibility: visible`\n      );\n    }\n  }\n\n  // style={{\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replace(/ /g, \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : countriesToShow.indexOf(geo.properties.NAME) >= 0\n  //                         ? {\n  //                             fill: colors[geo.properties.CONTINENT],\n  //                             pointerEvents: \"all\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           }\n  //                         : {\n  //                             fill: \"#ccc\",\n  //                             pointerEvents: \"none\",\n  //                             stroke: \"#000000\",\n  //                             strokeWidth: borderWidth,\n  //                             outline: \"none\",\n  //                           },\n  //                     hover:\n  //                       currSelectedCountry &&\n  //                       currSelectedCountry.element.id ===\n  //                         geo.properties.NAME.replace(/ /g, \"\")\n  //                         ? selectedStyle(colors[geo.properties.CONTINENT])\n  //                         : hoveredStyle(colors[geo.properties.CONTINENT]),\n  //                   }}\n\n  const setPressedStyle = (country, event) => {\n    if (currSelectedCountry) {\n      //if user clicked on already selected country, return\n      if (event.target.classList.contains(\"pressed\")) return;\n      if (!(currSelectedCountry.element.id === event.target.id)) {\n        const prevCountry = document.querySelector(\n          `#${currSelectedCountry.element.id}`\n        );\n        prevCountry.style.fill = colors[currSelectedCountry.props.CONTINENT];\n        prevCountry.classList.remove(\"pressed\");\n      }\n    }\n    currSelectedCountry = { element: event.target, props: country };\n    event.target.style.fill = selectedStyle(colors[country.CONTINENT]).fill;\n    event.target.classList.add(\"pressed\");\n  };\n\n  // const clearPressedStyle = () => {\n  //   if (currSelectedCountry) {\n  //     document.querySelector(`#${currSelectedCountry.element.id}`).style.fill =\n  //       colors[currSelectedCountry.props.CONTINENT];\n  //     currSelectedCountry = null;\n  //   }\n  // };\n\n  // const renderStyle = (country) => {\n  //   if (!country.area || country.area < 1500) return [{ fontSize: \"0px\" }, 0];\n  //   let adjustedFont =\n  //     country.area > 500000\n  //       ? country.area / 800000 + 4.5\n  //       : country.area / 800000 + 2.3;\n  //   if (adjustedFont <= country.name.common.length) adjustedFont /= 1.3;\n\n  //   if (country.name.common === \"Russia\" && currMap === \"europe\")\n  //     adjustedFont /= 2.5;\n  //   //const rightOffset = adjustedFont;\n  //   return [\n  //     {\n  //       fontSize: `${adjustedFont}px`,\n  //       // stroke: \"#FFF\",\n  //       // stroke: colors[country.CONTINENT],\n  //       // strokeWidth: `${adjustedFont / 50}px`,\n  //     },\n  //     adjustedFont - 1,\n  //   ];\n  // };\n\n  const renderStyle = (area) => {\n    if (area > 5000000) return { fontSize: \"20px\" };\n    if (area > 2500000) return { fontSize: \"12px\" };\n    if (area > 1000000) return { fontSize: \"9px\" };\n    if (area > 500000) return { fontSize: \"7px\" };\n    if (area > 300000) return { fontSize: \"5px\" };\n    // if (area > 200000) return { fontSize: \"4px\" };\n    if (area > 100000) return { fontSize: \"4px\" };\n    return { fontSize: \"3.5px\" };\n    // if (area > 70000) return { fontSize: \"2.5px\" };\n    // return { fontSize: \"2px\" };\n  };\n\n  const hoveredStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 15),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n  const selectedStyle = (color) => {\n    return {\n      fill: LightenDarkenColor(color, 40),\n      stroke: \"#000\",\n      strokeWidth: borderWidth,\n      outline: \"none\",\n    };\n  };\n\n  // const [currPos, setCurrPos] = useState({\n  //   zoom: mapProps.minZoom,\n  //   coordinates: mapProps.coordinates,\n  // });\n  const projection = geoMercator()\n    .scale(mapProps.scale)\n    .center(mapProps.center)\n    .rotate(mapProps.rotate);\n\n  //Uncomment this to make map reset after guess\n  // useEffect(() => {\n  //   setCurrPos({\n  //     zoom: 1,\n  //     coordinates: [0, 40],\n  //   });\n  // }, [currLocation]);\n\n  return (\n    <div className=\"map\">\n      {loading ? <h1 className=\"mapLoading\">Loading...</h1> : <></>}\n      <ComposableMap\n        data-tip=\"\"\n        projection={projection}\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          outline: \"none\",\n        }}\n      >\n        <ZoomableGroup\n          translateExtent={mapProps.translateExtent}\n          minZoom={mapProps.minZoom}\n          maxZoom={mapProps.maxZoom}\n          zoom={mapProps.minZoom}\n          center={mapProps.coordinates}\n        >\n          <Geographies geography={worldGeoSVG}>\n            {({ geographies }) =>\n              geographies.map((geo) => {\n                return (\n                  <Geography\n                    id={camelize(geo.properties.NAME)}\n                    continent={geo.properties.CONTINENT}\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onClick={(event) => {\n                      setPressedStyle(geo.properties, event);\n                      handleNewChosen(geo.properties.NAME);\n                    }}\n                    onMouseEnter={(event) => {\n                      if (\n                        !currSelectedCountry ||\n                        currSelectedCountry.element.id !== event.target.id ||\n                        !currSelectedCountry.element.classList.contains(\n                          \"pressed\"\n                        )\n                      ) {\n                        event.target.style.fill = hoveredStyle(\n                          colors[event.target.getAttribute(\"continent\")]\n                        ).fill;\n                      }\n                    }}\n                    onMouseLeave={(event) => {\n                      if (\n                        currSelectedCountry &&\n                        currSelectedCountry.element.id === event.target.id &&\n                        currSelectedCountry.element.classList.contains(\n                          \"pressed\"\n                        )\n                      ) {\n                        event.target.style.fill = selectedStyle(\n                          colors[event.target.getAttribute(\"continent\")]\n                        ).fill;\n                      } else {\n                        event.target.style.fill =\n                          colors[event.target.getAttribute(\"continent\")];\n                      }\n                    }}\n                    visibility={\"hidden\"}\n                  />\n                );\n              })\n            }\n          </Geographies>\n          {worldCountries.map((country) => {\n            if (\n              loading ||\n              countriesToShow.indexOf(camelize(country.name.common)) < 0\n            )\n              return null;\n            // const currStyle = renderStyle(country);\n            return (\n              <Marker\n                key={country.name.common}\n                coordinates={\n                  country.name.common === \"Russia\" && currMap === \"europe\"\n                    ? [country.latlngAlt[1], country.latlngAlt[0]]\n                    : [country.latlng[1], country.latlng[0]]\n                }\n                fill=\"#000\"\n              >\n                <text\n                  textAnchor=\"middle\"\n                  pointerEvents=\"none\"\n                  style={renderStyle(country.area)}\n                >\n                  {country.name.common}\n                </text>\n                {/* {currPos.zoom * 2 + currStyle[1] > 9 ? (\n                  currStyle[1] > country.name.common.length ? (\n                    <text\n                      textAnchor=\"middle\"\n                      pointerEvents=\"none\"\n                      style={currStyle[0]}\n                    >\n                      {country.name.common}\n                    </text>\n                  ) : (\n                    country.name.common.split(\" \").map((word, index) => {\n                      return (\n                        <text\n                          key={word + index}\n                          textRendering=\"optimizeSpeed\"\n                          textAnchor=\"middle\"\n                          pointerEvents=\"none\"\n                          y={(currStyle[1] / 1.3 + 1.3) * index}\n                          style={currStyle[0]}\n                        >\n                          {word}\n                        </text>\n                      );\n                    })\n                  )\n                ) : (\n                  <></>\n                )} */}\n              </Marker>\n            );\n          })}\n        </ZoomableGroup>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default memo(MapChart);\n","/home/dylan/MusicGuessr/a-musical-planet/src/MapItem.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/LeaderboardUser.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/AudioPlayer.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/Summary.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/CustomiFrame.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/GetMixedColor.js",[],"/home/dylan/MusicGuessr/a-musical-planet/src/SummaryItem.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":86,"column":6,"nodeType":"104","endLine":86,"endColumn":19,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":128,"column":9,"nodeType":"108","messageId":"109","endLine":128,"endColumn":19},{"ruleId":"102","severity":1,"message":"110","line":286,"column":6,"nodeType":"104","endLine":286,"endColumn":15,"suggestions":"111"},{"ruleId":"102","severity":1,"message":"112","line":82,"column":6,"nodeType":"104","endLine":82,"endColumn":8,"suggestions":"113"},{"ruleId":"102","severity":1,"message":"114","line":105,"column":6,"nodeType":"104","endLine":105,"endColumn":15,"suggestions":"115"},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUser'. Either include it or remove the dependency array.","ArrayExpression",["118"],"no-unused-vars","'checkToken' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'accessToken' and 'newGame'. Either include them or remove the dependency array.",["119"],"React Hook useEffect has missing dependencies: 'newCountryGenre1' and 'newCountryGenre2'. Either include them or remove the dependency array.",["120"],"React Hook useEffect has a missing dependency: 'setPlayLoading'. Either include it or remove the dependency array. If 'setPlayLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["121"],"no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [accessToken, setUser]",{"range":"130","text":"131"},"Update the dependencies array to be: [accessToken, loading, newGame]",{"range":"132","text":"133"},"Update the dependencies array to be: [newCountryGenre1, newCountryGenre2]",{"range":"134","text":"135"},"Update the dependencies array to be: [currMap, setPlayLoading]",{"range":"136","text":"137"},[2069,2082],"[accessToken, setUser]",[8185,8194],"[accessToken, loading, newGame]",[2569,2571],"[newCountryGenre1, newCountryGenre2]",[2753,2762],"[currMap, setPlayLoading]"]